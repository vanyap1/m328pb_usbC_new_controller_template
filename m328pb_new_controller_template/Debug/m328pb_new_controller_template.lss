
m328pb_new_controller_template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000188  00800100  0000333c  000033d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000333c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000366  00800288  00800288  00003558  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003558  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000035b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002b50  00000000  00000000  000035f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00058dd2  00000000  00000000  00006144  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000331b  00000000  00000000  0005ef16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00012e30  00000000  00000000  00062231  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00010a08  00000000  00000000  00075064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00021973  00000000  00000000  00085a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00068b5e  00000000  00000000  000a73df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002bc8  00000000  00000000  0010ff3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005963  00000000  00000000  00112b05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__ctors_end>
       4:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__vector_1>
       8:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
       c:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      10:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      14:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      18:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      1c:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      20:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      24:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      28:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      2c:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      30:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      34:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      38:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      3c:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      40:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      44:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      48:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__vector_18>
      4c:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      50:	0c 94 37 09 	jmp	0x126e	; 0x126e <__vector_20>
      54:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__vector_21>
      58:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      5c:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      60:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      64:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      68:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      6c:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      70:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      74:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      78:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      7c:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      80:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      84:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      88:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      8c:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      90:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      94:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      98:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      9c:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__vector_39>
      a0:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__vector_40>
      a4:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      a8:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      ac:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>
      b0:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	bf 02       	muls	r27, r31
      b6:	03 02       	muls	r16, r19
      b8:	03 04       	cpc	r0, r3
      ba:	01 02       	muls	r16, r17
      bc:	04 06       	cpc	r0, r20
      be:	0a 00       	.word	0x000a	; ????
      c0:	fe 07       	cpc	r31, r30
      c2:	fe 07       	cpc	r31, r30
      c4:	00 01       	movw	r0, r0
      c6:	76 02       	muls	r23, r22
      c8:	f9 09       	sbc	r31, r9
      ca:	3c 20       	and	r3, r12
      cc:	07 d6       	rcall	.+3086   	; 0xcdc <rtc_sync+0x7c>
      ce:	f8 f9       	.word	0xf9f8	; ????
      d0:	23 00       	.word	0x0023	; ????
      d2:	21 0a       	sbc	r2, r17
      d4:	d6 f8       	bld	r13, 6
      d6:	91 b4       	in	r9, 0x21	; 33
      d8:	3b 98       	cbi	0x07, 3	; 7
      da:	53 00       	.word	0x0053	; ????
      dc:	22 0b       	sbc	r18, r18
      de:	d6 f8       	bld	r13, 6
      e0:	93 2c       	mov	r9, r3
      e2:	c9 92       	st	Y+, r12
      e4:	9c 37       	cpi	r25, 0x7C	; 124
      e6:	00 23       	and	r16, r16
      e8:	10 d6       	rcall	.+3104   	; 0xd0a <convert_to_timestamp+0x24>
      ea:	f8 93       	.word	0x93f8	; ????
      ec:	2c 89       	ldd	r18, Y+20	; 0x14
      ee:	06 29       	or	r16, r6
      f0:	89 06       	cpc	r8, r25
      f2:	29 c9       	rjmp	.-3502   	; 0xfffff346 <__eeprom_end+0xff7ef346>
      f4:	92 9c       	mul	r9, r2
      f6:	00 24       	eor	r0, r0
      f8:	0d d6       	rcall	.+3098   	; 0xd14 <convert_to_timestamp+0x2e>
      fa:	f8 91       	.word	0x91f8	; ????
      fc:	70 4a       	sbci	r23, 0xA0	; 160
      fe:	c2 31       	cpi	r28, 0x12	; 18
     100:	89 c6       	rjmp	.+3346   	; 0xe14 <convert_to_timestamp+0x12e>
     102:	9c 02       	muls	r25, r28
     104:	25 0d       	add	r18, r5
     106:	d6 f8       	bld	r13, 6
     108:	a3 a4       	ldd	r10, Z+43	; 0x2b
     10a:	29 09       	sbc	r18, r9
     10c:	2b 51       	subi	r18, 0x1B	; 27
     10e:	d2 94       	swap	r13
     110:	13 26       	eor	r1, r19
     112:	0e d6       	rcall	.+3100   	; 0xd30 <convert_to_timestamp+0x4a>
     114:	f8 c3       	rjmp	.+2032   	; 0x906 <__stack+0x7>
     116:	24 4b       	sbci	r18, 0xB4	; 180
     118:	c2 4a       	sbci	r28, 0xA2	; 162
     11a:	53 a6       	std	Z+43, r5	; 0x2b
     11c:	e4 30       	cpi	r30, 0x04	; 4
     11e:	00 27       	eor	r16, r16
     120:	09 d6       	rcall	.+3090   	; 0xd34 <convert_to_timestamp+0x4e>
     122:	f8 91       	.word	0x91f8	; ????
     124:	b4 ce       	rjmp	.-664    	; 0xfffffe8e <__eeprom_end+0xff7efe8e>
     126:	23 00       	.word	0x0023	; ????
     128:	28 09       	sbc	r18, r8
     12a:	d6 f8       	bld	r13, 6
     12c:	a1 b0       	in	r10, 0x01	; 1
     12e:	5a ae       	std	Y+58, r5	; 0x3a
     130:	13 29       	or	r17, r3
     132:	09 d6       	rcall	.+3090   	; 0xd46 <convert_to_timestamp+0x60>
     134:	f8 e3       	ldi	r31, 0x38	; 56
     136:	6a b1       	in	r22, 0x0a	; 10
     138:	4e 02       	muls	r20, r30
     13a:	2a 0e       	add	r2, r26
     13c:	d6 f8       	bld	r13, 6
     13e:	d1 2c       	mov	r13, r1
     140:	4a a2       	std	Y+34, r4	; 0x22
     142:	41 4a       	sbci	r20, 0xA1	; 161
     144:	a2 2c       	mov	r10, r2
     146:	a7 02       	muls	r26, r23
     148:	2b 0a       	sbc	r2, r27
     14a:	d6 f8       	bld	r13, 6
     14c:	f1 34       	cpi	r31, 0x41	; 65
     14e:	1b b4       	in	r1, 0x2b	; 43
     150:	34 67       	ori	r19, 0x74	; 116
     152:	2c 09       	sbc	r18, r12
     154:	d6 f8       	bld	r13, 6
     156:	79 13       	cpse	r23, r25
     158:	eb 18       	sub	r14, r11
     15a:	00 2d       	mov	r16, r0
     15c:	09 d6       	rcall	.+3090   	; 0xd70 <convert_to_timestamp+0x8a>
     15e:	f8 d9       	rcall	.-3088   	; 0xfffff550 <__eeprom_end+0xff7ef550>
     160:	06 9d       	mul	r16, r6
     162:	1b 00       	.word	0x001b	; ????
     164:	2e 09       	sbc	r18, r14
     166:	d6 f8       	bld	r13, 6
     168:	79 0b       	sbc	r23, r25
     16a:	c7 1c       	adc	r12, r7
     16c:	02 2f       	mov	r16, r18
     16e:	0a d6       	rcall	.+3092   	; 0xd84 <convert_to_timestamp+0x9e>
     170:	f8 b1       	in	r31, 0x08	; 8
     172:	34 ec       	ldi	r19, 0xC4	; 196
     174:	9a d3       	rcall	.+1844   	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
     176:	00 30       	cpi	r16, 0x00	; 0
     178:	10 d6       	rcall	.+3104   	; 0xd9a <convert_to_timestamp+0xb4>
     17a:	f8 91       	.word	0x91f8	; ????
     17c:	30 89       	ldd	r19, Z+16	; 0x10
     17e:	b2 24       	eor	r11, r2
     180:	4b b2       	in	r4, 0x1b	; 27
     182:	28 09       	sbc	r18, r8
     184:	73 0a       	sbc	r7, r19
     186:	00 31       	cpi	r16, 0x10	; 16
     188:	0c d6       	rcall	.+3096   	; 0xda2 <convert_to_timestamp+0xbc>
     18a:	f8 91       	.word	0x91f8	; ????
     18c:	50 4b       	sbci	r21, 0xB0	; 176
     18e:	d2 b6       	in	r13, 0x32	; 50
     190:	41 87       	std	Z+9, r20	; 0x09
     192:	01 32       	cpi	r16, 0x21	; 33
     194:	0c d6       	rcall	.+3096   	; 0xdae <convert_to_timestamp+0xc8>
     196:	f8 a7       	std	Y+40, r31	; 0x28
     198:	2c cd       	rjmp	.-1448   	; 0xfffffbf2 <__eeprom_end+0xff7efbf2>
     19a:	b4 30       	cpi	r27, 0x04	; 4
     19c:	1d 74       	andi	r17, 0x4D	; 77
     19e:	18 33       	cpi	r17, 0x38	; 56
     1a0:	0c d6       	rcall	.+3096   	; 0xdba <convert_to_timestamp+0xd4>
     1a2:	b8 07       	cpc	r27, r24
     1a4:	35 0c       	add	r3, r5
     1a6:	e5 24       	eor	r14, r5
     1a8:	8b 76       	andi	r24, 0x6B	; 107
     1aa:	02 34       	cpi	r16, 0x42	; 66
     1ac:	0d d6       	rcall	.+3098   	; 0xdc8 <convert_to_timestamp+0xe2>
     1ae:	f8 a1       	ldd	r31, Y+32	; 0x20
     1b0:	50 4b       	sbci	r21, 0xB0	; 176
     1b2:	a2 d2       	rcall	.+1348   	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
     1b4:	20 a6       	std	Z+40, r2	; 0x28
     1b6:	39 01       	movw	r6, r18
     1b8:	35 0d       	add	r19, r5
     1ba:	d6 b8       	out	0x06, r13	; 6
     1bc:	07 25       	eor	r16, r7
     1be:	4d 24       	eor	r4, r13
     1c0:	29 4d       	sbci	r18, 0xD9	; 217
     1c2:	b2 68       	ori	r27, 0x82	; 130
     1c4:	27 36       	cpi	r18, 0x67	; 103
     1c6:	0d d6       	rcall	.+3098   	; 0xde2 <convert_to_timestamp+0xfc>
     1c8:	f8 11       	cpse	r31, r8
     1ca:	2d 4c       	sbci	r18, 0xCD	; 205
     1cc:	13 49       	sbci	r17, 0x93	; 147
     1ce:	4a b2       	in	r4, 0x1a	; 26
     1d0:	68 27       	eor	r22, r24
     1d2:	37 0b       	sbc	r19, r23
     1d4:	d6 b8       	out	0x06, r13	; 6
     1d6:	07 35       	cpi	r16, 0x57	; 87
     1d8:	4c c3       	rjmp	.+1688   	; 0x872 <__DATA_REGION_LENGTH__+0x72>
     1da:	6a 4e       	sbci	r22, 0xEA	; 234
     1dc:	02 38       	cpi	r16, 0x82	; 130
     1de:	0d d6       	rcall	.+3098   	; 0xdfa <convert_to_timestamp+0x114>
     1e0:	f8 a7       	std	Y+40, r31	; 0x28
     1e2:	2c c9       	rjmp	.-3496   	; 0xfffff43c <__eeprom_end+0xff7ef43c>
     1e4:	a2 29       	or	r26, r2
     1e6:	4b b2       	in	r4, 0x1b	; 27
     1e8:	68 27       	eor	r22, r24
     1ea:	39 0d       	add	r19, r9
     1ec:	d6 f8       	bld	r13, 6
     1ee:	a7 2c       	mov	r10, r7
     1f0:	89 2c       	mov	r8, r9
     1f2:	69 98       	cbi	0x0d, 1	; 13
     1f4:	e9 14       	cp	r14, r9
     1f6:	00 3a       	cpi	r16, 0xA0	; 160
     1f8:	0c d6       	rcall	.+3096   	; 0xe12 <convert_to_timestamp+0x12c>
     1fa:	f8 f1       	brcs	.+126    	; 0x27a <__trampolines_end+0x1c6>
     1fc:	70 cc       	rjmp	.-1824   	; 0xfffffade <__eeprom_end+0xff7efade>
     1fe:	c1 70       	andi	r28, 0x01	; 1
     200:	cc 21       	and	r28, r12
     202:	00 3b       	cpi	r16, 0xB0	; 176
     204:	0b d6       	rcall	.+3094   	; 0xe1c <convert_to_timestamp+0x136>
     206:	f8 f1       	brcs	.+126    	; 0x286 <__trampolines_end+0x1d2>
     208:	70 cc       	rjmp	.-1824   	; 0xfffffaea <__eeprom_end+0xff7efaea>
     20a:	41 b1       	in	r20, 0x01	; 1
     20c:	8e 01       	movw	r16, r28
     20e:	3c 09       	sbc	r19, r12
     210:	d6 f8       	bld	r13, 6
     212:	b1 b0       	in	r11, 0x01	; 1
     214:	b9 1d       	adc	r27, r9
     216:	06 3d       	cpi	r16, 0xD6	; 214
     218:	0a d6       	rcall	.+3092   	; 0xe2e <convert_to_timestamp+0x148>
     21a:	f8 89       	ldd	r31, Y+16	; 0x10
     21c:	83 3e       	cpi	r24, 0xE3	; 227
     21e:	e8 8c       	ldd	r14, Y+24	; 0x18
     220:	00 3e       	cpi	r16, 0xE0	; 224
     222:	09 d6       	rcall	.+3090   	; 0xe36 <convert_to_timestamp+0x150>
     224:	f8 e3       	ldi	r31, 0x38	; 56
     226:	c6 76       	andi	r28, 0x66	; 102
     228:	12 00       	.word	0x0012	; ????
     22a:	3f 0b       	sbc	r19, r31
     22c:	d6 f8       	bld	r13, 6
     22e:	a7 2c       	mov	r10, r7
     230:	ac e6       	ldi	r26, 0x6C	; 108
     232:	60 4e       	sbci	r22, 0xE0	; 224
     234:	01 40       	sbci	r16, 0x01	; 1
     236:	0c d6       	rcall	.+3096   	; 0xe50 <convert_to_timestamp+0x16a>
     238:	f8 a7       	std	Y+40, r31	; 0x28
     23a:	2c 89       	ldd	r18, Y+20	; 0x14
     23c:	94 2e       	mov	r9, r20
     23e:	52 bc       	out	0x22, r5	; 34
     240:	13 41       	sbci	r17, 0x13	; 19
     242:	10 d6       	rcall	.+3104   	; 0xe64 <convert_to_timestamp+0x17e>
     244:	f8 91       	.word	0x91f8	; ????
     246:	30 89       	ldd	r19, Z+16	; 0x10
     248:	b2 24       	eor	r11, r2
     24a:	4b 06       	cpc	r4, r27
     24c:	25 4b       	sbci	r18, 0xB5	; 181
     24e:	b2 1c       	adc	r11, r2
     250:	06 42       	sbci	r16, 0x26	; 38
     252:	0c d6       	rcall	.+3096   	; 0xe6c <convert_to_timestamp+0x186>
     254:	b8 87       	std	Y+8, r27	; 0x08
     256:	2c 6a       	ori	r18, 0xAC	; 172
     258:	da a2       	std	Y+34, r13	; 0x22
     25a:	96 21       	and	r25, r6
     25c:	27 43       	sbci	r18, 0x37	; 55
     25e:	0b d6       	rcall	.+3094   	; 0xe76 <__vector_39+0x4>
     260:	f8 a7       	std	Y+40, r31	; 0x28
     262:	2c 49       	sbci	r18, 0x9C	; 156
     264:	db a2       	std	Y+35, r13	; 0x23
     266:	9d 00       	.word	0x009d	; ????
     268:	44 0b       	sbc	r20, r20
     26a:	d6 b8       	out	0x06, r13	; 6
     26c:	87 2c       	mov	r8, r7
     26e:	ea 5f       	subi	r30, 0xFA	; 250
     270:	86 9c       	mul	r8, r6
     272:	00 45       	sbci	r16, 0x50	; 80
     274:	0d d6       	rcall	.+3098   	; 0xe90 <__vector_39+0x1e>
     276:	b8 07       	cpc	r27, r24
     278:	25 4d       	sbci	r18, 0xD5	; 213
     27a:	87 28       	or	r8, r7
     27c:	4d 07       	cpc	r20, r29
     27e:	1d 06       	cpc	r1, r29
     280:	46 0c       	add	r4, r6
     282:	d6 b8       	out	0x06, r13	; 6
     284:	07 25       	eor	r16, r7
     286:	4d 87       	std	Y+13, r20	; 0x0d
     288:	28 ad       	ldd	r18, Y+56	; 0x38
     28a:	d3 00       	.word	0x00d3	; ????
     28c:	47 0c       	add	r4, r7
     28e:	d6 f8       	bld	r13, 6
     290:	a7 2c       	mov	r10, r7
     292:	49 4b       	sbci	r20, 0xB9	; 185
     294:	4a 16       	cp	r4, r26
     296:	ed 04       	cpc	r14, r13
     298:	48 10       	cpse	r4, r8
     29a:	d6 b8       	out	0x06, r13	; 6
     29c:	b3 24       	eor	r11, r3
     29e:	4b b2       	in	r4, 0x1b	; 27
     2a0:	64 50       	subi	r22, 0x04	; 4
     2a2:	b2 24       	eor	r11, r2
     2a4:	4b b2       	in	r4, 0x1b	; 27
     2a6:	1c 06       	cpc	r1, r28
     2a8:	49 08       	sbc	r4, r9
     2aa:	d6 f8       	bld	r13, 6
     2ac:	c7 b4       	in	r12, 0x27	; 39
     2ae:	e3 4e       	sbci	r30, 0xE3	; 227
     2b0:	4a 0b       	sbc	r20, r26
     2b2:	d6 f8       	bld	r13, 6
     2b4:	91 31       	cpi	r25, 0x11	; 17
     2b6:	6d aa       	std	Y+53, r6	; 0x35
     2b8:	e9 14       	cp	r14, r9
     2ba:	00 4b       	sbci	r16, 0xB0	; 176
     2bc:	0e d6       	rcall	.+3100   	; 0xeda <spi1_init+0x3a>
     2be:	b8 b3       	in	r27, 0x18	; 24
     2c0:	24 aa       	std	Z+52, r2	; 0x34
     2c2:	64 62       	ori	r22, 0x24	; 36
     2c4:	92 45       	sbci	r25, 0x52	; 82
     2c6:	b5 1c       	adc	r11, r5
     2c8:	06 4c       	sbci	r16, 0xC6	; 198
     2ca:	09 d6       	rcall	.+3090   	; 0xede <spi1_init+0x3e>
     2cc:	b8 d3       	rcall	.+1904   	; 0xa3e <.do_clear_bss_start+0x4>
     2ce:	5e 07       	cpc	r21, r30
     2d0:	1d 06       	cpc	r1, r29
     2d2:	4d 0e       	add	r4, r29
     2d4:	d6 b8       	out	0x06, r13	; 6
     2d6:	b3 24       	eor	r11, r3
     2d8:	4b 2c       	mov	r4, r11
     2da:	dd 92       	st	X+, r13
     2dc:	2c c9       	rjmp	.-3496   	; 0xfffff536 <__eeprom_end+0xff7ef536>
     2de:	72 18       	sub	r7, r2
     2e0:	4e 0f       	add	r20, r30
     2e2:	d6 b8       	out	0x06, r13	; 6
     2e4:	b3 24       	eor	r11, r3
     2e6:	4b a4       	ldd	r4, Y+43	; 0x2b
     2e8:	a4 93       	xch	Z, r26
     2ea:	92 25       	eor	r25, r2
     2ec:	59 0e       	add	r5, r25
     2ee:	03 4f       	sbci	r16, 0xF3	; 243
     2f0:	0e d6       	rcall	.+3100   	; 0xf0e <twi_start+0x18>
     2f2:	f8 a7       	std	Y+40, r31	; 0x28
     2f4:	2c c9       	rjmp	.-3496   	; 0xfffff54e <__eeprom_end+0xff7ef54e>
     2f6:	92 2c       	mov	r9, r2
     2f8:	c9 92       	st	Y+, r12
     2fa:	2c da       	rcall	.-2984   	; 0xfffff754 <__eeprom_end+0xff7ef754>
     2fc:	09 50       	subi	r16, 0x09	; 9
     2fe:	0d d6       	rcall	.+3098   	; 0xf1a <twi_addr_write_ack+0x4>
     300:	b8 87       	std	Y+8, r27	; 0x08
     302:	28 4b       	sbci	r18, 0xB8	; 184
     304:	b2 64       	ori	r27, 0x42	; 66
     306:	88 d2       	rcall	.+1296   	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     308:	3a 0d       	add	r19, r10
     30a:	51 0e       	add	r5, r17
     30c:	d6 f8       	bld	r13, 6
     30e:	a7 2c       	mov	r10, r7
     310:	c9 92       	st	Y+, r12
     312:	2c c9       	rjmp	.-3496   	; 0xfffff56c <__eeprom_end+0xff7ef56c>
     314:	92 a6       	std	Z+42, r9	; 0x2a
     316:	39 07       	cpc	r19, r25
     318:	52 10       	cpse	r5, r2
     31a:	d6 b8       	out	0x06, r13	; 6
     31c:	87 28       	or	r8, r7
     31e:	4b b2       	in	r4, 0x1b	; 27
     320:	64 88       	ldd	r6, Z+20	; 0x14
     322:	92 2c       	mov	r9, r2
     324:	aa e5       	ldi	r26, 0x5A	; 90
     326:	30 00       	.word	0x0030	; ????
     328:	53 0c       	add	r5, r3
     32a:	d6 f8       	bld	r13, 6
     32c:	a7 2c       	mov	r10, r7
     32e:	89 e7       	ldi	r24, 0x79	; 121
     330:	24 8b       	std	Z+20, r18	; 0x14
     332:	76 02       	muls	r23, r22
     334:	54 09       	sbc	r21, r4
     336:	d6 b8       	out	0x06, r13	; 6
     338:	07 2d       	mov	r16, r7
     33a:	ed 9d       	mul	r30, r13
     33c:	02 55       	subi	r16, 0x52	; 82
     33e:	0f d6       	rcall	.+3102   	; 0xf5e <__vector_40+0x8>
     340:	b8 b3       	in	r27, 0x18	; 24
     342:	24 4b       	sbci	r18, 0xB4	; 180
     344:	b2 24       	eor	r11, r2
     346:	4b b2       	in	r4, 0x1b	; 27
     348:	24 8b       	std	Z+20, r18	; 0x14
     34a:	76 02       	muls	r23, r22
     34c:	56 10       	cpse	r5, r6
     34e:	d6 b8       	out	0x06, r13	; 6
     350:	b3 24       	eor	r11, r3
     352:	4b b2       	in	r4, 0x1b	; 27
     354:	28 c9       	rjmp	.-3504   	; 0xfffff5a6 <__eeprom_end+0xff7ef5a6>
     356:	92 2c       	mov	r9, r2
     358:	09 73       	andi	r16, 0x39	; 57
     35a:	0a 00       	.word	0x000a	; ????
     35c:	57 0e       	add	r5, r23
     35e:	d6 b8       	out	0x06, r13	; 6
     360:	b3 24       	eor	r11, r3
     362:	4b b2       	in	r4, 0x1b	; 27
     364:	a4 2f       	mov	r26, r20
     366:	96 2c       	mov	r9, r6
     368:	87 01       	movw	r16, r14
     36a:	58 0f       	add	r21, r24
     36c:	d6 b8       	out	0x06, r13	; 6
     36e:	b3 24       	eor	r11, r3
     370:	8b 92       	.word	0x928b	; ????
     372:	b0 12       	cpse	r11, r16
     374:	65 49       	sbci	r22, 0x95	; 149
     376:	96 c3       	rjmp	.+1836   	; 0xaa4 <adc_convert+0x12>
     378:	00 59       	subi	r16, 0x90	; 144
     37a:	0c d6       	rcall	.+3096   	; 0xf94 <twi_read+0x1c>
     37c:	b8 b3       	in	r27, 0x18	; 24
     37e:	24 8b       	std	Z+20, r18	; 0x14
     380:	92 30       	cpi	r25, 0x02	; 2
     382:	6d a7       	std	Y+45, r22	; 0x2d
     384:	00 5a       	subi	r16, 0xA0	; 160
     386:	0b d6       	rcall	.+3094   	; 0xf9e <twi_read+0x26>
     388:	b8 07       	cpc	r27, r24
     38a:	35 ec       	ldi	r19, 0xC5	; 197
     38c:	3a e8       	ldi	r19, 0x8A	; 138
     38e:	30 00       	.word	0x0030	; ????
     390:	5b 08       	sbc	r5, r11
     392:	d6 f8       	bld	r13, 6
     394:	b7 b4       	in	r11, 0x27	; 39
     396:	eb 4e       	sbci	r30, 0xEB	; 235
     398:	5c 09       	sbc	r21, r12
     39a:	d6 b8       	out	0x06, r13	; 6
     39c:	d3 b8       	out	0x03, r13	; 3
     39e:	6b 0e       	add	r6, r27
     3a0:	03 5d       	subi	r16, 0xD3	; 211
     3a2:	08 d6       	rcall	.+3088   	; 0xfb4 <twi_read+0x3c>
     3a4:	f8 d7       	rcall	.+4080   	; 0x1396 <main+0x5a>
     3a6:	de 76       	andi	r29, 0x6E	; 110
     3a8:	02 5e       	subi	r16, 0xE2	; 226
     3aa:	0b d6       	rcall	.+3094   	; 0xfc2 <twi_read+0x4a>
     3ac:	f8 91       	.word	0x91f8	; ????
     3ae:	30 89       	ldd	r19, Z+16	; 0x10
     3b0:	b2 9c       	mul	r11, r2
     3b2:	27 00       	.word	0x0027	; ????
     3b4:	5f 08       	sbc	r5, r15
     3b6:	d6 f8       	bld	r13, 6
     3b8:	f9 3c       	cpi	r31, 0xC9	; 201
     3ba:	e8 00       	.word	0x00e8	; ????
     3bc:	60 08       	sbc	r6, r0
     3be:	d6 b8       	out	0x06, r13	; 6
     3c0:	e2 9c       	mul	r14, r2
     3c2:	5f 00       	.word	0x005f	; ????
     3c4:	61 0d       	add	r22, r1
     3c6:	d6 f8       	bld	r13, 6
     3c8:	a9 73       	andi	r26, 0x39	; 57
     3ca:	34 24       	eor	r3, r4
     3cc:	59 34       	cpi	r21, 0x49	; 73
     3ce:	e4 30       	cpi	r30, 0x04	; 4
     3d0:	00 62       	ori	r16, 0x20	; 32
     3d2:	0d d6       	rcall	.+3098   	; 0xfee <twi_read+0x76>
     3d4:	b8 d3       	rcall	.+1904   	; 0xb46 <gpio_set_pin_level+0x18>
     3d6:	8a 24       	eor	r8, r10
     3d8:	25 59       	subi	r18, 0x95	; 149
     3da:	22 25       	eor	r18, r2
     3dc:	89 4e       	sbci	r24, 0xE9	; 233
     3de:	63 0b       	sbc	r22, r19
     3e0:	d6 f8       	bld	r13, 6
     3e2:	a9 53       	subi	r26, 0x39	; 57
     3e4:	96 a4       	ldd	r9, Z+46	; 0x2e
     3e6:	59 b4       	in	r5, 0x29	; 41
     3e8:	13 64       	ori	r17, 0x43	; 67
     3ea:	0e d6       	rcall	.+3100   	; 0x1008 <twi_read+0x90>
     3ec:	f8 b1       	in	r31, 0x08	; 8
     3ee:	34 52       	subi	r19, 0x24	; 36
     3f0:	4a 4a       	sbci	r20, 0xAA	; 170
     3f2:	96 44       	sbci	r25, 0x46	; 70
     3f4:	96 1c       	adc	r9, r6
     3f6:	06 65       	ori	r16, 0x56	; 86
     3f8:	0b d6       	rcall	.+3094   	; 0x1010 <twi_read+0x98>
     3fa:	f8 a9       	ldd	r31, Y+48	; 0x30
     3fc:	53 96       	adiw	r26, 0x13	; 19
     3fe:	0c 4a       	sbci	r16, 0xAC	; 172
     400:	bc 13       	cpse	r27, r28
     402:	66 0c       	add	r6, r6
     404:	d6 f8       	bld	r13, 6
     406:	11 2d       	mov	r17, r1
     408:	2a 0e       	add	r2, r26
     40a:	59 5a       	subi	r21, 0xA9	; 169
     40c:	27 01       	movw	r4, r14
     40e:	67 0f       	add	r22, r23
     410:	d6 f8       	bld	r13, 6
     412:	a9 43       	sbci	r26, 0x39	; 57
     414:	92 25       	eor	r25, r2
     416:	59 34       	cpi	r21, 0x49	; 73
     418:	a4 49       	sbci	r26, 0x94	; 148
     41a:	16 4d       	sbci	r17, 0xD6	; 214
     41c:	00 68       	ori	r16, 0x80	; 128
     41e:	0e d6       	rcall	.+3100   	; 0x103c <twi_read+0xc4>
     420:	b8 d3       	rcall	.+1904   	; 0xb92 <gpio_set_pin_direction+0x12>
     422:	8a 24       	eor	r8, r10
     424:	25 59       	subi	r18, 0x95	; 149
     426:	92 25       	eor	r25, r2
     428:	59 0e       	add	r5, r25
     42a:	03 69       	ori	r16, 0x93	; 147
     42c:	0a d6       	rcall	.+3092   	; 0x1042 <twi_read+0xca>
     42e:	f8 91       	.word	0x91f8	; ????
     430:	1c 53       	subi	r17, 0x3C	; 60
     432:	1b 77       	andi	r17, 0x7B	; 123
     434:	02 6a       	ori	r16, 0xA2	; 162
     436:	0b d6       	rcall	.+3094   	; 0x104e <twi_read+0xd6>
     438:	f8 b1       	in	r31, 0x08	; 8
     43a:	1c 53       	subi	r17, 0x3C	; 60
     43c:	9b ba       	out	0x1b, r9	; 27
     43e:	49 00       	.word	0x0049	; ????
     440:	6b 0d       	add	r22, r11
     442:	d6 b8       	out	0x06, r13	; 6
     444:	d3 5a       	subi	r29, 0xA3	; 163
     446:	12 45       	sbci	r17, 0x52	; 82
     448:	5b 54       	subi	r21, 0x4B	; 75
     44a:	cb 61       	ori	r28, 0x1B	; 27
     44c:	00 6c       	ori	r16, 0xC0	; 192
     44e:	08 d6       	rcall	.+3088   	; 0x1060 <twi_read+0xe8>
     450:	f8 d5       	rcall	.+3056   	; 0x1042 <twi_read+0xca>
     452:	1e 77       	andi	r17, 0x7E	; 126
     454:	02 6d       	ori	r16, 0xD2	; 210
     456:	0b d6       	rcall	.+3094   	; 0x106e <twi_read+0xf6>
     458:	f8 89       	ldd	r31, Y+16	; 0x10
     45a:	4a 94       	dec	r4
     45c:	f4 6f       	ori	r31, 0xF4	; 244
     45e:	39 0c       	add	r3, r9
     460:	6e 0e       	add	r6, r30
     462:	d6 f8       	bld	r13, 6
     464:	89 89       	ldd	r24, Y+17	; 0x11
     466:	24 25       	eor	r18, r4
     468:	59 92       	st	Y+, r5
     46a:	25 59       	subi	r18, 0x95	; 149
     46c:	0e 03       	fmul	r16, r22
     46e:	6f 0c       	add	r6, r15
     470:	d6 f8       	bld	r13, 6
     472:	a9 53       	subi	r26, 0x39	; 57
     474:	96 64       	ori	r25, 0x46	; 70
     476:	49 16       	cp	r4, r25
     478:	ed 04       	cpc	r14, r13
     47a:	70 0f       	add	r23, r16
     47c:	d6 f8       	bld	r13, 6
     47e:	89 89       	ldd	r24, Y+17	; 0x11
     480:	24 25       	eor	r18, r4
     482:	59 22       	and	r5, r25
     484:	25 89       	ldd	r18, Z+21	; 0x15
     486:	94 a6       	std	Z+44, r9	; 0x2c
     488:	00 71       	andi	r16, 0x10	; 16
     48a:	0d d6       	rcall	.+3098   	; 0x10a6 <twi_read+0x12e>
     48c:	f8 a9       	ldd	r31, Y+48	; 0x30
     48e:	4a 49       	sbci	r20, 0x9A	; 154
     490:	c9 92       	st	Y+, r12
     492:	c8 92       	.word	0x92c8	; ????
     494:	56 00       	.word	0x0056	; ????
     496:	72 0b       	sbc	r23, r18
     498:	d6 f8       	bld	r13, 6
     49a:	89 89       	ldd	r24, Y+17	; 0x11
     49c:	24 25       	eor	r18, r4
     49e:	69 9d       	mul	r22, r9
     4a0:	06 73       	andi	r16, 0x36	; 54
     4a2:	0a d6       	rcall	.+3092   	; 0x10b8 <twi_write>
     4a4:	f8 a9       	ldd	r31, Y+48	; 0x30
     4a6:	53 3c       	cpi	r21, 0xC3	; 195
     4a8:	27 43       	sbci	r18, 0x37	; 55
     4aa:	4e 74       	andi	r20, 0x4E	; 78
     4ac:	0b d6       	rcall	.+3094   	; 0x10c4 <twi_write+0xc>
     4ae:	f8 d3       	rcall	.+2032   	; 0xca0 <rtc_sync+0x40>
     4b0:	70 c8       	rjmp	.-3872   	; 0xfffff592 <__eeprom_end+0xff7ef592>
     4b2:	d2 52       	subi	r29, 0x22	; 34
     4b4:	a6 13       	cpse	r26, r22
     4b6:	75 0d       	add	r23, r5
     4b8:	d6 f8       	bld	r13, 6
     4ba:	89 59       	subi	r24, 0x99	; 153
     4bc:	92 25       	eor	r25, r2
     4be:	59 12       	cpse	r5, r25
     4c0:	59 72       	andi	r21, 0x29	; 41
     4c2:	18 76       	andi	r17, 0x68	; 104
     4c4:	0d d6       	rcall	.+3098   	; 0x10e0 <twi_write+0x28>
     4c6:	f8 89       	ldd	r31, Y+16	; 0x10
     4c8:	59 92       	st	Y+, r5
     4ca:	45 49       	sbci	r20, 0x95	; 149
     4cc:	96 84       	ldd	r9, Z+14	; 0x0e
     4ce:	39 05       	cpc	r19, r9
     4d0:	77 0c       	add	r7, r7
     4d2:	d6 f8       	bld	r13, 6
     4d4:	89 59       	subi	r24, 0x99	; 153
     4d6:	92 25       	eor	r25, r2
     4d8:	7d 4a       	sbci	r23, 0xAD	; 173
     4da:	72 02       	muls	r23, r18
     4dc:	78 0d       	add	r23, r8
     4de:	d6 f8       	bld	r13, 6
     4e0:	89 59       	subi	r24, 0x99	; 153
     4e2:	94 84       	ldd	r9, Z+12	; 0x0c
     4e4:	95 28       	or	r9, r5
     4e6:	cb 61       	ori	r28, 0x1B	; 27
     4e8:	00 79       	andi	r16, 0x90	; 144
     4ea:	0e d6       	rcall	.+3100   	; 0x1108 <twi_write+0x50>
     4ec:	f8 89       	ldd	r31, Y+16	; 0x10
     4ee:	59 92       	st	Y+, r5
     4f0:	25 91       	lpm	r18, Z+
     4f2:	25 4d       	sbci	r18, 0xD5	; 213
     4f4:	b2 68       	ori	r27, 0x82	; 130
     4f6:	02 7a       	andi	r16, 0xA2	; 162
     4f8:	0b d6       	rcall	.+3094   	; 0x1110 <twi_write+0x58>
     4fa:	f8 89       	ldd	r31, Y+16	; 0x10
     4fc:	83 d8       	rcall	.-3834   	; 0xfffff604 <__eeprom_end+0xff7ef604>
     4fe:	38 e8       	ldi	r19, 0x88	; 136
     500:	30 00       	.word	0x0030	; ????
     502:	7b 0c       	add	r7, r11
     504:	d6 f8       	bld	r13, 6
     506:	21 2d       	mov	r18, r1
     508:	ce e4       	ldi	r28, 0x4E	; 78
     50a:	30 d6       	rcall	.+3168   	; 0x116c <twi_transfer+0x1c>
     50c:	61 00       	.word	0x0061	; ????
     50e:	7c 09       	sbc	r23, r12
     510:	d6 f8       	bld	r13, 6
     512:	91 b4       	in	r9, 0x21	; 33
     514:	ef 14       	cp	r14, r15
     516:	00 7d       	andi	r16, 0xD0	; 208
     518:	0b d6       	rcall	.+3094   	; 0x1130 <twi_write+0x78>
     51a:	f8 e5       	ldi	r31, 0x58	; 88
     51c:	30 d6       	rcall	.+3168   	; 0x117e <twi_transfer+0x2e>
     51e:	e2 4c       	sbci	r30, 0xC2	; 194
     520:	a7 00       	.word	0x00a7	; ????
     522:	7e 0a       	sbc	r7, r30
     524:	d6 f8       	bld	r13, 6
     526:	a3 a4       	ldd	r10, Z+43	; 0x2b
     528:	53 ce       	rjmp	.-858    	; 0x1d0 <__trampolines_end+0x11c>
     52a:	1b 00       	.word	0x001b	; ????
     52c:	a0 07       	cpc	r26, r16
     52e:	d6 f8       	bld	r13, 6
     530:	f9 23       	and	r31, r25
     532:	00 a1       	ldd	r16, Z+32	; 0x20
     534:	0a d6       	rcall	.+3092   	; 0x114a <twi_write+0x92>
     536:	f8 91       	.word	0x91f8	; ????
     538:	1c 4c       	sbci	r17, 0xCC	; 204
     53a:	bb 53       	subi	r27, 0x3B	; 59
     53c:	00 a2       	std	Z+32, r0	; 0x20
     53e:	0f d6       	rcall	.+3102   	; 0x115e <twi_transfer+0xe>
     540:	f8 f1       	brcs	.+126    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
     542:	70 48       	sbci	r23, 0x80	; 128
     544:	6a 49       	sbci	r22, 0x9A	; 154
     546:	96 84       	ldd	r9, Z+14	; 0x0e
     548:	43 96       	adiw	r24, 0x13	; 19
     54a:	43 00       	.word	0x0043	; ????
     54c:	a3 0d       	add	r26, r3
     54e:	d6 f8       	bld	r13, 6
     550:	11 2d       	mov	r17, r1
     552:	2a 8e       	std	Y+26, r2	; 0x1a
     554:	69 94       	.word	0x9469	; ????
     556:	24 3a       	cpi	r18, 0xA4	; 164
     558:	01 a4       	ldd	r0, Z+41	; 0x29
     55a:	0d d6       	rcall	.+3098   	; 0x1176 <twi_transfer+0x26>
     55c:	f8 89       	ldd	r31, Y+16	; 0x10
     55e:	59 b4       	in	r5, 0x29	; 41
     560:	25 d9       	rcall	.-3510   	; 0xfffff7ac <__eeprom_end+0xff7ef7ac>
     562:	94 e5       	ldi	r25, 0x54	; 84
     564:	30 00       	.word	0x0030	; ????
     566:	a5 0e       	add	r10, r21
     568:	d6 b8       	out	0x06, r13	; 6
     56a:	b3 24       	eor	r11, r3
     56c:	8b 92       	.word	0x928b	; ????
     56e:	30 1b       	sub	r19, r16
     570:	b4 b4       	in	r11, 0x24	; 36
     572:	0e 01       	movw	r0, r28
     574:	a6 0b       	sbc	r26, r22
     576:	d6 f8       	bld	r13, 6
     578:	91 b4       	in	r9, 0x21	; 33
     57a:	0e a6       	std	Y+46, r0	; 0x2e
     57c:	75 0a       	sbc	r7, r21
     57e:	00 a7       	std	Z+40, r16	; 0x28
     580:	0d d6       	rcall	.+3098   	; 0x119c <twi_transfer+0x4c>
     582:	f8 a7       	std	Y+40, r31	; 0x28
     584:	74 8b       	std	Z+20, r23	; 0x14
     586:	b2 28       	or	r11, r2
     588:	5b a3       	std	Y+35, r21	; 0x23
     58a:	1d 01       	movw	r2, r26
     58c:	a8 07       	cpc	r26, r24
     58e:	d6 78       	andi	r29, 0x86	; 134
     590:	ea fc       	.word	0xfcea	; ????
     592:	01 a9       	ldd	r16, Z+49	; 0x31
     594:	0c d6       	rcall	.+3096   	; 0x11ae <twi_transfer+0x5e>
     596:	f8 a7       	std	Y+40, r31	; 0x28
     598:	2c 69       	ori	r18, 0x9C	; 156
     59a:	91 92       	st	Z+, r9
     59c:	6e d1       	rcall	.+732    	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
     59e:	4e aa       	std	Y+54, r4	; 0x36
     5a0:	0d d6       	rcall	.+3098   	; 0x11bc <twi_transfer+0x6c>
     5a2:	f8 91       	.word	0x91f8	; ????
     5a4:	a9 45       	sbci	r26, 0x59	; 89
     5a6:	4b 72       	andi	r20, 0x2B	; 43
     5a8:	64 c8       	rjmp	.-3896   	; 0xfffff672 <__eeprom_end+0xff7ef672>
     5aa:	a9 00       	.word	0x00a9	; ????
     5ac:	ab 0e       	add	r10, r27
     5ae:	d6 f8       	bld	r13, 6
     5b0:	c9 51       	subi	r28, 0x19	; 25
     5b2:	12 25       	eor	r17, r2
     5b4:	51 16       	cp	r5, r17
     5b6:	65 51       	subi	r22, 0x15	; 21
     5b8:	8e 02       	muls	r24, r30
     5ba:	ac 09       	sbc	r26, r12
     5bc:	d6 f8       	bld	r13, 6
     5be:	19 87       	std	Y+9, r17	; 0x09
     5c0:	34 67       	ori	r19, 0x74	; 116
     5c2:	04 ad       	ldd	r16, Z+60	; 0x3c
     5c4:	09 d6       	rcall	.+3090   	; 0x11d8 <twi_init+0x6>
     5c6:	f8 19       	sub	r31, r8
     5c8:	87 9c       	mul	r8, r7
     5ca:	1b 00       	.word	0x001b	; ????
     5cc:	ae 0e       	add	r10, r30
     5ce:	d6 f8       	bld	r13, 6
     5d0:	a7 2c       	mov	r10, r7
     5d2:	59 12       	cpse	r5, r25
     5d4:	29 91       	ld	r18, Y+
     5d6:	92 2c       	mov	r9, r2
     5d8:	da 09       	sbc	r29, r10
     5da:	af 08       	sbc	r10, r15
     5dc:	d6 38       	cpi	r29, 0x86	; 134
     5de:	06 9d       	mul	r16, r6
     5e0:	9f 01       	movw	r18, r30
     5e2:	b0 0a       	sbc	r11, r16
     5e4:	d6 f8       	bld	r13, 6
     5e6:	91 30       	cpi	r25, 0x01	; 1
     5e8:	09 73       	andi	r16, 0x39	; 57
     5ea:	1e 01       	movw	r2, r28
     5ec:	b1 0c       	add	r11, r1
     5ee:	d6 f8       	bld	r13, 6
     5f0:	f1 34       	cpi	r31, 0x41	; 65
     5f2:	1b b4       	in	r1, 0x2b	; 43
     5f4:	34 1b       	sub	r19, r20
     5f6:	74 18       	sub	r7, r4
     5f8:	b2 0b       	sbc	r27, r18
     5fa:	d6 b8       	out	0x06, r13	; 6
     5fc:	b4 28       	or	r11, r4
     5fe:	2c 0e       	add	r2, r28
     600:	39 37       	cpi	r19, 0x79	; 121
     602:	00 b3       	in	r16, 0x10	; 16
     604:	0a d6       	rcall	.+3092   	; 0x121a <__vector_18+0x1a>
     606:	78 e6       	ldi	r23, 0x68	; 104
     608:	4c 8e       	std	Y+28, r4	; 0x1c
     60a:	76 8e       	std	Z+30, r7	; 0x1e
     60c:	00 b4       	in	r0, 0x20	; 32
     60e:	08 d6       	rcall	.+3088   	; 0x1220 <__vector_18+0x20>
     610:	f8 c2       	rjmp	.+1520   	; 0xc02 <gpio_set_pin_direction+0x82>
     612:	9c 9f       	mul	r25, r28
     614:	00 b5       	in	r16, 0x20	; 32
     616:	0f d6       	rcall	.+3102   	; 0x1236 <__vector_18+0x36>
     618:	f8 89       	ldd	r31, Y+16	; 0x10
     61a:	59 92       	st	Y+, r5
     61c:	25 59       	subi	r18, 0x95	; 149
     61e:	22 25       	eor	r18, r2
     620:	89 94       	.word	0x9489	; ????
     622:	83 00       	.word	0x0083	; ????
     624:	b6 10       	cpse	r11, r6
     626:	d6 f8       	bld	r13, 6
     628:	87 64       	ori	r24, 0x47	; 71
     62a:	49 96       	adiw	r24, 0x19	; 25
     62c:	48 c9       	rjmp	.-3440   	; 0xfffff8be <__eeprom_end+0xff7ef8be>
     62e:	92 2c       	mov	r9, r2
     630:	c9 92       	st	Y+, r12
     632:	1c 06       	cpc	r1, r28
     634:	b7 08       	sbc	r11, r7
     636:	d6 f8       	bld	r13, 6
     638:	59 73       	andi	r21, 0x39	; 57
     63a:	ae 00       	.word	0x00ae	; ????
     63c:	b8 08       	sbc	r11, r8
     63e:	d6 f8       	bld	r13, 6
     640:	f9 29       	or	r31, r9
     642:	cc 00       	.word	0x00cc	; ????
     644:	b9 09       	sbc	r27, r9
     646:	d6 b8       	out	0x06, r13	; 6
     648:	42 b5       	in	r20, 0x22	; 34
     64a:	b8 73       	andi	r27, 0x38	; 56
     64c:	04 ba       	out	0x14, r0	; 20
     64e:	0c d6       	rcall	.+3096   	; 0x1268 <__vector_18+0x68>
     650:	f8 11       	cpse	r31, r8
     652:	2d 6a       	ori	r18, 0xAD	; 173
     654:	d3 a1       	ldd	r29, Z+35	; 0x23
     656:	21 a7       	std	Z+41, r18	; 0x29
     658:	02 bb       	out	0x12, r16	; 18
     65a:	0d d6       	rcall	.+3098   	; 0x1276 <__vector_20+0x8>
     65c:	f8 89       	ldd	r31, Y+16	; 0x10
     65e:	51 16       	cp	r5, r17
     660:	65 51       	subi	r22, 0x15	; 21
     662:	12 25       	eor	r17, r2
     664:	51 4e       	sbci	r21, 0xE1	; 225
     666:	bc 0d       	add	r27, r12
     668:	d6 78       	andi	r29, 0x86	; 134
     66a:	42 b5       	in	r20, 0x22	; 34
     66c:	38 85       	ldd	r19, Y+8	; 0x08
     66e:	5a 12       	cpse	r5, r26
     670:	0d 69       	ori	r16, 0x9D	; 157
     672:	0c bd       	out	0x2c, r16	; 44
     674:	0d d6       	rcall	.+3098   	; 0x1290 <uart_init+0x4>
     676:	78 42       	sbci	r23, 0x28	; 40
     678:	b5 b8       	out	0x05, r11	; 5
     67a:	84 49       	sbci	r24, 0x94	; 148
     67c:	1a 86       	std	Y+10, r1	; 0x0a
     67e:	33 00       	.word	0x0033	; ????
     680:	be 0e       	add	r11, r30
     682:	d6 38       	cpi	r29, 0x86	; 134
     684:	e4 30       	cpi	r30, 0x04	; 4
     686:	ce a4       	ldd	r12, Y+46	; 0x2e
     688:	50 4b       	sbci	r21, 0xB0	; 176
     68a:	a2 21       	and	r26, r2
     68c:	cd 01       	movw	r24, r26
     68e:	bf 0b       	sbc	r27, r31
     690:	d6 f8       	bld	r13, 6
     692:	91 1c       	adc	r9, r1
     694:	4c c3       	rjmp	.+1688   	; 0xd2e <convert_to_timestamp+0x48>
     696:	5a b4       	in	r5, 0x2a	; 42
     698:	13 c0       	rjmp	.+38     	; 0x6c0 <__EEPROM_REGION_LENGTH__+0x2c0>
     69a:	0f d6       	rcall	.+3102   	; 0x12ba <uart_init+0x2e>
     69c:	78 e2       	ldi	r23, 0x28	; 40
     69e:	70 ca       	rjmp	.-2848   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     6a0:	92 2c       	mov	r9, r2
     6a2:	19 94       	eijmp
     6a4:	2c c9       	rjmp	.-3496   	; 0xfffff8fe <__eeprom_end+0xff7ef8fe>
     6a6:	72 18       	sub	r7, r2
     6a8:	c1 0f       	add	r28, r17
     6aa:	d6 f8       	bld	r13, 6
     6ac:	c2 70       	andi	r28, 0x02	; 2
     6ae:	ca 92       	st	-Y, r12
     6b0:	2c 19       	sub	r18, r12
     6b2:	94 2c       	mov	r9, r4
     6b4:	c9 72       	andi	r28, 0x29	; 41
     6b6:	18 c2       	rjmp	.+1072   	; 0xae8 <get_mVolt+0x22>
     6b8:	10 d6       	rcall	.+3104   	; 0x12da <uart_init+0x4e>
     6ba:	b8 c2       	rjmp	.+1392   	; 0xc2c <rtc_int_enable+0x28>
     6bc:	24 9b       	sbis	0x04, 4	; 4
     6be:	b2 24       	eor	r11, r2
     6c0:	4b 06       	cpc	r4, r27
     6c2:	25 4b       	sbci	r18, 0xB5	; 181
     6c4:	b2 1c       	adc	r11, r2
     6c6:	06 c3       	rjmp	.+1548   	; 0xcd4 <rtc_sync+0x74>
     6c8:	11 d6       	rcall	.+3106   	; 0x12ec <uart_init+0x60>
     6ca:	78 a2       	std	Y+32, r7	; 0x20
     6cc:	24 d1       	rcall	.+584    	; 0x916 <__stack+0x17>
     6ce:	a6 2c       	mov	r10, r6
     6d0:	c9 92       	st	Y+, r12
     6d2:	41 c9       	rjmp	.-3454   	; 0xfffff956 <__eeprom_end+0xff7ef956>
     6d4:	92 2c       	mov	r9, r2
     6d6:	87 01       	movw	r16, r14
     6d8:	c4 10       	cpse	r12, r4
     6da:	d6 78       	andi	r29, 0x86	; 134
     6dc:	ea d0       	rcall	.+468    	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
     6de:	94 25       	eor	r25, r4
     6e0:	59 32       	cpi	r21, 0x29	; 41
     6e2:	28 59       	subi	r18, 0x98	; 152
     6e4:	92 e5       	ldi	r25, 0x52	; 82
     6e6:	30 00       	.word	0x0030	; ????
     6e8:	c5 10       	cpse	r12, r5
     6ea:	d6 b8       	out	0x06, r13	; 6
     6ec:	c2 24       	eor	r12, r2
     6ee:	9b b2       	in	r9, 0x1b	; 27
     6f0:	24 4b       	sbci	r18, 0xB4	; 180
     6f2:	06 25       	eor	r16, r6
     6f4:	4b b2       	in	r4, 0x1b	; 27
     6f6:	1c 06       	cpc	r1, r28
     6f8:	c6 0e       	add	r12, r22
     6fa:	d6 f8       	bld	r13, 6
     6fc:	91 21       	and	r25, r1
     6fe:	29 35       	cpi	r18, 0x59	; 89
     700:	0d 43       	sbci	r16, 0x3D	; 61
     702:	d4 b4       	in	r13, 0x24	; 36
     704:	a3 00       	.word	0x00a3	; ????
     706:	c7 0b       	sbc	r28, r23
     708:	d6 f8       	bld	r13, 6
     70a:	a7 2c       	mov	r10, r7
     70c:	49 db       	rcall	.-2414   	; 0xfffffda0 <__eeprom_end+0xff7efda0>
     70e:	a2 b1       	in	r26, 0x02	; 2
     710:	08 c8       	rjmp	.-4080   	; 0xfffff722 <__eeprom_end+0xff7ef722>
     712:	0e d6       	rcall	.+3100   	; 0x1330 <__vector_1+0x12>
     714:	78 c2       	rjmp	.+1264   	; 0xc06 <rtc_int_enable+0x2>
     716:	41 49       	sbci	r20, 0x91	; 145
     718:	d3 21       	and	r29, r3
     71a:	4a d3       	rcall	.+1684   	; 0xdb0 <convert_to_timestamp+0xca>
     71c:	41 87       	std	Z+9, r20	; 0x09
     71e:	01 c9       	rjmp	.-3582   	; 0xfffff922 <__eeprom_end+0xff7ef922>
     720:	0e d6       	rcall	.+3100   	; 0x133e <main+0x2>
     722:	f8 a2       	std	Y+32, r15	; 0x20
     724:	41 49       	sbci	r20, 0x91	; 145
     726:	d3 21       	and	r29, r3
     728:	4a d3       	rcall	.+1684   	; 0xdbe <convert_to_timestamp+0xd8>
     72a:	41 87       	std	Z+9, r20	; 0x09
     72c:	01 ca       	rjmp	.-3070   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     72e:	0e d6       	rcall	.+3100   	; 0x134c <main+0x10>
     730:	b8 b2       	in	r11, 0x18	; 24
     732:	41 49       	sbci	r20, 0x91	; 145
     734:	d3 21       	and	r29, r3
     736:	4a d3       	rcall	.+1684   	; 0xdcc <convert_to_timestamp+0xe6>
     738:	41 87       	std	Z+9, r20	; 0x09
     73a:	01 cb       	rjmp	.-2558   	; 0xfffffd3e <__eeprom_end+0xff7efd3e>
     73c:	0e d6       	rcall	.+3100   	; 0x135a <main+0x1e>
     73e:	78 4a       	sbci	r23, 0xA8	; 168
     740:	83 92       	.word	0x9283	; ????
     742:	a6 43       	sbci	r26, 0x36	; 54
     744:	94 a6       	std	Z+44, r9	; 0x2c
     746:	83 0e       	add	r8, r19
     748:	03 cc       	rjmp	.-2042   	; 0xffffff50 <__eeprom_end+0xff7eff50>
     74a:	0a d6       	rcall	.+3092   	; 0x1360 <main+0x24>
     74c:	78 e2       	ldi	r23, 0x28	; 40
     74e:	70 4c       	sbci	r23, 0xC0	; 192
     750:	1b 77       	andi	r17, 0x7B	; 123
     752:	02 cd       	rjmp	.-1532   	; 0x158 <__trampolines_end+0xa4>
     754:	0a d6       	rcall	.+3092   	; 0x136a <main+0x2e>
     756:	f8 c2       	rjmp	.+1520   	; 0xd48 <convert_to_timestamp+0x62>
     758:	70 4c       	sbci	r23, 0xC0	; 192
     75a:	1b 77       	andi	r17, 0x7B	; 123
     75c:	02 ce       	rjmp	.-1020   	; 0x362 <__trampolines_end+0x2ae>
     75e:	0b d6       	rcall	.+3094   	; 0x1376 <main+0x3a>
     760:	b8 c2       	rjmp	.+1392   	; 0xcd2 <rtc_sync+0x72>
     762:	24 1b       	sub	r18, r20
     764:	d3 c6       	rjmp	.+3494   	; 0x150c <main+0x1d0>
     766:	9d 00       	.word	0x009d	; ????
     768:	cf 0a       	sbc	r12, r31
     76a:	d6 78       	andi	r29, 0x86	; 134
     76c:	ea d0       	rcall	.+468    	; 0x942 <__stack+0x43>
     76e:	98 36       	cpi	r25, 0x68	; 104
     770:	ee 04       	cpc	r14, r14
     772:	d0 0c       	add	r13, r0
     774:	d6 b8       	out	0x06, r13	; 6
     776:	87 2c       	mov	r8, r7
     778:	6a 59       	subi	r22, 0x9A	; 154
     77a:	a2 2e       	mov	r10, r18
     77c:	43 4e       	sbci	r20, 0xE3	; 227
     77e:	d1 11       	cpse	r29, r1
     780:	d6 b8       	out	0x06, r13	; 6
     782:	92 28       	or	r9, r2
     784:	89 b2       	in	r8, 0x19	; 25
     786:	44 4a       	sbci	r20, 0xA4	; 164
     788:	3a 29       	or	r19, r10
     78a:	59 92       	st	Y+, r5
     78c:	e5 30       	cpi	r30, 0x05	; 5
     78e:	00 d2       	rcall	.+1024   	; 0xb90 <gpio_set_pin_direction+0x10>
     790:	0e d6       	rcall	.+3100   	; 0x13ae <main+0x72>
     792:	78 e2       	ldi	r23, 0x28	; 40
     794:	70 ca       	rjmp	.-2848   	; 0xfffffc76 <__eeprom_end+0xff7efc76>
     796:	92 2c       	mov	r9, r2
     798:	c9 92       	st	Y+, r12
     79a:	2c da       	rcall	.-2984   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
     79c:	09 d3       	rcall	.+1554   	; 0xdb0 <convert_to_timestamp+0xca>
     79e:	0e d6       	rcall	.+3100   	; 0x13bc <main+0x80>
     7a0:	f8 c2       	rjmp	.+1520   	; 0xd92 <convert_to_timestamp+0xac>
     7a2:	70 ca       	rjmp	.-2848   	; 0xfffffc84 <__eeprom_end+0xff7efc84>
     7a4:	92 2c       	mov	r9, r2
     7a6:	c9 92       	st	Y+, r12
     7a8:	2c da       	rcall	.-2984   	; 0xfffffc02 <__eeprom_end+0xff7efc02>
     7aa:	09 d4       	rcall	.+2066   	; 0xfbe <twi_read+0x46>
     7ac:	0f d6       	rcall	.+3102   	; 0x13cc <main+0x90>
     7ae:	b8 c2       	rjmp	.+1392   	; 0xd20 <convert_to_timestamp+0x3a>
     7b0:	24 9b       	sbis	0x04, 4	; 4
     7b2:	b2 24       	eor	r11, r2
     7b4:	4b b2       	in	r4, 0x1b	; 27
     7b6:	24 8b       	std	Z+20, r18	; 0x14
     7b8:	76 02       	muls	r23, r22
     7ba:	d5 10       	cpse	r13, r5
     7bc:	d6 b8       	out	0x06, r13	; 6
     7be:	92 28       	or	r9, r2
     7c0:	c9 a6       	std	Y+41, r12	; 0x29
     7c2:	2c c9       	rjmp	.-3496   	; 0xfffffa1c <__eeprom_end+0xff7efa1c>
     7c4:	92 2c       	mov	r9, r2
     7c6:	c9 a2       	std	Y+33, r12	; 0x21
     7c8:	9d 00       	.word	0x009d	; ????
     7ca:	d6 0e       	add	r13, r22
     7cc:	d6 78       	andi	r29, 0x86	; 134
     7ce:	ea d0       	rcall	.+468    	; 0x9a4 <__stack+0xa5>
     7d0:	94 25       	eor	r25, r4
     7d2:	59 92       	st	Y+, r5
     7d4:	25 59       	subi	r18, 0x95	; 149
     7d6:	b4 13       	cpse	r27, r20
     7d8:	d7 0d       	add	r29, r7
     7da:	d6 f8       	bld	r13, 6
     7dc:	89 59       	subi	r24, 0x99	; 153
     7de:	94 84       	ldd	r9, Z+12	; 0x0c
     7e0:	95 28       	or	r9, r5
     7e2:	cb 61       	ori	r28, 0x1B	; 27
     7e4:	00 d8       	rcall	.-4096   	; 0xfffff7e6 <__eeprom_end+0xff7ef7e6>
     7e6:	0e d6       	rcall	.+3100   	; 0x1404 <main+0xc8>
     7e8:	f8 a7       	std	Y+40, r31	; 0x28
     7ea:	48 89       	ldd	r20, Y+16	; 0x10
     7ec:	94 16       	cp	r9, r20
     7ee:	29 91       	ld	r18, Y+
     7f0:	a2 9d       	mul	r26, r2
     7f2:	00 d9       	rcall	.-3584   	; 0xfffff9f4 <__eeprom_end+0xff7ef9f4>
     7f4:	0e d6       	rcall	.+3100   	; 0x1412 <main+0xd6>
     7f6:	78 e2       	ldi	r23, 0x28	; 40
     7f8:	ac 92       	st	X, r10
     7fa:	25 59       	subi	r18, 0x95	; 149
     7fc:	92 25       	eor	r25, r2
     7fe:	59 b4       	in	r5, 0x29	; 41
     800:	13 da       	rcall	.-3034   	; 0xfffffc28 <__eeprom_end+0xff7efc28>
     802:	0e d6       	rcall	.+3100   	; 0x1420 <main+0xe4>
     804:	f8 c2       	rjmp	.+1520   	; 0xdf6 <convert_to_timestamp+0x110>
     806:	ac 92       	st	X, r10
     808:	25 59       	subi	r18, 0x95	; 149
     80a:	92 25       	eor	r25, r2
     80c:	59 b4       	in	r5, 0x29	; 41
     80e:	13 db       	rcall	.-2522   	; 0xfffffe36 <__eeprom_end+0xff7efe36>
     810:	0f d6       	rcall	.+3102   	; 0x1430 <main+0xf4>
     812:	b8 c2       	rjmp	.+1392   	; 0xd84 <convert_to_timestamp+0x9e>
     814:	24 47       	sbci	r18, 0x74	; 116
     816:	b2 24       	eor	r11, r2
     818:	4b b2       	in	r4, 0x1b	; 27
     81a:	24 8b       	std	Z+20, r18	; 0x14
     81c:	76 02       	muls	r23, r22
     81e:	dc 0f       	add	r29, r28
     820:	d6 78       	andi	r29, 0x86	; 134
     822:	ea 48       	sbci	r30, 0x8A	; 138
     824:	96 64       	ori	r25, 0x46	; 70
     826:	49 96       	adiw	r24, 0x19	; 25
     828:	64 49       	sbci	r22, 0x94	; 148
     82a:	16 ed       	ldi	r17, 0xD6	; 214
     82c:	04 dd       	rcall	.-1528   	; 0x236 <__trampolines_end+0x182>
     82e:	0d d6       	rcall	.+3098   	; 0x144a <main+0x10e>
     830:	f8 c2       	rjmp	.+1520   	; 0xe22 <convert_to_timestamp+0x13c>
     832:	ac 92       	st	X, r10
     834:	45 49       	sbci	r20, 0x95	; 149
     836:	98 d6       	rcall	.+3376   	; 0x1568 <main+0x22c>
     838:	29 00       	.word	0x0029	; ????
     83a:	de 0d       	add	r29, r14
     83c:	d6 b8       	out	0x06, r13	; 6
     83e:	d3 21       	and	r29, r3
     840:	ca 92       	st	-Y, r12
     842:	21 4a       	sbci	r18, 0xA1	; 161
     844:	eb 34       	cpi	r30, 0x4B	; 75
     846:	00 df       	rcall	.-512    	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
     848:	0e d6       	rcall	.+3100   	; 0x1466 <main+0x12a>
     84a:	f8 a7       	std	Y+40, r31	; 0x28
     84c:	2c 89       	ldd	r18, Y+20	; 0x14
     84e:	2a 59       	subi	r18, 0x9A	; 154
     850:	54 4b       	sbci	r21, 0xB4	; 180
     852:	12 9d       	mul	r17, r2
     854:	00 e0       	ldi	r16, 0x00	; 0
     856:	0e d6       	rcall	.+3100   	; 0x1474 <main+0x138>
     858:	78 e2       	ldi	r23, 0x28	; 40
     85a:	1c 9b       	sbis	0x03, 4	; 3
     85c:	a3 21       	and	r26, r3
     85e:	c9 a2       	std	Y+33, r12	; 0x21
     860:	21 87       	std	Z+9, r18	; 0x09
     862:	01 e1       	ldi	r16, 0x11	; 17
     864:	0e d6       	rcall	.+3100   	; 0x1482 <main+0x146>
     866:	f8 c2       	rjmp	.+1520   	; 0xe58 <convert_to_timestamp+0x172>
     868:	1c 9b       	sbis	0x03, 4	; 3
     86a:	a3 21       	and	r26, r3
     86c:	c9 a2       	std	Y+33, r12	; 0x21
     86e:	21 87       	std	Z+9, r18	; 0x09
     870:	01 e2       	ldi	r16, 0x21	; 33
     872:	0f d6       	rcall	.+3102   	; 0x1492 <main+0x156>
     874:	b8 c2       	rjmp	.+1392   	; 0xde6 <convert_to_timestamp+0x100>
     876:	24 87       	std	Z+12, r18	; 0x0c
     878:	e6 68       	ori	r30, 0x86	; 134
     87a:	48 b2       	in	r4, 0x18	; 24
     87c:	68 c8       	rjmp	.-3888   	; 0xfffff94e <__eeprom_end+0xff7ef94e>
     87e:	61 00       	.word	0x0061	; ????
     880:	e3 0f       	add	r30, r19
     882:	d6 b8       	out	0x06, r13	; 6
     884:	92 28       	or	r9, r2
     886:	c9 a1       	ldd	r28, Y+33	; 0x21
     888:	39 1a       	sub	r3, r25
     88a:	92 2c       	mov	r9, r2
     88c:	1a 72       	andi	r17, 0x2A	; 42
     88e:	18 e4       	ldi	r17, 0x48	; 72
     890:	0e d6       	rcall	.+3100   	; 0x14ae <main+0x172>
     892:	f8 93       	.word	0x93f8	; ????
     894:	1c 9a       	sbi	0x03, 4	; 3
     896:	a3 21       	and	r26, r3
     898:	c9 a2       	std	Y+33, r12	; 0x21
     89a:	21 87       	std	Z+9, r18	; 0x09
     89c:	01 e5       	ldi	r16, 0x51	; 81
     89e:	0f d6       	rcall	.+3102   	; 0x14be <main+0x182>
     8a0:	b8 c2       	rjmp	.+1392   	; 0xe12 <convert_to_timestamp+0x12c>
     8a2:	24 0c       	add	r2, r4
     8a4:	e7 68       	ori	r30, 0x87	; 135
     8a6:	48 b2       	in	r4, 0x18	; 24
     8a8:	68 c8       	rjmp	.-3888   	; 0xfffff97a <__eeprom_end+0xff7ef97a>
     8aa:	61 00       	.word	0x0061	; ????
     8ac:	e6 0d       	add	r30, r6
     8ae:	d6 f8       	bld	r13, 6
     8b0:	a9 43       	sbci	r26, 0x39	; 57
     8b2:	98 24       	eor	r9, r8
     8b4:	c3 94       	inc	r12
     8b6:	0d 3a       	cpi	r16, 0xAD	; 173
     8b8:	0a e7       	ldi	r16, 0x7A	; 122
     8ba:	0c d6       	rcall	.+3096   	; 0x14d4 <main+0x198>
     8bc:	f8 a9       	ldd	r31, Y+48	; 0x30
     8be:	53 96       	adiw	r26, 0x13	; 19
     8c0:	a4 59       	subi	r26, 0x94	; 148
     8c2:	34 16       	cp	r3, r20
     8c4:	01 e8       	ldi	r16, 0x81	; 129
     8c6:	0d d6       	rcall	.+3098   	; 0x14e2 <main+0x1a6>
     8c8:	78 e2       	ldi	r23, 0x28	; 40
     8ca:	1c 9b       	sbis	0x03, 4	; 3
     8cc:	b2 64       	ori	r27, 0x42	; 66
     8ce:	50 e2       	ldi	r21, 0x20	; 32
     8d0:	9d 00       	.word	0x009d	; ????
     8d2:	e9 0d       	add	r30, r9
     8d4:	d6 f8       	bld	r13, 6
     8d6:	c2 1c       	adc	r12, r2
     8d8:	9b b2       	in	r9, 0x1b	; 27
     8da:	64 50       	subi	r22, 0x04	; 4
     8dc:	e2 9d       	mul	r30, r2
     8de:	00 ea       	ldi	r16, 0xA0	; 160
     8e0:	0d d6       	rcall	.+3098   	; 0x14fc <main+0x1c0>
     8e2:	b8 c2       	rjmp	.+1392   	; 0xe54 <convert_to_timestamp+0x16e>
     8e4:	24 87       	std	Z+12, r18	; 0x0c
     8e6:	a6 2c       	mov	r10, r6
     8e8:	19 94       	eijmp
     8ea:	78 27       	eor	r23, r24
     8ec:	eb 0d       	add	r30, r11
     8ee:	d6 f8       	bld	r13, 6
     8f0:	93 1c       	adc	r9, r3
     8f2:	9a b2       	in	r9, 0x1a	; 26
     8f4:	64 50       	subi	r22, 0x04	; 4
     8f6:	e2 9d       	mul	r30, r2
     8f8:	00 ec       	ldi	r16, 0xC0	; 192
     8fa:	0a d6       	rcall	.+3092   	; 0x1510 <main+0x1d4>
     8fc:	78 e2       	ldi	r23, 0x28	; 40
     8fe:	1c 53       	subi	r17, 0x3C	; 60
     900:	1b 77       	andi	r17, 0x7B	; 123
     902:	02 ed       	ldi	r16, 0xD2	; 210
     904:	0a d6       	rcall	.+3092   	; 0x151a <main+0x1de>
     906:	b8 c2       	rjmp	.+1392   	; 0xe78 <__vector_39+0x6>
     908:	1c 54       	subi	r17, 0x4C	; 76
     90a:	1b 77       	andi	r17, 0x7B	; 123
     90c:	02 ee       	ldi	r16, 0xE2	; 226
     90e:	0b d6       	rcall	.+3094   	; 0x1526 <main+0x1ea>
     910:	b8 c2       	rjmp	.+1392   	; 0xe82 <__vector_39+0x10>
     912:	24 87       	std	Z+12, r18	; 0x0c
     914:	d4 c6       	rjmp	.+3496   	; 0x16be <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x14>
     916:	9d 00       	.word	0x009d	; ????
     918:	ef 0a       	sbc	r14, r31
     91a:	d6 f8       	bld	r13, 6
     91c:	93 1c       	adc	r9, r3
     91e:	52 1b       	sub	r21, r18
     920:	77 02       	muls	r23, r23
     922:	f0 0c       	add	r15, r0
     924:	d6 b8       	out	0x06, r13	; 6
     926:	6d 53       	subi	r22, 0x3D	; 61
     928:	96 64       	ori	r25, 0x46	; 70
     92a:	49 16       	cp	r4, r25
     92c:	ed 04       	cpc	r14, r13
     92e:	f1 11       	cpse	r31, r1
     930:	d6 b8       	out	0x06, r13	; 6
     932:	92 28       	or	r9, r2
     934:	c9 91       	ld	r28, Y+	; undefined
     936:	44 92       	xch	Z, r4
     938:	92 2c       	mov	r9, r2
     93a:	c9 92       	st	Y+, r12
     93c:	2c 87       	std	Y+12, r18	; 0x0c
     93e:	01 f2       	breq	.-128    	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
     940:	0d d6       	rcall	.+3098   	; 0x155c <main+0x220>
     942:	78 e2       	ldi	r23, 0x28	; 40
     944:	1c 9b       	sbis	0x03, 4	; 3
     946:	b2 24       	eor	r11, r2
     948:	4b b2       	in	r4, 0x1b	; 27
     94a:	68 27       	eor	r22, r24
     94c:	f3 0d       	add	r31, r3
     94e:	d6 f8       	bld	r13, 6
     950:	c2 1c       	adc	r12, r2
     952:	9b b2       	in	r9, 0x1b	; 27
     954:	24 4b       	sbci	r18, 0xB4	; 180
     956:	b2 68       	ori	r27, 0x82	; 130
     958:	27 f4       	brid	.+8      	; 0x962 <__stack+0x63>
     95a:	0e d6       	rcall	.+3100   	; 0x1578 <main+0x23c>
     95c:	b8 c2       	rjmp	.+1392   	; 0xece <spi1_init+0x2e>
     95e:	24 87       	std	Z+12, r18	; 0x0c
     960:	a6 2c       	mov	r10, r6
     962:	c9 92       	st	Y+, r12
     964:	2c da       	rcall	.-2984   	; 0xfffffdbe <__eeprom_end+0xff7efdbe>
     966:	09 f5       	brne	.+66     	; 0x9aa <__stack+0xab>
     968:	0f d6       	rcall	.+3102   	; 0x1588 <main+0x24c>
     96a:	b8 92       	.word	0x92b8	; ????
     96c:	28 c9       	rjmp	.-3504   	; 0xfffffbbe <__eeprom_end+0xff7efbbe>
     96e:	a1 29       	or	r26, r1
     970:	4b b2       	in	r4, 0x1b	; 27
     972:	24 8b       	std	Z+20, r18	; 0x14
     974:	76 02       	muls	r23, r22
     976:	f6 0d       	add	r31, r6
     978:	d6 f8       	bld	r13, 6
     97a:	93 1c       	adc	r9, r3
     97c:	9a b2       	in	r9, 0x1a	; 26
     97e:	24 4b       	sbci	r18, 0xB4	; 180
     980:	b2 68       	ori	r27, 0x82	; 130
     982:	27 f7       	brid	.-56     	; 0x94c <__stack+0x4d>
     984:	0a d6       	rcall	.+3092   	; 0x159a <main+0x25e>
     986:	f8 f1       	brcs	.+126    	; 0xa06 <__stack+0x107>
     988:	1c 1a       	sub	r1, r28
     98a:	74 28       	or	r7, r4
     98c:	67 f8       	bld	r6, 7
     98e:	0d d6       	rcall	.+3098   	; 0x15aa <main+0x26e>
     990:	f8 a9       	ldd	r31, Y+48	; 0x30
     992:	43 12       	cpse	r4, r19
     994:	29 2d       	mov	r18, r9
     996:	52 32       	cpi	r21, 0x22	; 34
     998:	e4 04       	cpc	r14, r4
     99a:	f9 0f       	add	r31, r25
     99c:	d6 78       	andi	r29, 0x86	; 134
     99e:	e2 1c       	adc	r14, r2
     9a0:	ca 92       	st	-Y, r12
     9a2:	2c c9       	rjmp	.-3496   	; 0xfffffbfc <__eeprom_end+0xff7efbfc>
     9a4:	92 c8       	rjmp	.-3804   	; 0xfffffaca <__eeprom_end+0xff7efaca>
     9a6:	92 c3       	rjmp	.+1828   	; 0x10cc <twi_write+0x14>
     9a8:	00 fa       	bst	r0, 0
     9aa:	0f d6       	rcall	.+3102   	; 0x15ca <u8g2_send_buffer+0x6>
     9ac:	f8 c2       	rjmp	.+1520   	; 0xf9e <twi_read+0x26>
     9ae:	1c ca       	rjmp	.-3016   	; 0xfffffde8 <__eeprom_end+0xff7efde8>
     9b0:	92 2c       	mov	r9, r2
     9b2:	c9 92       	st	Y+, r12
     9b4:	c8 92       	.word	0x92c8	; ????
     9b6:	c3 00       	.word	0x00c3	; ????
     9b8:	fb 10       	cpse	r15, r11
     9ba:	d6 b8       	out	0x06, r13	; 6
     9bc:	c2 24       	eor	r12, r2
     9be:	47 b2       	in	r4, 0x17	; 23
     9c0:	24 4b       	sbci	r18, 0xB4	; 180
     9c2:	b2 24       	eor	r11, r2
     9c4:	b2 e4       	ldi	r27, 0x42	; 66
     9c6:	30 00       	.word	0x0030	; ????
     9c8:	fc 0f       	add	r31, r28
     9ca:	d6 f8       	bld	r13, 6
     9cc:	93 1c       	adc	r9, r3
     9ce:	c9 92       	st	Y+, r12
     9d0:	2c c9       	rjmp	.-3496   	; 0xfffffc2a <__eeprom_end+0xff7efc2a>
     9d2:	92 c8       	rjmp	.-3804   	; 0xfffffaf8 <__eeprom_end+0xff7efaf8>
     9d4:	92 c3       	rjmp	.+1828   	; 0x10fa <twi_write+0x42>
     9d6:	00 fd       	sbrc	r16, 0
     9d8:	0f d6       	rcall	.+3102   	; 0x15f8 <u8g2_send_buffer+0x34>
     9da:	f8 a1       	ldd	r31, Y+32	; 0x20
     9dc:	30 ab       	std	Z+48, r19	; 0x30
     9de:	64 49       	sbci	r22, 0x94	; 148
     9e0:	64 49       	sbci	r22, 0x94	; 148
     9e2:	93 2c       	mov	r9, r3
     9e4:	9a 00       	.word	0x009a	; ????
     9e6:	fe 0f       	add	r31, r30
     9e8:	d6 f8       	bld	r13, 6
     9ea:	d1 74       	andi	r29, 0x41	; 65
     9ec:	88 b2       	in	r8, 0x18	; 24
     9ee:	24 4b       	sbci	r18, 0xB4	; 180
     9f0:	b2 64       	ori	r27, 0x42	; 66
     9f2:	88 d2       	rcall	.+1296   	; 0xf04 <twi_start+0xe>
     9f4:	14 ff       	sbrs	r17, 4
     9f6:	10 d6       	rcall	.+3104   	; 0x1618 <u8g2_send_buffer+0x54>
     9f8:	f8 93       	.word	0x93f8	; ????
     9fa:	1c c9       	rjmp	.-3528   	; 0xfffffc34 <__eeprom_end+0xff7efc34>
     9fc:	92 2c       	mov	r9, r2
     9fe:	89 2c       	mov	r8, r9
     a00:	69 92       	st	Y+, r6
     a02:	45 13       	cpse	r20, r21
     a04:	00 00       	nop
     a06:	00 00       	nop
     a08:	04 ff       	sbrs	r16, 4
     a0a:	ff 00       	.word	0x00ff	; ????
	...

00000a0e <__ctors_end>:
     a0e:	11 24       	eor	r1, r1
     a10:	1f be       	out	0x3f, r1	; 63
     a12:	cf ef       	ldi	r28, 0xFF	; 255
     a14:	d8 e0       	ldi	r29, 0x08	; 8
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	cd bf       	out	0x3d, r28	; 61

00000a1a <__do_copy_data>:
     a1a:	12 e0       	ldi	r17, 0x02	; 2
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b1 e0       	ldi	r27, 0x01	; 1
     a20:	ec e3       	ldi	r30, 0x3C	; 60
     a22:	f3 e3       	ldi	r31, 0x33	; 51
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <__do_copy_data+0x10>
     a26:	05 90       	lpm	r0, Z+
     a28:	0d 92       	st	X+, r0
     a2a:	a8 38       	cpi	r26, 0x88	; 136
     a2c:	b1 07       	cpc	r27, r17
     a2e:	d9 f7       	brne	.-10     	; 0xa26 <__do_copy_data+0xc>

00000a30 <__do_clear_bss>:
     a30:	25 e0       	ldi	r18, 0x05	; 5
     a32:	a8 e8       	ldi	r26, 0x88	; 136
     a34:	b2 e0       	ldi	r27, 0x02	; 2
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <.do_clear_bss_start>

00000a38 <.do_clear_bss_loop>:
     a38:	1d 92       	st	X+, r1

00000a3a <.do_clear_bss_start>:
     a3a:	ae 3e       	cpi	r26, 0xEE	; 238
     a3c:	b2 07       	cpc	r27, r18
     a3e:	e1 f7       	brne	.-8      	; 0xa38 <.do_clear_bss_loop>
     a40:	0e 94 9e 09 	call	0x133c	; 0x133c <main>
     a44:	0c 94 9c 19 	jmp	0x3338	; 0x3338 <_exit>

00000a48 <__bad_interrupt>:
     a48:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a4c <__vector_21>:

uint16_t get_adc(uint8_t source){
	adc_pin_select(source);
	//uint16_t adc_tmp_data = adc_convert();
	return adc_convert();
}
     a4c:	1f 92       	push	r1
     a4e:	0f 92       	push	r0
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	0f 92       	push	r0
     a54:	11 24       	eor	r1, r1
     a56:	8f 93       	push	r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     a5e:	8f 91       	pop	r24
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	0f 90       	pop	r0
     a66:	1f 90       	pop	r1
     a68:	18 95       	reti

00000a6a <adc_init>:
     a6a:	ec e7       	ldi	r30, 0x7C	; 124
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	80 6c       	ori	r24, 0xC0	; 192
     a72:	80 83       	st	Z, r24
     a74:	ea e7       	ldi	r30, 0x7A	; 122
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	8f 68       	ori	r24, 0x8F	; 143
     a7c:	80 83       	st	Z, r24
     a7e:	08 95       	ret

00000a80 <adc_pin_select>:
     a80:	ec e7       	ldi	r30, 0x7C	; 124
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	90 81       	ld	r25, Z
     a86:	90 7f       	andi	r25, 0xF0	; 240
     a88:	90 83       	st	Z, r25
     a8a:	90 81       	ld	r25, Z
     a8c:	89 2b       	or	r24, r25
     a8e:	80 83       	st	Z, r24
     a90:	08 95       	ret

00000a92 <adc_convert>:
     a92:	ea e7       	ldi	r30, 0x7A	; 122
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	80 81       	ld	r24, Z
     a98:	80 68       	ori	r24, 0x80	; 128
     a9a:	80 83       	st	Z, r24
     a9c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     aa0:	80 81       	ld	r24, Z
     aa2:	80 64       	ori	r24, 0x40	; 64
     aa4:	80 83       	st	Z, r24
     aa6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     aaa:	88 23       	and	r24, r24
     aac:	e1 f3       	breq	.-8      	; 0xaa6 <adc_convert+0x14>
     aae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     ab2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     ab6:	ea e7       	ldi	r30, 0x7A	; 122
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	90 81       	ld	r25, Z
     abc:	9f 77       	andi	r25, 0x7F	; 127
     abe:	90 83       	st	Z, r25
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	92 2b       	or	r25, r18
     ac4:	08 95       	ret

00000ac6 <get_mVolt>:

uint16_t get_mVolt(uint8_t source){
	adc_pin_select(source);
     ac6:	0e 94 40 05 	call	0xa80	; 0xa80 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_VOLT(adc_convert());
     aca:	0e 94 49 05 	call	0xa92	; 0xa92 <adc_convert>
     ace:	bc 01       	movw	r22, r24
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 44 15 	call	0x2a88	; 0x2a88 <__floatunsisf>
     ad8:	2d ec       	ldi	r18, 0xCD	; 205
     ada:	3e e1       	ldi	r19, 0x1E	; 30
     adc:	48 e9       	ldi	r20, 0x98	; 152
     ade:	5f e3       	ldi	r21, 0x3F	; 63
     ae0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <__mulsf3>
     ae4:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__fixunssfsi>
}
     ae8:	cb 01       	movw	r24, r22
     aea:	08 95       	ret

00000aec <lcd_gpio_init>:
		break;
		default:
		return 0;
	}
	return 1;
}
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 c0 05 	call	0xb80	; 0xb80 <gpio_set_pin_direction>
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	87 e0       	ldi	r24, 0x07	; 7
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 c0 05 	call	0xb80	; 0xb80 <gpio_set_pin_direction>
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	84 e0       	ldi	r24, 0x04	; 4
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 c0 05 	call	0xb80	; 0xb80 <gpio_set_pin_direction>
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	0e 94 97 05 	call	0xb2e	; 0xb2e <gpio_set_pin_level>
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	87 e0       	ldi	r24, 0x07	; 7
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 97 05 	call	0xb2e	; 0xb2e <gpio_set_pin_level>
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	84 e0       	ldi	r24, 0x04	; 4
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	0e 94 97 05 	call	0xb2e	; 0xb2e <gpio_set_pin_level>
     b28:	08 95       	ret

00000b2a <fake_delay_fn>:
	gpio_set_pin_level(&lcd_cs_pin, value);
}

uint8_t fake_delay_fn(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr){
	return 0;
}
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	08 95       	ret

00000b2e <gpio_set_pin_level>:
*/


void gpio_set_pin_level(gpio *GPIOx , const bool level)
{
	if (level) {
     b2e:	66 23       	and	r22, r22
     b30:	99 f0       	breq	.+38     	; 0xb58 <gpio_set_pin_level+0x2a>
		*GPIOx->port |= 1 << GPIOx->pin;
     b32:	dc 01       	movw	r26, r24
     b34:	ed 91       	ld	r30, X+
     b36:	fc 91       	ld	r31, X
     b38:	11 97       	sbiw	r26, 0x01	; 1
     b3a:	21 e0       	ldi	r18, 0x01	; 1
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	a9 01       	movw	r20, r18
     b40:	12 96       	adiw	r26, 0x02	; 2
     b42:	0c 90       	ld	r0, X
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <gpio_set_pin_level+0x1c>
     b46:	44 0f       	add	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	0a 94       	dec	r0
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <gpio_set_pin_level+0x18>
     b4e:	ca 01       	movw	r24, r20
     b50:	90 81       	ld	r25, Z
     b52:	89 2b       	or	r24, r25
     b54:	80 83       	st	Z, r24
     b56:	08 95       	ret
		} else {
		*GPIOx->port &= ~(1 << GPIOx->pin);
     b58:	dc 01       	movw	r26, r24
     b5a:	ed 91       	ld	r30, X+
     b5c:	fc 91       	ld	r31, X
     b5e:	11 97       	sbiw	r26, 0x01	; 1
     b60:	21 e0       	ldi	r18, 0x01	; 1
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	a9 01       	movw	r20, r18
     b66:	12 96       	adiw	r26, 0x02	; 2
     b68:	0c 90       	ld	r0, X
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <gpio_set_pin_level+0x42>
     b6c:	44 0f       	add	r20, r20
     b6e:	55 1f       	adc	r21, r21
     b70:	0a 94       	dec	r0
     b72:	e2 f7       	brpl	.-8      	; 0xb6c <gpio_set_pin_level+0x3e>
     b74:	ca 01       	movw	r24, r20
     b76:	80 95       	com	r24
     b78:	90 81       	ld	r25, Z
     b7a:	89 23       	and	r24, r25
     b7c:	80 83       	st	Z, r24
     b7e:	08 95       	ret

00000b80 <gpio_set_pin_direction>:
	}
}

void gpio_set_pin_direction(gpio *GPIOx, const enum port_dir direction)
{
     b80:	fc 01       	movw	r30, r24
	uint8_t *tmp_port = GPIOx->port-1;
     b82:	90 81       	ld	r25, Z
     b84:	81 81       	ldd	r24, Z+1	; 0x01
	switch (direction) {
     b86:	61 30       	cpi	r22, 0x01	; 1
     b88:	99 f0       	breq	.+38     	; 0xbb0 <gpio_set_pin_direction+0x30>
     b8a:	18 f0       	brcs	.+6      	; 0xb92 <gpio_set_pin_direction+0x12>
     b8c:	62 30       	cpi	r22, 0x02	; 2
     b8e:	f1 f0       	breq	.+60     	; 0xbcc <gpio_set_pin_direction+0x4c>
     b90:	08 95       	ret
		case PORT_DIR_IN:
		*tmp_port &= ~(1 << GPIOx->pin);
     b92:	a9 2f       	mov	r26, r25
     b94:	b8 2f       	mov	r27, r24
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 80       	ldd	r0, Z+2	; 0x02
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <gpio_set_pin_direction+0x22>
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	0a 94       	dec	r0
     ba4:	e2 f7       	brpl	.-8      	; 0xb9e <gpio_set_pin_direction+0x1e>
     ba6:	80 95       	com	r24
     ba8:	9e 91       	ld	r25, -X
     baa:	89 23       	and	r24, r25
     bac:	8c 93       	st	X, r24
		break;
     bae:	08 95       	ret
		case PORT_DIR_OUT:
		*tmp_port |= 1 << GPIOx->pin;
     bb0:	a9 2f       	mov	r26, r25
     bb2:	b8 2f       	mov	r27, r24
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	02 80       	ldd	r0, Z+2	; 0x02
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <gpio_set_pin_direction+0x40>
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	0a 94       	dec	r0
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <gpio_set_pin_direction+0x3c>
     bc4:	9e 91       	ld	r25, -X
     bc6:	89 2b       	or	r24, r25
     bc8:	8c 93       	st	X, r24
		break;
     bca:	08 95       	ret
		case PORT_DIR_OFF:
		*tmp_port &= ~(1 << GPIOx->pin);
     bcc:	a9 2f       	mov	r26, r25
     bce:	b8 2f       	mov	r27, r24
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	9c 01       	movw	r18, r24
     bd6:	02 80       	ldd	r0, Z+2	; 0x02
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <gpio_set_pin_direction+0x5e>
     bda:	22 0f       	add	r18, r18
     bdc:	33 1f       	adc	r19, r19
     bde:	0a 94       	dec	r0
     be0:	e2 f7       	brpl	.-8      	; 0xbda <gpio_set_pin_direction+0x5a>
     be2:	20 95       	com	r18
     be4:	3e 91       	ld	r19, -X
     be6:	23 23       	and	r18, r19
     be8:	2c 93       	st	X, r18
		*GPIOx->port &= ~(1 << GPIOx->pin);
     bea:	a0 81       	ld	r26, Z
     bec:	b1 81       	ldd	r27, Z+1	; 0x01
     bee:	02 80       	ldd	r0, Z+2	; 0x02
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <gpio_set_pin_direction+0x76>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <gpio_set_pin_direction+0x72>
     bfa:	80 95       	com	r24
     bfc:	9c 91       	ld	r25, X
     bfe:	89 23       	and	r24, r25
     c00:	8c 93       	st	X, r24
     c02:	08 95       	ret

00000c04 <rtc_int_enable>:
	rtc_raw[3]=RTCx->dayofweek;
	rtc_raw[4]=DECtoBCD(RTCx->date);
	rtc_raw[5]=DECtoBCD(RTCx->month);
	rtc_raw[6]=DECtoBCD(RTCx->year);
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
}
     c04:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <__data_end>
     c08:	80 61       	ori	r24, 0x10	; 16
     c0a:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__data_end>
     c0e:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <rtc_config_2>
     c12:	81 61       	ori	r24, 0x11	; 17
     c14:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <rtc_config_2>
     c18:	22 e0       	ldi	r18, 0x02	; 2
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	4a e0       	ldi	r20, 0x0A	; 10
     c1e:	51 e0       	ldi	r21, 0x01	; 1
     c20:	6b e0       	ldi	r22, 0x0B	; 11
     c22:	82 e3       	ldi	r24, 0x32	; 50
     c24:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <twi_write>
     c28:	21 e0       	ldi	r18, 0x01	; 1
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	49 e8       	ldi	r20, 0x89	; 137
     c2e:	52 e0       	ldi	r21, 0x02	; 2
     c30:	6d e0       	ldi	r22, 0x0D	; 13
     c32:	82 e3       	ldi	r24, 0x32	; 50
     c34:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <twi_write>
     c38:	21 e0       	ldi	r18, 0x01	; 1
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	48 e8       	ldi	r20, 0x88	; 136
     c3e:	52 e0       	ldi	r21, 0x02	; 2
     c40:	6f e0       	ldi	r22, 0x0F	; 15
     c42:	82 e3       	ldi	r24, 0x32	; 50
     c44:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <twi_write>
     c48:	08 95       	ret

00000c4a <BCDtoDEC>:
     c4a:	98 2f       	mov	r25, r24
     c4c:	92 95       	swap	r25
     c4e:	9f 70       	andi	r25, 0x0F	; 15
     c50:	99 0f       	add	r25, r25
     c52:	29 2f       	mov	r18, r25
     c54:	22 0f       	add	r18, r18
     c56:	22 0f       	add	r18, r18
     c58:	92 0f       	add	r25, r18
     c5a:	8f 70       	andi	r24, 0x0F	; 15
     c5c:	89 0f       	add	r24, r25
     c5e:	08 95       	ret

00000c60 <rtc_sync>:
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	27 97       	sbiw	r28, 0x07	; 7
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	cd bf       	out	0x3d, r28	; 61
     c78:	8c 01       	movw	r16, r24
     c7a:	27 e0       	ldi	r18, 0x07	; 7
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	ae 01       	movw	r20, r28
     c80:	4f 5f       	subi	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	82 e3       	ldi	r24, 0x32	; 50
     c88:	0e 94 bc 07 	call	0xf78	; 0xf78 <twi_read>
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	0e 94 25 06 	call	0xc4a	; 0xc4a <BCDtoDEC>
     c92:	f8 01       	movw	r30, r16
     c94:	80 83       	st	Z, r24
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	0e 94 25 06 	call	0xc4a	; 0xc4a <BCDtoDEC>
     c9c:	f8 01       	movw	r30, r16
     c9e:	81 83       	std	Z+1, r24	; 0x01
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	0e 94 25 06 	call	0xc4a	; 0xc4a <BCDtoDEC>
     ca6:	f8 01       	movw	r30, r16
     ca8:	82 83       	std	Z+2, r24	; 0x02
     caa:	8c 81       	ldd	r24, Y+4	; 0x04
     cac:	87 83       	std	Z+7, r24	; 0x07
     cae:	8d 81       	ldd	r24, Y+5	; 0x05
     cb0:	0e 94 25 06 	call	0xc4a	; 0xc4a <BCDtoDEC>
     cb4:	f8 01       	movw	r30, r16
     cb6:	83 83       	std	Z+3, r24	; 0x03
     cb8:	8e 81       	ldd	r24, Y+6	; 0x06
     cba:	0e 94 25 06 	call	0xc4a	; 0xc4a <BCDtoDEC>
     cbe:	f8 01       	movw	r30, r16
     cc0:	84 83       	std	Z+4, r24	; 0x04
     cc2:	8f 81       	ldd	r24, Y+7	; 0x07
     cc4:	0e 94 25 06 	call	0xc4a	; 0xc4a <BCDtoDEC>
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	f8 01       	movw	r30, r16
     ccc:	96 83       	std	Z+6, r25	; 0x06
     cce:	85 83       	std	Z+5, r24	; 0x05
     cd0:	27 96       	adiw	r28, 0x07	; 7
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	08 95       	ret

00000ce6 <convert_to_timestamp>:
uint8_t DECtoBCD(uint8_t val)
{
	return ((val / 10) * 0x10) + (val % 10);
}

uint32_t convert_to_timestamp(const rtc_date *date) {
     ce6:	af 92       	push	r10
     ce8:	bf 92       	push	r11
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	2c 97       	sbiw	r28, 0x0c	; 12
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	fc 01       	movw	r30, r24
	uint8_t year = date->year;
     d0c:	85 81       	ldd	r24, Z+5	; 0x05
     d0e:	96 81       	ldd	r25, Z+6	; 0x06
     d10:	b8 2e       	mov	r11, r24
	uint8_t month = date->month;
     d12:	04 81       	ldd	r16, Z+4	; 0x04
	uint8_t day = date->date;
     d14:	a3 80       	ldd	r10, Z+3	; 0x03
	uint8_t hour = date->hour;
     d16:	32 81       	ldd	r19, Z+2	; 0x02
	uint8_t minute = date->minute;
     d18:	c1 80       	ldd	r12, Z+1	; 0x01
	uint8_t second = date->second;
     d1a:	20 81       	ld	r18, Z

	uint8_t days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
     d1c:	4c e0       	ldi	r20, 0x0C	; 12
     d1e:	ea e3       	ldi	r30, 0x3A	; 58
     d20:	f1 e0       	ldi	r31, 0x01	; 1
     d22:	de 01       	movw	r26, r28
     d24:	11 96       	adiw	r26, 0x01	; 1
     d26:	01 90       	ld	r0, Z+
     d28:	0d 92       	st	X+, r0
     d2a:	4a 95       	dec	r20
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <convert_to_timestamp+0x40>
	if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
     d2e:	48 2f       	mov	r20, r24
     d30:	43 70       	andi	r20, 0x03	; 3
     d32:	69 f4       	brne	.+26     	; 0xd4e <convert_to_timestamp+0x68>
     d34:	49 e2       	ldi	r20, 0x29	; 41
     d36:	84 9f       	mul	r24, r20
     d38:	41 2d       	mov	r20, r1
     d3a:	11 24       	eor	r1, r1
     d3c:	42 95       	swap	r20
     d3e:	4f 70       	andi	r20, 0x0F	; 15
     d40:	68 2f       	mov	r22, r24
     d42:	54 e6       	ldi	r21, 0x64	; 100
     d44:	45 9f       	mul	r20, r21
     d46:	60 19       	sub	r22, r0
     d48:	11 24       	eor	r1, r1
     d4a:	61 11       	cpse	r22, r1
     d4c:	07 c0       	rjmp	.+14     	; 0xd5c <convert_to_timestamp+0x76>
     d4e:	99 27       	eor	r25, r25
     d50:	60 e9       	ldi	r22, 0x90	; 144
     d52:	71 e0       	ldi	r23, 0x01	; 1
     d54:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__divmodhi4>
     d58:	89 2b       	or	r24, r25
     d5a:	11 f4       	brne	.+4      	; 0xd60 <convert_to_timestamp+0x7a>
		days_in_month[1] = 29;
     d5c:	8d e1       	ldi	r24, 0x1D	; 29
     d5e:	8a 83       	std	Y+2, r24	; 0x02
	}

	uint32_t timestamp = 0;
	timestamp += second;
	timestamp += minute * 60;
	timestamp += hour * 3600;
     d60:	8c e3       	ldi	r24, 0x3C	; 60
     d62:	c8 9e       	mul	r12, r24
     d64:	60 01       	movw	r12, r0
     d66:	11 24       	eor	r1, r1
     d68:	0d 2c       	mov	r0, r13
     d6a:	00 0c       	add	r0, r0
     d6c:	ee 08       	sbc	r14, r14
     d6e:	ff 08       	sbc	r15, r15
     d70:	40 e1       	ldi	r20, 0x10	; 16
     d72:	5e e0       	ldi	r21, 0x0E	; 14
     d74:	34 9f       	mul	r19, r20
     d76:	c0 01       	movw	r24, r0
     d78:	35 9f       	mul	r19, r21
     d7a:	90 0d       	add	r25, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	09 2e       	mov	r0, r25
     d80:	00 0c       	add	r0, r0
     d82:	aa 0b       	sbc	r26, r26
     d84:	bb 0b       	sbc	r27, r27
     d86:	c8 0e       	add	r12, r24
     d88:	d9 1e       	adc	r13, r25
     d8a:	ea 1e       	adc	r14, r26
     d8c:	fb 1e       	adc	r15, r27
     d8e:	c2 0e       	add	r12, r18
     d90:	d1 1c       	adc	r13, r1
     d92:	e1 1c       	adc	r14, r1
     d94:	f1 1c       	adc	r15, r1
	for (uint8_t i = 0; i < month - 1; i++) {
     d96:	10 e0       	ldi	r17, 0x00	; 0
     d98:	01 50       	subi	r16, 0x01	; 1
     d9a:	11 09       	sbc	r17, r1
     d9c:	10 16       	cp	r1, r16
     d9e:	11 06       	cpc	r1, r17
     da0:	dc f4       	brge	.+54     	; 0xdd8 <convert_to_timestamp+0xf2>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	e0 e0       	ldi	r30, 0x00	; 0
		timestamp += days_in_month[i] * 86400;
     da8:	a1 e0       	ldi	r26, 0x01	; 1
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ac 0f       	add	r26, r28
     dae:	bd 1f       	adc	r27, r29
     db0:	a8 0f       	add	r26, r24
     db2:	b9 1f       	adc	r27, r25
     db4:	ac 91       	ld	r26, X
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	20 e8       	ldi	r18, 0x80	; 128
     dba:	31 e5       	ldi	r19, 0x51	; 81
     dbc:	41 e0       	ldi	r20, 0x01	; 1
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__muluhisi3>
     dc4:	c6 0e       	add	r12, r22
     dc6:	d7 1e       	adc	r13, r23
     dc8:	e8 1e       	adc	r14, r24
     dca:	f9 1e       	adc	r15, r25

	uint32_t timestamp = 0;
	timestamp += second;
	timestamp += minute * 60;
	timestamp += hour * 3600;
	for (uint8_t i = 0; i < month - 1; i++) {
     dcc:	ef 5f       	subi	r30, 0xFF	; 255
     dce:	8e 2f       	mov	r24, r30
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	80 17       	cp	r24, r16
     dd4:	91 07       	cpc	r25, r17
     dd6:	44 f3       	brlt	.-48     	; 0xda8 <convert_to_timestamp+0xc2>
		timestamp += days_in_month[i] * 86400;
	}

	for (uint8_t i = 0; i < year; i++) {
     dd8:	bb 20       	and	r11, r11
     dda:	69 f1       	breq	.+90     	; 0xe36 <convert_to_timestamp+0x150>
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
		if ((i % 4 == 0 && i % 100 != 0) || (i % 400 == 0)) {
     de0:	e0 e9       	ldi	r30, 0x90	; 144
     de2:	f1 e0       	ldi	r31, 0x01	; 1
     de4:	19 e2       	ldi	r17, 0x29	; 41
     de6:	44 e6       	ldi	r20, 0x64	; 100
     de8:	82 2f       	mov	r24, r18
     dea:	83 70       	andi	r24, 0x03	; 3
     dec:	59 f4       	brne	.+22     	; 0xe04 <convert_to_timestamp+0x11e>
     dee:	21 9f       	mul	r18, r17
     df0:	81 2d       	mov	r24, r1
     df2:	11 24       	eor	r1, r1
     df4:	82 95       	swap	r24
     df6:	8f 70       	andi	r24, 0x0F	; 15
     df8:	92 2f       	mov	r25, r18
     dfa:	84 9f       	mul	r24, r20
     dfc:	90 19       	sub	r25, r0
     dfe:	11 24       	eor	r1, r1
     e00:	91 11       	cpse	r25, r1
     e02:	06 c0       	rjmp	.+12     	; 0xe10 <convert_to_timestamp+0x12a>
     e04:	c9 01       	movw	r24, r18
     e06:	bf 01       	movw	r22, r30
     e08:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__divmodhi4>
     e0c:	89 2b       	or	r24, r25
     e0e:	39 f4       	brne	.+14     	; 0xe1e <convert_to_timestamp+0x138>
			timestamp += 31622400; 
     e10:	5b e7       	ldi	r21, 0x7B	; 123
     e12:	d5 1a       	sub	r13, r21
     e14:	5d e1       	ldi	r21, 0x1D	; 29
     e16:	e5 0a       	sbc	r14, r21
     e18:	5e ef       	ldi	r21, 0xFE	; 254
     e1a:	f5 0a       	sbc	r15, r21
     e1c:	08 c0       	rjmp	.+16     	; 0xe2e <convert_to_timestamp+0x148>
			} else {
			timestamp += 31536000; 
     e1e:	60 e8       	ldi	r22, 0x80	; 128
     e20:	c6 1a       	sub	r12, r22
     e22:	6c ec       	ldi	r22, 0xCC	; 204
     e24:	d6 0a       	sbc	r13, r22
     e26:	6e e1       	ldi	r22, 0x1E	; 30
     e28:	e6 0a       	sbc	r14, r22
     e2a:	6e ef       	ldi	r22, 0xFE	; 254
     e2c:	f6 0a       	sbc	r15, r22
     e2e:	2f 5f       	subi	r18, 0xFF	; 255
     e30:	3f 4f       	sbci	r19, 0xFF	; 255
	timestamp += hour * 3600;
	for (uint8_t i = 0; i < month - 1; i++) {
		timestamp += days_in_month[i] * 86400;
	}

	for (uint8_t i = 0; i < year; i++) {
     e32:	2b 15       	cp	r18, r11
     e34:	c8 f2       	brcs	.-78     	; 0xde8 <convert_to_timestamp+0x102>
			timestamp += 31536000; 
		}
	}
	timestamp += (day - 1) * 86400;

	return timestamp;
     e36:	aa 2d       	mov	r26, r10
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	11 97       	sbiw	r26, 0x01	; 1
     e3c:	20 e8       	ldi	r18, 0x80	; 128
     e3e:	31 e5       	ldi	r19, 0x51	; 81
     e40:	41 e0       	ldi	r20, 0x01	; 1
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__mulshisi3>
     e48:	6c 0d       	add	r22, r12
     e4a:	7d 1d       	adc	r23, r13
     e4c:	8e 1d       	adc	r24, r14
     e4e:	9f 1d       	adc	r25, r15
     e50:	2c 96       	adiw	r28, 0x0c	; 12
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	08 95       	ret

00000e72 <__vector_39>:
gpio spi_ss_pin = {(uint8_t *)&PORTE , PORTE2};




ISR(SPI1_STC_vect){
     e72:	1f 92       	push	r1
     e74:	0f 92       	push	r0
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	0f 92       	push	r0
     e7a:	11 24       	eor	r1, r1
     e7c:	8f 93       	push	r24
	if(SPSR1 & 0x40){
     e7e:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
     e82:	86 ff       	sbrs	r24, 6
     e84:	04 c0       	rjmp	.+8      	; 0xe8e <__vector_39+0x1c>
		//spi_rx_data = 0;
		spi_txrx_done = 1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <spi_txrx_done>
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <__vector_39+0x22>
		}else{
		spi_txrx_done = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <spi_txrx_done>
	}
}
     e94:	8f 91       	pop	r24
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <spi1_init>:
	
	
void spi1_init(){
	gpio_set_pin_direction(&spi_tx_pin , PORT_DIR_OUT);
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	82 e1       	ldi	r24, 0x12	; 18
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	0e 94 c0 05 	call	0xb80	; 0xb80 <gpio_set_pin_direction>
	gpio_set_pin_level(&spi_tx_pin, true);
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	82 e1       	ldi	r24, 0x12	; 18
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 97 05 	call	0xb2e	; 0xb2e <gpio_set_pin_level>
	gpio_set_pin_direction(&spi_ss_pin , PORT_DIR_OUT);
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	8c e0       	ldi	r24, 0x0C	; 12
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	0e 94 c0 05 	call	0xb80	; 0xb80 <gpio_set_pin_direction>
	gpio_set_pin_level(&spi_ss_pin, true);
     ebe:	61 e0       	ldi	r22, 0x01	; 1
     ec0:	8c e0       	ldi	r24, 0x0C	; 12
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 97 05 	call	0xb2e	; 0xb2e <gpio_set_pin_level>
	
	gpio_set_pin_direction(&spi_clk_pin , PORT_DIR_OUT);
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	8f e0       	ldi	r24, 0x0F	; 15
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 c0 05 	call	0xb80	; 0xb80 <gpio_set_pin_direction>
	gpio_set_pin_level(&spi_clk_pin, false);
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	8f e0       	ldi	r24, 0x0F	; 15
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	0e 94 97 05 	call	0xb2e	; 0xb2e <gpio_set_pin_level>
	//DDRC |= (1 << DDC1);
	//DDRE |= (1 << DDE3);	
	SPCR1 |= (1 << SPIE1) | (1 << SPE1) | (0 << DORD1) | (1 << MSTR1)  | (0 << CPOL1) | (0 << CPHA1) | (0b00 << SPR1);
     edc:	ec ea       	ldi	r30, 0xAC	; 172
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 6d       	ori	r24, 0xD0	; 208
     ee4:	80 83       	st	Z, r24
	SPCR1 |= (0 << MSTR1);
     ee6:	80 81       	ld	r24, Z
     ee8:	80 83       	st	Z, r24
	//Bit 3 – CPOL1: Clock1 Polarity
	//Bit 2 – CPHA1: Clock1 Phase
	//Bits 1:0 – SPR1n: SPI1 Clock Rate Select n [n = 1:0]
	//
	
	SPSR1 |= (1 << SPI2X);
     eea:	ed ea       	ldi	r30, 0xAD	; 173
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	81 60       	ori	r24, 0x01	; 1
     ef2:	80 83       	st	Z, r24
     ef4:	08 95       	ret

00000ef6 <twi_start>:
	status = (TWSR1 & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     ef6:	85 ea       	ldi	r24, 0xA5	; 165
     ef8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	
	while(status != TWI_START){
     efc:	80 e4       	ldi	r24, 0x40	; 64
     efe:	96 e0       	ldi	r25, 0x06	; 6
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <twi_start+0x10>
     f02:	01 97       	sbiw	r24, 0x01	; 1
		i++;
		if(i >= TWI_TIMEOUT){
     f04:	31 f0       	breq	.+12     	; 0xf12 <twi_start+0x1c>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     f06:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <status>
     f0a:	28 30       	cpi	r18, 0x08	; 8
     f0c:	d1 f7       	brne	.-12     	; 0xf02 <twi_start+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	08 95       	ret
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     f12:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     f14:	08 95       	ret

00000f16 <twi_addr_write_ack>:
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     f16:	85 e8       	ldi	r24, 0x85	; 133
     f18:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	while(status != TWIT_ADDR_ACK){
     f1c:	80 e4       	ldi	r24, 0x40	; 64
     f1e:	96 e0       	ldi	r25, 0x06	; 6
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <twi_addr_write_ack+0x10>
     f22:	01 97       	sbiw	r24, 0x01	; 1
		i++;
		if(i >= TWI_TIMEOUT){
     f24:	31 f0       	breq	.+12     	; 0xf32 <twi_addr_write_ack+0x1c>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     f26:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <status>
     f2a:	28 31       	cpi	r18, 0x18	; 24
     f2c:	d1 f7       	brne	.-12     	; 0xf22 <twi_addr_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     f32:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     f34:	08 95       	ret

00000f36 <twi_data_write_ack>:


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     f36:	85 e8       	ldi	r24, 0x85	; 133
     f38:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	while(status != TWIT_DATA_ACK){
     f3c:	80 e4       	ldi	r24, 0x40	; 64
     f3e:	96 e0       	ldi	r25, 0x06	; 6
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <twi_data_write_ack+0x10>
     f42:	01 97       	sbiw	r24, 0x01	; 1
		i++;
		if(i >= TWI_TIMEOUT){
     f44:	31 f0       	breq	.+12     	; 0xf52 <twi_data_write_ack+0x1c>

static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     f46:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <status>
     f4a:	28 32       	cpi	r18, 0x28	; 40
     f4c:	d1 f7       	brne	.-12     	; 0xf42 <twi_data_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     f52:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     f54:	08 95       	ret

00000f56 <__vector_40>:

#include "twi_hal1.h"

volatile uint8_t status = 0xF8;

ISR(TWI1_vect){
     f56:	1f 92       	push	r1
     f58:	0f 92       	push	r0
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	0f 92       	push	r0
     f5e:	11 24       	eor	r1, r1
     f60:	8f 93       	push	r24
	status = (TWSR1 & 0xF8);
     f62:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
     f66:	88 7f       	andi	r24, 0xF8	; 248
     f68:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <status>
}
     f6c:	8f 91       	pop	r24
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <twi_read>:
		
	}
	return TWI_OK;
}

uint8_t twi_read(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     f78:	cf 92       	push	r12
     f7a:	df 92       	push	r13
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	f8 2e       	mov	r15, r24
     f8a:	e6 2e       	mov	r14, r22
     f8c:	6a 01       	movw	r12, r20
     f8e:	89 01       	movw	r16, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     f90:	0e 94 7b 07 	call	0xef6	; 0xef6 <twi_start>
	if(err != TWI_OK){
     f94:	88 23       	and	r24, r24
     f96:	21 f0       	breq	.+8      	; 0xfa0 <twi_read+0x28>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     f98:	95 e9       	ldi	r25, 0x95	; 149
     f9a:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     f9e:	83 c0       	rjmp	.+262    	; 0x10a6 <twi_read+0x12e>
	err = twi_start();
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	TWDR1 = (addr << 1) | 0;
     fa0:	8f 2d       	mov	r24, r15
     fa2:	88 0f       	add	r24, r24
     fa4:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
     fa8:	0e 94 8b 07 	call	0xf16	; 0xf16 <twi_addr_write_ack>
	if(err != TWI_OK){
     fac:	88 23       	and	r24, r24
     fae:	21 f0       	breq	.+8      	; 0xfb8 <twi_read+0x40>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     fb0:	95 e9       	ldi	r25, 0x95	; 149
     fb2:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     fb6:	77 c0       	rjmp	.+238    	; 0x10a6 <twi_read+0x12e>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR1 = reg;
     fb8:	e0 92 db 00 	sts	0x00DB, r14	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
     fbc:	0e 94 9b 07 	call	0xf36	; 0xf36 <twi_data_write_ack>
	if(err != TWI_OK){
     fc0:	88 23       	and	r24, r24
     fc2:	21 f0       	breq	.+8      	; 0xfcc <twi_read+0x54>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     fc4:	95 e9       	ldi	r25, 0x95	; 149
     fc6:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     fca:	6d c0       	rjmp	.+218    	; 0x10a6 <twi_read+0x12e>
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     fcc:	85 ea       	ldi	r24, 0xA5	; 165
     fce:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     fd2:	80 e4       	ldi	r24, 0x40	; 64
     fd4:	96 e0       	ldi	r25, 0x06	; 6
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <twi_read+0x64>
     fd8:	01 97       	sbiw	r24, 0x01	; 1
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
     fda:	69 f1       	breq	.+90     	; 0x1036 <twi_read+0xbe>

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     fdc:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <status>
     fe0:	20 31       	cpi	r18, 0x10	; 16
     fe2:	d1 f7       	brne	.-12     	; 0xfd8 <twi_read+0x60>
     fe4:	2d c0       	rjmp	.+90     	; 0x1040 <twi_read+0xc8>
     fe6:	01 97       	sbiw	r24, 0x01	; 1
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
     fe8:	09 f4       	brne	.+2      	; 0xfec <twi_read+0x74>
     fea:	3b c0       	rjmp	.+118    	; 0x1062 <twi_read+0xea>

static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     fec:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <status>
     ff0:	20 34       	cpi	r18, 0x40	; 64
     ff2:	c9 f7       	brne	.-14     	; 0xfe6 <twi_read+0x6e>
     ff4:	30 c0       	rjmp	.+96     	; 0x1056 <twi_read+0xde>
     ff6:	f6 01       	movw	r30, r12
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	50 e0       	ldi	r21, 0x00	; 0


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     ffc:	ac ed       	ldi	r26, 0xDC	; 220
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	25 ec       	ldi	r18, 0xC5	; 197
		err = twi_data_read_ack(1);
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		data[i] = TWDR1;
    1002:	cb ed       	ldi	r28, 0xDB	; 219
    1004:	d0 e0       	ldi	r29, 0x00	; 0


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
    1006:	2c 93       	st	X, r18
    1008:	80 e4       	ldi	r24, 0x40	; 64
    100a:	96 e0       	ldi	r25, 0x06	; 6
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <twi_read+0x9a>
    100e:	01 97       	sbiw	r24, 0x01	; 1
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
    1010:	69 f1       	breq	.+90     	; 0x106c <twi_read+0xf4>

static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
    1012:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <status>
    1016:	30 35       	cpi	r19, 0x50	; 80
    1018:	d1 f7       	brne	.-12     	; 0x100e <twi_read+0x96>
    101a:	2d c0       	rjmp	.+90     	; 0x1076 <twi_read+0xfe>
				return TWI_ERROR_START;
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
    101c:	85 e8       	ldi	r24, 0x85	; 133
    101e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1022:	80 e4       	ldi	r24, 0x40	; 64
    1024:	96 e0       	ldi	r25, 0x06	; 6
    1026:	02 c0       	rjmp	.+4      	; 0x102c <twi_read+0xb4>
    1028:	01 97       	sbiw	r24, 0x01	; 1
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
    102a:	71 f1       	breq	.+92     	; 0x1088 <twi_read+0x110>
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
    102c:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <status>
    1030:	28 35       	cpi	r18, 0x58	; 88
    1032:	d1 f7       	brne	.-12     	; 0x1028 <twi_read+0xb0>
    1034:	2e c0       	rjmp	.+92     	; 0x1092 <twi_read+0x11a>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    1036:	85 e9       	ldi	r24, 0x95	; 149
    1038:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	33 c0       	rjmp	.+102    	; 0x10a6 <twi_read+0x12e>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR1 = (addr << 1) | 1;
    1040:	8f 2d       	mov	r24, r15
    1042:	88 0f       	add	r24, r24
    1044:	81 60       	ori	r24, 0x01	; 1
    1046:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
    104a:	85 e8       	ldi	r24, 0x85	; 133
    104c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1050:	80 e4       	ldi	r24, 0x40	; 64
    1052:	96 e0       	ldi	r25, 0x06	; 6
    1054:	cb cf       	rjmp	.-106    	; 0xfec <twi_read+0x74>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
    1056:	01 50       	subi	r16, 0x01	; 1
    1058:	11 09       	sbc	r17, r1
    105a:	69 f6       	brne	.-102    	; 0xff6 <twi_read+0x7e>
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	dd cf       	rjmp	.-70     	; 0x101c <twi_read+0xa4>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    1062:	85 e9       	ldi	r24, 0x95	; 149
    1064:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	1d c0       	rjmp	.+58     	; 0x10a6 <twi_read+0x12e>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    106c:	85 e9       	ldi	r24, 0x95	; 149
    106e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	18 c0       	rjmp	.+48     	; 0x10a6 <twi_read+0x12e>
		err = twi_data_read_ack(1);
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		data[i] = TWDR1;
    1076:	88 81       	ld	r24, Y
    1078:	81 93       	st	Z+, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
    107a:	4f 5f       	subi	r20, 0xFF	; 255
    107c:	5f 4f       	sbci	r21, 0xFF	; 255
    107e:	40 17       	cp	r20, r16
    1080:	51 07       	cpc	r21, r17
    1082:	08 f4       	brcc	.+2      	; 0x1086 <twi_read+0x10e>
    1084:	c0 cf       	rjmp	.-128    	; 0x1006 <twi_read+0x8e>
    1086:	ca cf       	rjmp	.-108    	; 0x101c <twi_read+0xa4>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    1088:	85 e9       	ldi	r24, 0x95	; 149
    108a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	0a c0       	rjmp	.+20     	; 0x10a6 <twi_read+0x12e>
	err = twi_data_read_ack(0);
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	data[i] = TWDR1;
    1092:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    1096:	e6 01       	movw	r28, r12
    1098:	c4 0f       	add	r28, r20
    109a:	d5 1f       	adc	r29, r21
    109c:	88 83       	st	Y, r24
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    109e:	85 e9       	ldi	r24, 0x95	; 149
    10a0:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	}
	data[i] = TWDR1;
	
	twi_stop();
	
	return err;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
}
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	ff 90       	pop	r15
    10b0:	ef 90       	pop	r14
    10b2:	df 90       	pop	r13
    10b4:	cf 90       	pop	r12
    10b6:	08 95       	ret

000010b8 <twi_write>:


uint8_t twi_write(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
    10b8:	ef 92       	push	r14
    10ba:	ff 92       	push	r15
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	c8 2f       	mov	r28, r24
    10c6:	d6 2f       	mov	r29, r22
    10c8:	7a 01       	movw	r14, r20
    10ca:	89 01       	movw	r16, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
    10cc:	0e 94 7b 07 	call	0xef6	; 0xef6 <twi_start>
	if(err != TWI_OK){
    10d0:	88 23       	and	r24, r24
    10d2:	21 f0       	breq	.+8      	; 0x10dc <twi_write+0x24>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    10d4:	95 e9       	ldi	r25, 0x95	; 149
    10d6:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    10da:	33 c0       	rjmp	.+102    	; 0x1142 <twi_write+0x8a>
	err = twi_start();
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	TWDR1 = (addr << 1) | 0;
    10dc:	cc 0f       	add	r28, r28
    10de:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
    10e2:	0e 94 8b 07 	call	0xf16	; 0xf16 <twi_addr_write_ack>
	if(err != TWI_OK){
    10e6:	88 23       	and	r24, r24
    10e8:	21 f0       	breq	.+8      	; 0x10f2 <twi_write+0x3a>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    10ea:	95 e9       	ldi	r25, 0x95	; 149
    10ec:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    10f0:	28 c0       	rjmp	.+80     	; 0x1142 <twi_write+0x8a>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR1 = reg;
    10f2:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
    10f6:	0e 94 9b 07 	call	0xf36	; 0xf36 <twi_data_write_ack>
	if(err != TWI_OK){
    10fa:	81 11       	cpse	r24, r1
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <twi_write+0x4e>
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
    10fe:	01 15       	cp	r16, r1
    1100:	11 05       	cpc	r17, r1
    1102:	29 f4       	brne	.+10     	; 0x110e <twi_write+0x56>
    1104:	1a c0       	rjmp	.+52     	; 0x113a <twi_write+0x82>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    1106:	95 e9       	ldi	r25, 0x95	; 149
    1108:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    110c:	1a c0       	rjmp	.+52     	; 0x1142 <twi_write+0x8a>
    110e:	e7 01       	movw	r28, r14
    1110:	0e 0d       	add	r16, r14
    1112:	1f 1d       	adc	r17, r15
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
		TWDR1 = data[i];
    1114:	0f 2e       	mov	r0, r31
    1116:	fb ed       	ldi	r31, 0xDB	; 219
    1118:	ef 2e       	mov	r14, r31
    111a:	f1 2c       	mov	r15, r1
    111c:	f0 2d       	mov	r31, r0
    111e:	89 91       	ld	r24, Y+
    1120:	f7 01       	movw	r30, r14
    1122:	80 83       	st	Z, r24
		err = twi_data_write_ack();
    1124:	0e 94 9b 07 	call	0xf36	; 0xf36 <twi_data_write_ack>
		if(err != TWI_OK){
    1128:	88 23       	and	r24, r24
    112a:	21 f0       	breq	.+8      	; 0x1134 <twi_write+0x7c>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    112c:	95 e9       	ldi	r25, 0x95	; 149
    112e:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1132:	07 c0       	rjmp	.+14     	; 0x1142 <twi_write+0x8a>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
    1134:	0c 17       	cp	r16, r28
    1136:	1d 07       	cpc	r17, r29
    1138:	91 f7       	brne	.-28     	; 0x111e <twi_write+0x66>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    113a:	85 e9       	ldi	r24, 0x95	; 149
    113c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1140:	80 e0       	ldi	r24, 0x00	; 0
	
	
	twi_stop();
	
	return err;
}
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	08 95       	ret

00001150 <twi_transfer>:

uint8_t twi_transfer(uint8_t addr,uint8_t *data,uint16_t len){
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	c8 2f       	mov	r28, r24
    115e:	7b 01       	movw	r14, r22
    1160:	8a 01       	movw	r16, r20
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
    1162:	0e 94 7b 07 	call	0xef6	; 0xef6 <twi_start>
	if(err != TWI_OK){
    1166:	88 23       	and	r24, r24
    1168:	21 f0       	breq	.+8      	; 0x1172 <twi_transfer+0x22>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    116a:	95 e9       	ldi	r25, 0x95	; 149
    116c:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1170:	29 c0       	rjmp	.+82     	; 0x11c4 <twi_transfer+0x74>
	err = twi_start();
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	TWDR1 = (addr << 1) | 0;
    1172:	cc 0f       	add	r28, r28
    1174:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
    1178:	0e 94 8b 07 	call	0xf16	; 0xf16 <twi_addr_write_ack>
	if(err != TWI_OK){
    117c:	81 11       	cpse	r24, r1
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <twi_transfer+0x38>
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
    1180:	01 15       	cp	r16, r1
    1182:	11 05       	cpc	r17, r1
    1184:	29 f4       	brne	.+10     	; 0x1190 <twi_transfer+0x40>
    1186:	1a c0       	rjmp	.+52     	; 0x11bc <twi_transfer+0x6c>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    1188:	95 e9       	ldi	r25, 0x95	; 149
    118a:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    118e:	1a c0       	rjmp	.+52     	; 0x11c4 <twi_transfer+0x74>
    1190:	e7 01       	movw	r28, r14
    1192:	0e 0d       	add	r16, r14
    1194:	1f 1d       	adc	r17, r15
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
		TWDR1 = data[i];
    1196:	0f 2e       	mov	r0, r31
    1198:	fb ed       	ldi	r31, 0xDB	; 219
    119a:	ef 2e       	mov	r14, r31
    119c:	f1 2c       	mov	r15, r1
    119e:	f0 2d       	mov	r31, r0
    11a0:	89 91       	ld	r24, Y+
    11a2:	f7 01       	movw	r30, r14
    11a4:	80 83       	st	Z, r24
		err = twi_data_write_ack();
    11a6:	0e 94 9b 07 	call	0xf36	; 0xf36 <twi_data_write_ack>
		if(err != TWI_OK){
    11aa:	88 23       	and	r24, r24
    11ac:	21 f0       	breq	.+8      	; 0x11b6 <twi_transfer+0x66>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    11ae:	95 e9       	ldi	r25, 0x95	; 149
    11b0:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    11b4:	07 c0       	rjmp	.+14     	; 0x11c4 <twi_transfer+0x74>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
    11b6:	0c 17       	cp	r16, r28
    11b8:	1d 07       	cpc	r17, r29
    11ba:	91 f7       	brne	.-28     	; 0x11a0 <twi_transfer+0x50>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    11bc:	85 e9       	ldi	r24, 0x95	; 149
    11be:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
	
	
	twi_stop();
	
	return err;
}
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	08 95       	ret

000011d2 <twi_init>:




void twi_init(uint32_t speed){
    11d2:	9b 01       	movw	r18, r22
    11d4:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
	TWBR1 = gen_t & 0xFF;
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	72 e1       	ldi	r23, 0x12	; 18
    11da:	8a e7       	ldi	r24, 0x7A	; 122
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 67 16 	call	0x2cce	; 0x2cce <__udivmodsi4>
    11e2:	da 01       	movw	r26, r20
    11e4:	c9 01       	movw	r24, r18
    11e6:	40 97       	sbiw	r24, 0x10	; 16
    11e8:	a1 09       	sbc	r26, r1
    11ea:	b1 09       	sbc	r27, r1
    11ec:	b6 95       	lsr	r27
    11ee:	a7 95       	ror	r26
    11f0:	97 95       	ror	r25
    11f2:	87 95       	ror	r24
    11f4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	TWCR1 = (1 << TWEN) | (1 << TWIE);
    11f8:	85 e0       	ldi	r24, 0x05	; 5
    11fa:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    11fe:	08 95       	ret

00001200 <__vector_18>:

void uart_send_array(uint8_t *c,uint16_t len){
	for(uint16_t i = 0; i < len;i++){
		uart_send_byte(c[i]);
	}
}
    1200:	1f 92       	push	r1
    1202:	0f 92       	push	r0
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	0f 92       	push	r0
    1208:	11 24       	eor	r1, r1
    120a:	8f 93       	push	r24
    120c:	9f 93       	push	r25
    120e:	ef 93       	push	r30
    1210:	ff 93       	push	r31
    1212:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <rx_count>
    1216:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <rx_count+0x1>
    121a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    121e:	e5 57       	subi	r30, 0x75	; 117
    1220:	fd 4f       	sbci	r31, 0xFD	; 253
    1222:	80 83       	st	Z, r24
    1224:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <rx_count>
    1228:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <rx_count+0x1>
    122c:	e5 57       	subi	r30, 0x75	; 117
    122e:	fd 4f       	sbci	r31, 0xFD	; 253
    1230:	80 81       	ld	r24, Z
    1232:	8d 30       	cpi	r24, 0x0D	; 13
    1234:	51 f4       	brne	.+20     	; 0x124a <__vector_18+0x4a>
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <read_complete>
    123c:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <rx_count>
    1240:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <rx_count+0x1>
    1244:	e5 57       	subi	r30, 0x75	; 117
    1246:	fd 4f       	sbci	r31, 0xFD	; 253
    1248:	11 82       	std	Z+1, r1	; 0x01
    124a:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <rx_count>
    124e:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <rx_count+0x1>
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <rx_count+0x1>
    1258:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <rx_count>
    125c:	ff 91       	pop	r31
    125e:	ef 91       	pop	r30
    1260:	9f 91       	pop	r25
    1262:	8f 91       	pop	r24
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	0f 90       	pop	r0
    126a:	1f 90       	pop	r1
    126c:	18 95       	reti

0000126e <__vector_20>:
    126e:	1f 92       	push	r1
    1270:	0f 92       	push	r0
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	0f 92       	push	r0
    1276:	11 24       	eor	r1, r1
    1278:	8f 93       	push	r24
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uart_tx_busy>
    1280:	8f 91       	pop	r24
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <uart_init>:
    128c:	44 23       	and	r20, r20
    128e:	39 f0       	breq	.+14     	; 0x129e <uart_init+0x12>
    1290:	e0 ec       	ldi	r30, 0xC0	; 192
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	20 81       	ld	r18, Z
    1296:	22 60       	ori	r18, 0x02	; 2
    1298:	20 83       	st	Z, r18
    129a:	a8 e0       	ldi	r26, 0x08	; 8
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <uart_init+0x14>
    129e:	a0 e1       	ldi	r26, 0x10	; 16
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	9b 01       	movw	r18, r22
    12a4:	ac 01       	movw	r20, r24
    12a6:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__muluhisi3>
    12aa:	9b 01       	movw	r18, r22
    12ac:	ac 01       	movw	r20, r24
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	72 e1       	ldi	r23, 0x12	; 18
    12b2:	8a e7       	ldi	r24, 0x7A	; 122
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 67 16 	call	0x2cce	; 0x2cce <__udivmodsi4>
    12ba:	ba 01       	movw	r22, r20
    12bc:	a9 01       	movw	r20, r18
    12be:	41 50       	subi	r20, 0x01	; 1
    12c0:	51 09       	sbc	r21, r1
    12c2:	61 09       	sbc	r22, r1
    12c4:	71 09       	sbc	r23, r1
    12c6:	db 01       	movw	r26, r22
    12c8:	ca 01       	movw	r24, r20
    12ca:	88 27       	eor	r24, r24
    12cc:	9f 70       	andi	r25, 0x0F	; 15
    12ce:	aa 27       	eor	r26, r26
    12d0:	bb 27       	eor	r27, r27
    12d2:	89 2f       	mov	r24, r25
    12d4:	9a 2f       	mov	r25, r26
    12d6:	ab 2f       	mov	r26, r27
    12d8:	bb 27       	eor	r27, r27
    12da:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    12de:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    12e2:	e1 ec       	ldi	r30, 0xC1	; 193
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	88 6d       	ori	r24, 0xD8	; 216
    12ea:	80 83       	st	Z, r24
    12ec:	86 e8       	ldi	r24, 0x86	; 134
    12ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    12f2:	08 95       	ret

000012f4 <uart_send_byte>:
    12f4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <uart_tx_busy>
    12f8:	99 23       	and	r25, r25
    12fa:	e1 f3       	breq	.-8      	; 0x12f4 <uart_send_byte>
    12fc:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <uart_tx_busy>
    1300:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1304:	08 95       	ret

00001306 <uart_send_string>:

void uart_send_string(uint8_t *c){
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	ec 01       	movw	r28, r24
	uint16_t i = 0;
	do{
		uart_send_byte(c[i]);
    130c:	89 91       	ld	r24, Y+
    130e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <uart_send_byte>
		i++;
		
	}while(c[i] != '\0');
    1312:	88 81       	ld	r24, Y
    1314:	81 11       	cpse	r24, r1
    1316:	fa cf       	rjmp	.-12     	; 0x130c <uart_send_string+0x6>
	//uart_send_byte(c[i]);
}
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <__vector_1>:
uint8_t rtc_int_request = 0;
uint16_t BAT_VOLT = 0;



ISR(INT0_vect){
    131e:	1f 92       	push	r1
    1320:	0f 92       	push	r0
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	0f 92       	push	r0
    1326:	11 24       	eor	r1, r1
    1328:	8f 93       	push	r24
	rtc_int_request=1;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <rtc_int_request>
}
    1330:	8f 91       	pop	r24
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti

0000133c <main>:



int main(void)
{
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	c0 58       	subi	r28, 0x80	; 128
    1346:	d1 09       	sbc	r29, r1
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    char char_array[128]="\0";
    1352:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <mystdout+0x1a>
    1356:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <mystdout+0x1b>
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	fe 01       	movw	r30, r28
    1360:	33 96       	adiw	r30, 0x03	; 3
    1362:	8e e7       	ldi	r24, 0x7E	; 126
    1364:	df 01       	movw	r26, r30
    1366:	1d 92       	st	X+, r1
    1368:	8a 95       	dec	r24
    136a:	e9 f7       	brne	.-6      	; 0x1366 <main+0x2a>

    
    uart_init(250000,1);
    136c:	41 e0       	ldi	r20, 0x01	; 1
    136e:	60 e9       	ldi	r22, 0x90	; 144
    1370:	70 ed       	ldi	r23, 0xD0	; 208
    1372:	83 e0       	ldi	r24, 0x03	; 3
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 46 09 	call	0x128c	; 0x128c <uart_init>
    twi_init(400000);
    137a:	60 e8       	ldi	r22, 0x80	; 128
    137c:	7a e1       	ldi	r23, 0x1A	; 26
    137e:	86 e0       	ldi	r24, 0x06	; 6
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <twi_init>
    gpio_set_pin_direction(&lcd_blk , PORT_DIR_OUT); gpio_set_pin_level(&lcd_blk, false);
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	86 e2       	ldi	r24, 0x26	; 38
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	0e 94 c0 05 	call	0xb80	; 0xb80 <gpio_set_pin_direction>
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	86 e2       	ldi	r24, 0x26	; 38
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	0e 94 97 05 	call	0xb2e	; 0xb2e <gpio_set_pin_level>
	gpio_set_pin_direction(&ext_led , PORT_DIR_OUT); gpio_set_pin_level(&ext_led, false);
    139a:	61 e0       	ldi	r22, 0x01	; 1
    139c:	83 e2       	ldi	r24, 0x23	; 35
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	0e 94 c0 05 	call	0xb80	; 0xb80 <gpio_set_pin_direction>
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	83 e2       	ldi	r24, 0x23	; 35
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	0e 94 97 05 	call	0xb2e	; 0xb2e <gpio_set_pin_level>
	gpio_set_pin_direction(&deb_led , PORT_DIR_OUT); gpio_set_pin_level(&deb_led, false);
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	80 e2       	ldi	r24, 0x20	; 32
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	0e 94 c0 05 	call	0xb80	; 0xb80 <gpio_set_pin_direction>
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	80 e2       	ldi	r24, 0x20	; 32
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	0e 94 97 05 	call	0xb2e	; 0xb2e <gpio_set_pin_level>
    gpio_set_pin_direction(&rtc_int, PORT_DIR_IN);
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	89 e2       	ldi	r24, 0x29	; 41
    13c6:	91 e0       	ldi	r25, 0x01	; 1
    13c8:	0e 94 c0 05 	call	0xb80	; 0xb80 <gpio_set_pin_direction>
    EICRA |= (0b10 << ISC00);
    13cc:	e9 e6       	ldi	r30, 0x69	; 105
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	82 60       	ori	r24, 0x02	; 2
    13d4:	80 83       	st	Z, r24
    EIMSK = 0x01; //0b00000001
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	8d bb       	out	0x1d, r24	; 29
	
	sei();
    13da:	78 94       	sei
	stdout = &mystdout;
    13dc:	8c e2       	ldi	r24, 0x2C	; 44
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	90 93 eb 05 	sts	0x05EB, r25	; 0x8005eb <__iob+0x3>
    13e4:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <__iob+0x2>
	//rtc_set(&sys_rtc);
	rtc_int_enable(&sys_rtc ,0);
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	88 e1       	ldi	r24, 0x18	; 24
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	0e 94 02 06 	call	0xc04	; 0xc04 <rtc_int_enable>
	adc_init();
    13f4:	0e 94 35 05 	call	0xa6a	; 0xa6a <adc_init>
	spi1_init();
    13f8:	0e 94 50 07 	call	0xea0	; 0xea0 <spi1_init>
	lcd_gpio_init();
    13fc:	0e 94 76 05 	call	0xaec	; 0xaec <lcd_gpio_init>
	//u8g2_Setup_st7565_zolen_128x64_f( &lcd, U8G2_MIRROR_VERTICAL, lcd_hw_spi, fake_delay_fn);					//HW SPI
	//u8g2_Setup_st7565_zolen_128x64_f(&lcd, U8G2_MIRROR_VERTICAL, u8x8_byte_4wire_sw_spi, lcd_software_spi);	//SW SPI
	
	
	//OLED display
	u8g2_Setup_ssd1306_i2c_128x32_univision_f(&lcd, U8G2_R0, u8x8_byte_sw_i2c, fake_delay_fn);
    1400:	25 e9       	ldi	r18, 0x95	; 149
    1402:	35 e0       	ldi	r19, 0x05	; 5
    1404:	45 e3       	ldi	r20, 0x35	; 53
    1406:	52 e1       	ldi	r21, 0x12	; 18
    1408:	6d e1       	ldi	r22, 0x1D	; 29
    140a:	72 e0       	ldi	r23, 0x02	; 2
    140c:	82 e3       	ldi	r24, 0x32	; 50
    140e:	95 e0       	ldi	r25, 0x05	; 5
    1410:	0e 94 55 0b 	call	0x16aa	; 0x16aa <u8g2_Setup_ssd1306_i2c_128x32_univision_f>
	//u8x8_byte_stm32hal_hw_i2c
	u8g2_SetI2CAddress(&lcd, 0x3C);
    1414:	8c e3       	ldi	r24, 0x3C	; 60
    1416:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <lcd+0x16>
	//End of OLED Display
	
	
	
	
	sleep_enable();
    141a:	83 b7       	in	r24, 0x33	; 51
    141c:	81 60       	ori	r24, 0x01	; 1
    141e:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1420:	83 b7       	in	r24, 0x33	; 51
    1422:	81 7f       	andi	r24, 0xF1	; 241
    1424:	84 60       	ori	r24, 0x04	; 4
    1426:	83 bf       	out	0x33, r24	; 51
	uart_send_string((uint8_t *)"\rReady\n\r");
    1428:	86 ec       	ldi	r24, 0xC6	; 198
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	0e 94 83 09 	call	0x1306	; 0x1306 <uart_send_string>
	u8g2_InitDisplay(&lcd);
    1430:	82 e3       	ldi	r24, 0x32	; 50
    1432:	95 e0       	ldi	r25, 0x05	; 5
    1434:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&lcd, 0);
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	82 e3       	ldi	r24, 0x32	; 50
    143c:	95 e0       	ldi	r25, 0x05	; 5
    143e:	0e 94 05 14 	call	0x280a	; 0x280a <u8x8_SetPowerSave>
	u8g2_SetFlipMode(&lcd, 1);
    1442:	61 e0       	ldi	r22, 0x01	; 1
    1444:	82 e3       	ldi	r24, 0x32	; 50
    1446:	95 e0       	ldi	r25, 0x05	; 5
    1448:	0e 94 10 14 	call	0x2820	; 0x2820 <u8x8_SetFlipMode>
	u8g2_SetContrast(&lcd, 120);
    144c:	68 e7       	ldi	r22, 0x78	; 120
    144e:	82 e3       	ldi	r24, 0x32	; 50
    1450:	95 e0       	ldi	r25, 0x05	; 5
    1452:	0e 94 1b 14 	call	0x2836	; 0x2836 <u8x8_SetContrast>
	u8g2_ClearBuffer(&lcd);
    1456:	82 e3       	ldi	r24, 0x32	; 50
    1458:	95 e0       	ldi	r25, 0x05	; 5
    145a:	0e 94 2e 0b 	call	0x165c	; 0x165c <u8g2_ClearBuffer>
	//u8g2_SetFont(&lcd, u8g2_font_5x8_t_cyrillic);
	u8g2_SetFont(&lcd, u8g2_font_6x10_mf);
    145e:	64 eb       	ldi	r22, 0xB4	; 180
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	82 e3       	ldi	r24, 0x32	; 50
    1464:	95 e0       	ldi	r25, 0x05	; 5
    1466:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <u8g2_SetFont>
	//u8g2_SetFont(&lcd, u8g2_font_ncenB14_tr);
	u8g2_DrawStr(&lcd, 1, 10, (void *)"RX MODULE");
    146a:	2f ec       	ldi	r18, 0xCF	; 207
    146c:	31 e0       	ldi	r19, 0x01	; 1
    146e:	4a e0       	ldi	r20, 0x0A	; 10
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	61 e0       	ldi	r22, 0x01	; 1
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	82 e3       	ldi	r24, 0x32	; 50
    1478:	95 e0       	ldi	r25, 0x05	; 5
    147a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <u8g2_DrawStr>
	u8g2_SendBuffer(&lcd);
    147e:	82 e3       	ldi	r24, 0x32	; 50
    1480:	95 e0       	ldi	r25, 0x05	; 5
    1482:	0e 94 44 0b 	call	0x1688	; 0x1688 <u8g2_SendBuffer>
			
			rtc_sync(&sys_rtc);
			BAT_VOLT = get_mVolt(ADC5_PIN);
			rtc_int_request = 0;
			//sprintf(char_array, "Time: %02d-%02d-20%02d; %02d:%02d:%02d; BAT: %03d\r\n", sys_rtc.date, sys_rtc.month, sys_rtc.year, sys_rtc.hour, sys_rtc.minute, sys_rtc.second, BAT_VOLT);
			sprintf(char_array, "Date: %02d-%02d-20%02d", sys_rtc.date, sys_rtc.month, sys_rtc.year);
    1486:	0f 2e       	mov	r0, r31
    1488:	f9 ed       	ldi	r31, 0xD9	; 217
    148a:	8f 2e       	mov	r8, r31
    148c:	f1 e0       	ldi	r31, 0x01	; 1
    148e:	9f 2e       	mov	r9, r31
    1490:	f0 2d       	mov	r31, r0
    1492:	8e 01       	movw	r16, r28
    1494:	0f 5f       	subi	r16, 0xFF	; 255
    1496:	1f 4f       	sbci	r17, 0xFF	; 255
			u8g2_DrawStr(&lcd, 1, 8, (void *)char_array);
			
			sprintf(char_array, "Time: %02d:%02d:%02d", sys_rtc.hour, sys_rtc.minute, sys_rtc.second);
    1498:	0f 2e       	mov	r0, r31
    149a:	f0 ef       	ldi	r31, 0xF0	; 240
    149c:	af 2e       	mov	r10, r31
    149e:	f1 e0       	ldi	r31, 0x01	; 1
    14a0:	bf 2e       	mov	r11, r31
    14a2:	f0 2d       	mov	r31, r0
			u8g2_DrawStr(&lcd, 1, 17, (void *)char_array);
			//
			sprintf(char_array, "BAT: %03d", BAT_VOLT);
    14a4:	0f 2e       	mov	r0, r31
    14a6:	f5 e0       	ldi	r31, 0x05	; 5
    14a8:	cf 2e       	mov	r12, r31
    14aa:	f2 e0       	ldi	r31, 0x02	; 2
    14ac:	df 2e       	mov	r13, r31
    14ae:	f0 2d       	mov	r31, r0
			u8g2_DrawStr(&lcd, 1, 25, (void *)char_array);
			//
			uint32_t UNIXtime = convert_to_timestamp(&sys_rtc);
			sprintf(char_array, "UNIX time %lu", UNIXtime);
    14b0:	0f 2e       	mov	r0, r31
    14b2:	ff e0       	ldi	r31, 0x0F	; 15
    14b4:	6f 2e       	mov	r6, r31
    14b6:	f2 e0       	ldi	r31, 0x02	; 2
    14b8:	7f 2e       	mov	r7, r31
    14ba:	f0 2d       	mov	r31, r0
	//u8g2_SetFont(&lcd, u8g2_font_ncenB14_tr);
	u8g2_DrawStr(&lcd, 1, 10, (void *)"RX MODULE");
	u8g2_SendBuffer(&lcd);
    while (1) 
    {
		if (rtc_int_request != 0){
    14bc:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rtc_int_request>
    14c0:	88 23       	and	r24, r24
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <main+0x18a>
    14c4:	7d c0       	rjmp	.+250    	; 0x15c0 <main+0x284>
			
			rtc_sync(&sys_rtc);
    14c6:	88 e1       	ldi	r24, 0x18	; 24
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	0e 94 30 06 	call	0xc60	; 0xc60 <rtc_sync>
			BAT_VOLT = get_mVolt(ADC5_PIN);
    14ce:	85 e0       	ldi	r24, 0x05	; 5
    14d0:	0e 94 63 05 	call	0xac6	; 0xac6 <get_mVolt>
    14d4:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <BAT_VOLT+0x1>
    14d8:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <BAT_VOLT>
			rtc_int_request = 0;
    14dc:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <rtc_int_request>
			//sprintf(char_array, "Time: %02d-%02d-20%02d; %02d:%02d:%02d; BAT: %03d\r\n", sys_rtc.date, sys_rtc.month, sys_rtc.year, sys_rtc.hour, sys_rtc.minute, sys_rtc.second, BAT_VOLT);
			sprintf(char_array, "Date: %02d-%02d-20%02d", sys_rtc.date, sys_rtc.month, sys_rtc.year);
    14e0:	0f 2e       	mov	r0, r31
    14e2:	f8 e1       	ldi	r31, 0x18	; 24
    14e4:	ef 2e       	mov	r14, r31
    14e6:	f1 e0       	ldi	r31, 0x01	; 1
    14e8:	ff 2e       	mov	r15, r31
    14ea:	f0 2d       	mov	r31, r0
    14ec:	f7 01       	movw	r30, r14
    14ee:	86 81       	ldd	r24, Z+6	; 0x06
    14f0:	8f 93       	push	r24
    14f2:	85 81       	ldd	r24, Z+5	; 0x05
    14f4:	8f 93       	push	r24
    14f6:	84 81       	ldd	r24, Z+4	; 0x04
    14f8:	1f 92       	push	r1
    14fa:	8f 93       	push	r24
    14fc:	83 81       	ldd	r24, Z+3	; 0x03
    14fe:	1f 92       	push	r1
    1500:	8f 93       	push	r24
    1502:	9f 92       	push	r9
    1504:	8f 92       	push	r8
    1506:	1f 93       	push	r17
    1508:	0f 93       	push	r16
    150a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <sprintf>
			u8g2_DrawStr(&lcd, 1, 8, (void *)char_array);
    150e:	98 01       	movw	r18, r16
    1510:	48 e0       	ldi	r20, 0x08	; 8
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	61 e0       	ldi	r22, 0x01	; 1
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	82 e3       	ldi	r24, 0x32	; 50
    151a:	95 e0       	ldi	r25, 0x05	; 5
    151c:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <u8g2_DrawStr>
			
			sprintf(char_array, "Time: %02d:%02d:%02d", sys_rtc.hour, sys_rtc.minute, sys_rtc.second);
    1520:	d7 01       	movw	r26, r14
    1522:	8c 91       	ld	r24, X
    1524:	1f 92       	push	r1
    1526:	8f 93       	push	r24
    1528:	11 96       	adiw	r26, 0x01	; 1
    152a:	8c 91       	ld	r24, X
    152c:	11 97       	sbiw	r26, 0x01	; 1
    152e:	1f 92       	push	r1
    1530:	8f 93       	push	r24
    1532:	12 96       	adiw	r26, 0x02	; 2
    1534:	8c 91       	ld	r24, X
    1536:	1f 92       	push	r1
    1538:	8f 93       	push	r24
    153a:	bf 92       	push	r11
    153c:	af 92       	push	r10
    153e:	1f 93       	push	r17
    1540:	0f 93       	push	r16
    1542:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <sprintf>
			u8g2_DrawStr(&lcd, 1, 17, (void *)char_array);
    1546:	98 01       	movw	r18, r16
    1548:	41 e1       	ldi	r20, 0x11	; 17
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	61 e0       	ldi	r22, 0x01	; 1
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	82 e3       	ldi	r24, 0x32	; 50
    1552:	95 e0       	ldi	r25, 0x05	; 5
    1554:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <u8g2_DrawStr>
			//
			sprintf(char_array, "BAT: %03d", BAT_VOLT);
    1558:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <BAT_VOLT+0x1>
    155c:	8f 93       	push	r24
    155e:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <BAT_VOLT>
    1562:	8f 93       	push	r24
    1564:	df 92       	push	r13
    1566:	cf 92       	push	r12
    1568:	1f 93       	push	r17
    156a:	0f 93       	push	r16
    156c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <sprintf>
			u8g2_DrawStr(&lcd, 1, 25, (void *)char_array);
    1570:	98 01       	movw	r18, r16
    1572:	49 e1       	ldi	r20, 0x19	; 25
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	82 e3       	ldi	r24, 0x32	; 50
    157c:	95 e0       	ldi	r25, 0x05	; 5
    157e:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <u8g2_DrawStr>
			//
			uint32_t UNIXtime = convert_to_timestamp(&sys_rtc);
    1582:	c7 01       	movw	r24, r14
    1584:	0e 94 73 06 	call	0xce6	; 0xce6 <convert_to_timestamp>
			sprintf(char_array, "UNIX time %lu", UNIXtime);
    1588:	9f 93       	push	r25
    158a:	8f 93       	push	r24
    158c:	7f 93       	push	r23
    158e:	6f 93       	push	r22
    1590:	7f 92       	push	r7
    1592:	6f 92       	push	r6
    1594:	1f 93       	push	r17
    1596:	0f 93       	push	r16
    1598:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <sprintf>
			u8g2_DrawStr(&lcd, 1, 32, (void *)char_array);
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	98 01       	movw	r18, r16
    15a8:	40 e2       	ldi	r20, 0x20	; 32
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	82 e3       	ldi	r24, 0x32	; 50
    15b2:	95 e0       	ldi	r25, 0x05	; 5
    15b4:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <u8g2_DrawStr>
			
			//if(BAT_VOLT < BAT_LOW_LEVEL){
				//_delay_ms(3);	
			//}
			//gpio_set_pin_level(&ext_led , true);
			u8g2_SendBuffer(&lcd);
    15b8:	82 e3       	ldi	r24, 0x32	; 50
    15ba:	95 e0       	ldi	r25, 0x05	; 5
    15bc:	0e 94 44 0b 	call	0x1688	; 0x1688 <u8g2_SendBuffer>
			//gpio_set_pin_level(&ext_led , false);
			
		}
		
		sleep_cpu();	
    15c0:	88 95       	sleep
    }
    15c2:	7c cf       	rjmp	.-264    	; 0x14bc <main+0x180>

000015c4 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
    15c4:	af 92       	push	r10
    15c6:	bf 92       	push	r11
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	7c 01       	movw	r14, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
    15da:	dc 01       	movw	r26, r24
    15dc:	94 96       	adiw	r26, 0x24	; 36
    15de:	bc 90       	ld	r11, X
    15e0:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
    15e2:	95 96       	adiw	r26, 0x25	; 37
    15e4:	dc 91       	ld	r29, X
    15e6:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    15e8:	ed 91       	ld	r30, X+
    15ea:	fc 91       	ld	r31, X
    15ec:	a1 88       	ldd	r10, Z+17	; 0x11
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
    15ee:	cd 2f       	mov	r28, r29
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    15f0:	c1 2c       	mov	r12, r1
    15f2:	d1 2c       	mov	r13, r1
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    15f4:	d7 01       	movw	r26, r14
    15f6:	ed 91       	ld	r30, X+
    15f8:	fc 91       	ld	r31, X
    15fa:	11 97       	sbiw	r26, 0x01	; 1
    15fc:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
    15fe:	92 96       	adiw	r26, 0x22	; 34
    1600:	0d 91       	ld	r16, X+
    1602:	1c 91       	ld	r17, X
    1604:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    1606:	42 2f       	mov	r20, r18
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	44 0f       	add	r20, r20
    160c:	55 1f       	adc	r21, r21
    160e:	44 0f       	add	r20, r20
    1610:	55 1f       	adc	r21, r21
    1612:	44 0f       	add	r20, r20
    1614:	55 1f       	adc	r21, r21
    1616:	4c 9d       	mul	r20, r12
    1618:	c0 01       	movw	r24, r0
    161a:	4d 9d       	mul	r20, r13
    161c:	90 0d       	add	r25, r0
    161e:	5c 9d       	mul	r21, r12
    1620:	90 0d       	add	r25, r0
    1622:	11 24       	eor	r1, r1
    1624:	08 0f       	add	r16, r24
    1626:	19 1f       	adc	r17, r25
    1628:	4c 2f       	mov	r20, r28
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	c7 01       	movw	r24, r14
    162e:	0e 94 cc 13 	call	0x2798	; 0x2798 <u8x8_DrawTile>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
    1632:	cf 5f       	subi	r28, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
    1634:	8c 2f       	mov	r24, r28
    1636:	8d 1b       	sub	r24, r29
    1638:	8b 15       	cp	r24, r11
    163a:	28 f4       	brcc	.+10     	; 0x1646 <u8g2_send_buffer+0x82>
    163c:	bf ef       	ldi	r27, 0xFF	; 255
    163e:	cb 1a       	sub	r12, r27
    1640:	db 0a       	sbc	r13, r27
    1642:	ca 15       	cp	r28, r10
    1644:	b8 f2       	brcs	.-82     	; 0x15f4 <u8g2_send_buffer+0x30>
}
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	ff 90       	pop	r15
    1650:	ef 90       	pop	r14
    1652:	df 90       	pop	r13
    1654:	cf 90       	pop	r12
    1656:	bf 90       	pop	r11
    1658:	af 90       	pop	r10
    165a:	08 95       	ret

0000165c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
    165c:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    165e:	a0 81       	ld	r26, Z
    1660:	b1 81       	ldd	r27, Z+1	; 0x01
    1662:	50 96       	adiw	r26, 0x10	; 16
    1664:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
    1666:	44 a1       	ldd	r20, Z+36	; 0x24
    1668:	94 9f       	mul	r25, r20
    166a:	a0 01       	movw	r20, r0
    166c:	11 24       	eor	r1, r1
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    166e:	44 0f       	add	r20, r20
    1670:	55 1f       	adc	r21, r21
    1672:	44 0f       	add	r20, r20
    1674:	55 1f       	adc	r21, r21
    1676:	44 0f       	add	r20, r20
    1678:	55 1f       	adc	r21, r21
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	82 a1       	ldd	r24, Z+34	; 0x22
    1680:	93 a1       	ldd	r25, Z+35	; 0x23
    1682:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <memset>
    1686:	08 95       	ret

00001688 <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
    168e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    1692:	ce 01       	movw	r24, r28
    1694:	0e 94 26 14 	call	0x284c	; 0x284c <u8x8_RefreshDisplay>
}
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	08 95       	ret

0000169e <u8g2_m_16_4_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
    169e:	24 e0       	ldi	r18, 0x04	; 4
    16a0:	fc 01       	movw	r30, r24
    16a2:	20 83       	st	Z, r18
  return buf;
  #endif
}
    16a4:	80 e1       	ldi	r24, 0x10	; 16
    16a6:	93 e0       	ldi	r25, 0x03	; 3
    16a8:	08 95       	ret

000016aa <u8g2_Setup_ssd1306_i2c_128x32_univision_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x32_univision_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    16aa:	cf 92       	push	r12
    16ac:	df 92       	push	r13
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	1f 92       	push	r1
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	7c 01       	movw	r14, r24
    16c2:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    16c4:	89 01       	movw	r16, r18
    16c6:	9a 01       	movw	r18, r20
    16c8:	41 e1       	ldi	r20, 0x11	; 17
    16ca:	53 e1       	ldi	r21, 0x13	; 19
    16cc:	62 ec       	ldi	r22, 0xC2	; 194
    16ce:	74 e1       	ldi	r23, 0x14	; 20
    16d0:	0e 94 ef 14 	call	0x29de	; 0x29de <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
    16d4:	ce 01       	movw	r24, r28
    16d6:	01 96       	adiw	r24, 0x01	; 1
    16d8:	0e 94 4f 0b 	call	0x169e	; 0x169e <u8g2_m_16_4_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    16dc:	86 01       	movw	r16, r12
    16de:	28 e8       	ldi	r18, 0x88	; 136
    16e0:	30 e1       	ldi	r19, 0x10	; 16
    16e2:	49 81       	ldd	r20, Y+1	; 0x01
    16e4:	bc 01       	movw	r22, r24
    16e6:	c7 01       	movw	r24, r14
    16e8:	0e 94 c5 11 	call	0x238a	; 0x238a <u8g2_SetupBuffer>
}
    16ec:	0f 90       	pop	r0
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	ff 90       	pop	r15
    16f8:	ef 90       	pop	r14
    16fa:	df 90       	pop	r13
    16fc:	cf 90       	pop	r12
    16fe:	08 95       	ret

00001700 <u8g2_font_get_word>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
    1700:	fc 01       	movw	r30, r24
    1702:	e6 0f       	add	r30, r22
    1704:	f1 1d       	adc	r31, r1
    1706:	84 91       	lpm	r24, Z
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	98 2f       	mov	r25, r24
    170c:	88 27       	eor	r24, r24
    170e:	31 96       	adiw	r30, 0x01	; 1
    1710:	e4 91       	lpm	r30, Z
    1712:	8e 0f       	add	r24, r30
    1714:	91 1d       	adc	r25, r1
    1716:	08 95       	ret

00001718 <u8g2_font_calc_vref_font>:
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	08 95       	ret

0000171e <u8g2_read_font_info>:
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	ec 01       	movw	r28, r24
    1728:	8b 01       	movw	r16, r22
    172a:	fb 01       	movw	r30, r22
    172c:	84 91       	lpm	r24, Z
    172e:	88 83       	st	Y, r24
    1730:	31 96       	adiw	r30, 0x01	; 1
    1732:	e4 91       	lpm	r30, Z
    1734:	e9 83       	std	Y+1, r30	; 0x01
    1736:	fb 01       	movw	r30, r22
    1738:	32 96       	adiw	r30, 0x02	; 2
    173a:	e4 91       	lpm	r30, Z
    173c:	ea 83       	std	Y+2, r30	; 0x02
    173e:	fb 01       	movw	r30, r22
    1740:	33 96       	adiw	r30, 0x03	; 3
    1742:	e4 91       	lpm	r30, Z
    1744:	eb 83       	std	Y+3, r30	; 0x03
    1746:	fb 01       	movw	r30, r22
    1748:	34 96       	adiw	r30, 0x04	; 4
    174a:	e4 91       	lpm	r30, Z
    174c:	ec 83       	std	Y+4, r30	; 0x04
    174e:	fb 01       	movw	r30, r22
    1750:	35 96       	adiw	r30, 0x05	; 5
    1752:	e4 91       	lpm	r30, Z
    1754:	ed 83       	std	Y+5, r30	; 0x05
    1756:	fb 01       	movw	r30, r22
    1758:	36 96       	adiw	r30, 0x06	; 6
    175a:	e4 91       	lpm	r30, Z
    175c:	ee 83       	std	Y+6, r30	; 0x06
    175e:	fb 01       	movw	r30, r22
    1760:	37 96       	adiw	r30, 0x07	; 7
    1762:	e4 91       	lpm	r30, Z
    1764:	ef 83       	std	Y+7, r30	; 0x07
    1766:	fb 01       	movw	r30, r22
    1768:	38 96       	adiw	r30, 0x08	; 8
    176a:	e4 91       	lpm	r30, Z
    176c:	e8 87       	std	Y+8, r30	; 0x08
    176e:	fb 01       	movw	r30, r22
    1770:	39 96       	adiw	r30, 0x09	; 9
    1772:	e4 91       	lpm	r30, Z
    1774:	e9 87       	std	Y+9, r30	; 0x09
    1776:	fb 01       	movw	r30, r22
    1778:	3a 96       	adiw	r30, 0x0a	; 10
    177a:	e4 91       	lpm	r30, Z
    177c:	ea 87       	std	Y+10, r30	; 0x0a
    177e:	fb 01       	movw	r30, r22
    1780:	3b 96       	adiw	r30, 0x0b	; 11
    1782:	e4 91       	lpm	r30, Z
    1784:	eb 87       	std	Y+11, r30	; 0x0b
    1786:	fb 01       	movw	r30, r22
    1788:	3c 96       	adiw	r30, 0x0c	; 12
    178a:	e4 91       	lpm	r30, Z
    178c:	ec 87       	std	Y+12, r30	; 0x0c
    178e:	fb 01       	movw	r30, r22
    1790:	3d 96       	adiw	r30, 0x0d	; 13
    1792:	e4 91       	lpm	r30, Z
    1794:	ed 87       	std	Y+13, r30	; 0x0d
    1796:	fb 01       	movw	r30, r22
    1798:	3e 96       	adiw	r30, 0x0e	; 14
    179a:	e4 91       	lpm	r30, Z
    179c:	ee 87       	std	Y+14, r30	; 0x0e
    179e:	fb 01       	movw	r30, r22
    17a0:	3f 96       	adiw	r30, 0x0f	; 15
    17a2:	e4 91       	lpm	r30, Z
    17a4:	ef 87       	std	Y+15, r30	; 0x0f
    17a6:	fb 01       	movw	r30, r22
    17a8:	70 96       	adiw	r30, 0x10	; 16
    17aa:	e4 91       	lpm	r30, Z
    17ac:	e8 8b       	std	Y+16, r30	; 0x10
    17ae:	61 e1       	ldi	r22, 0x11	; 17
    17b0:	c8 01       	movw	r24, r16
    17b2:	0e 94 80 0b 	call	0x1700	; 0x1700 <u8g2_font_get_word>
    17b6:	9a 8b       	std	Y+18, r25	; 0x12
    17b8:	89 8b       	std	Y+17, r24	; 0x11
    17ba:	63 e1       	ldi	r22, 0x13	; 19
    17bc:	c8 01       	movw	r24, r16
    17be:	0e 94 80 0b 	call	0x1700	; 0x1700 <u8g2_font_get_word>
    17c2:	9c 8b       	std	Y+20, r25	; 0x14
    17c4:	8b 8b       	std	Y+19, r24	; 0x13
    17c6:	65 e1       	ldi	r22, 0x15	; 21
    17c8:	c8 01       	movw	r24, r16
    17ca:	0e 94 80 0b 	call	0x1700	; 0x1700 <u8g2_font_get_word>
    17ce:	9e 8b       	std	Y+22, r25	; 0x16
    17d0:	8d 8b       	std	Y+21, r24	; 0x15
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	08 95       	ret

000017dc <u8g2_font_decode_get_unsigned_bits>:
    17dc:	dc 01       	movw	r26, r24
    17de:	1a 96       	adiw	r26, 0x0a	; 10
    17e0:	9c 91       	ld	r25, X
    17e2:	1a 97       	sbiw	r26, 0x0a	; 10
    17e4:	ed 91       	ld	r30, X+
    17e6:	fc 91       	ld	r31, X
    17e8:	11 97       	sbiw	r26, 0x01	; 1
    17ea:	24 91       	lpm	r18, Z
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	09 2e       	mov	r0, r25
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <u8g2_font_decode_get_unsigned_bits+0x1a>
    17f2:	35 95       	asr	r19
    17f4:	27 95       	ror	r18
    17f6:	0a 94       	dec	r0
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <u8g2_font_decode_get_unsigned_bits+0x16>
    17fa:	89 2f       	mov	r24, r25
    17fc:	86 0f       	add	r24, r22
    17fe:	88 30       	cpi	r24, 0x08	; 8
    1800:	10 f4       	brcc	.+4      	; 0x1806 <u8g2_font_decode_get_unsigned_bits+0x2a>
    1802:	e2 2f       	mov	r30, r18
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <u8g2_font_decode_get_unsigned_bits+0x48>
    1806:	31 96       	adiw	r30, 0x01	; 1
    1808:	11 96       	adiw	r26, 0x01	; 1
    180a:	fc 93       	st	X, r31
    180c:	ee 93       	st	-X, r30
    180e:	e4 91       	lpm	r30, Z
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	38 e0       	ldi	r19, 0x08	; 8
    1814:	39 1b       	sub	r19, r25
    1816:	02 c0       	rjmp	.+4      	; 0x181c <u8g2_font_decode_get_unsigned_bits+0x40>
    1818:	ee 0f       	add	r30, r30
    181a:	ff 1f       	adc	r31, r31
    181c:	3a 95       	dec	r19
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <u8g2_font_decode_get_unsigned_bits+0x3c>
    1820:	e2 2b       	or	r30, r18
    1822:	88 50       	subi	r24, 0x08	; 8
    1824:	1a 96       	adiw	r26, 0x0a	; 10
    1826:	8c 93       	st	X, r24
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <u8g2_font_decode_get_unsigned_bits+0x56>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	6a 95       	dec	r22
    1834:	e2 f7       	brpl	.-8      	; 0x182e <u8g2_font_decode_get_unsigned_bits+0x52>
    1836:	81 50       	subi	r24, 0x01	; 1
    1838:	8e 23       	and	r24, r30
    183a:	08 95       	ret

0000183c <u8g2_font_setup_decode>:
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	8c 01       	movw	r16, r24
    1846:	ec 01       	movw	r28, r24
    1848:	c8 5b       	subi	r28, 0xB8	; 184
    184a:	df 4f       	sbci	r29, 0xFF	; 255
    184c:	79 83       	std	Y+1, r23	; 0x01
    184e:	68 83       	st	Y, r22
    1850:	1a 86       	std	Y+10, r1	; 0x0a
    1852:	fc 01       	movw	r30, r24
    1854:	e5 5a       	subi	r30, 0xA5	; 165
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	60 81       	ld	r22, Z
    185a:	ce 01       	movw	r24, r28
    185c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <u8g2_font_decode_get_unsigned_bits>
    1860:	88 87       	std	Y+8, r24	; 0x08
    1862:	f8 01       	movw	r30, r16
    1864:	e4 5a       	subi	r30, 0xA4	; 164
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	60 81       	ld	r22, Z
    186a:	ce 01       	movw	r24, r28
    186c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <u8g2_font_decode_get_unsigned_bits>
    1870:	89 87       	std	Y+9, r24	; 0x09
    1872:	f8 01       	movw	r30, r16
    1874:	ec 58       	subi	r30, 0x8C	; 140
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 81       	ld	r24, Z
    187a:	8c 87       	std	Y+12, r24	; 0x0c
    187c:	91 e0       	ldi	r25, 0x01	; 1
    187e:	81 11       	cpse	r24, r1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	9d 87       	std	Y+13, r25	; 0x0d
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	08 95       	ret

0000188e <u8g2_font_decode_get_signed_bits>:
    188e:	cf 93       	push	r28
    1890:	c6 2f       	mov	r28, r22
    1892:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <u8g2_font_decode_get_unsigned_bits>
    1896:	c1 50       	subi	r28, 0x01	; 1
    1898:	21 e0       	ldi	r18, 0x01	; 1
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <u8g2_font_decode_get_signed_bits+0x14>
    189e:	22 0f       	add	r18, r18
    18a0:	33 1f       	adc	r19, r19
    18a2:	ca 95       	dec	r28
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <u8g2_font_decode_get_signed_bits+0x10>
    18a6:	82 1b       	sub	r24, r18
    18a8:	cf 91       	pop	r28
    18aa:	08 95       	ret

000018ac <u8g2_add_vector_y>:
    18ac:	21 30       	cpi	r18, 0x01	; 1
    18ae:	49 f0       	breq	.+18     	; 0x18c2 <u8g2_add_vector_y+0x16>
    18b0:	18 f0       	brcs	.+6      	; 0x18b8 <u8g2_add_vector_y+0xc>
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	59 f0       	breq	.+22     	; 0x18cc <u8g2_add_vector_y+0x20>
    18b6:	0f c0       	rjmp	.+30     	; 0x18d6 <u8g2_add_vector_y+0x2a>
    18b8:	84 0f       	add	r24, r20
    18ba:	91 1d       	adc	r25, r1
    18bc:	47 fd       	sbrc	r20, 7
    18be:	9a 95       	dec	r25
    18c0:	08 95       	ret
    18c2:	86 0f       	add	r24, r22
    18c4:	91 1d       	adc	r25, r1
    18c6:	67 fd       	sbrc	r22, 7
    18c8:	9a 95       	dec	r25
    18ca:	08 95       	ret
    18cc:	84 1b       	sub	r24, r20
    18ce:	91 09       	sbc	r25, r1
    18d0:	47 fd       	sbrc	r20, 7
    18d2:	93 95       	inc	r25
    18d4:	08 95       	ret
    18d6:	86 1b       	sub	r24, r22
    18d8:	91 09       	sbc	r25, r1
    18da:	67 fd       	sbrc	r22, 7
    18dc:	93 95       	inc	r25
    18de:	08 95       	ret

000018e0 <u8g2_add_vector_x>:
    18e0:	21 30       	cpi	r18, 0x01	; 1
    18e2:	49 f0       	breq	.+18     	; 0x18f6 <u8g2_add_vector_x+0x16>
    18e4:	18 f0       	brcs	.+6      	; 0x18ec <u8g2_add_vector_x+0xc>
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	59 f0       	breq	.+22     	; 0x1900 <u8g2_add_vector_x+0x20>
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <u8g2_add_vector_x+0x2a>
    18ec:	86 0f       	add	r24, r22
    18ee:	91 1d       	adc	r25, r1
    18f0:	67 fd       	sbrc	r22, 7
    18f2:	9a 95       	dec	r25
    18f4:	08 95       	ret
    18f6:	84 1b       	sub	r24, r20
    18f8:	91 09       	sbc	r25, r1
    18fa:	47 fd       	sbrc	r20, 7
    18fc:	93 95       	inc	r25
    18fe:	08 95       	ret
    1900:	86 1b       	sub	r24, r22
    1902:	91 09       	sbc	r25, r1
    1904:	67 fd       	sbrc	r22, 7
    1906:	93 95       	inc	r25
    1908:	08 95       	ret
    190a:	84 0f       	add	r24, r20
    190c:	91 1d       	adc	r25, r1
    190e:	47 fd       	sbrc	r20, 7
    1910:	9a 95       	dec	r25
    1912:	08 95       	ret

00001914 <u8g2_font_decode_len>:
    1914:	2f 92       	push	r2
    1916:	3f 92       	push	r3
    1918:	4f 92       	push	r4
    191a:	5f 92       	push	r5
    191c:	6f 92       	push	r6
    191e:	7f 92       	push	r7
    1920:	8f 92       	push	r8
    1922:	9f 92       	push	r9
    1924:	af 92       	push	r10
    1926:	bf 92       	push	r11
    1928:	cf 92       	push	r12
    192a:	df 92       	push	r13
    192c:	ef 92       	push	r14
    192e:	ff 92       	push	r15
    1930:	0f 93       	push	r16
    1932:	1f 93       	push	r17
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	4c 01       	movw	r8, r24
    193a:	d6 2f       	mov	r29, r22
    193c:	34 2e       	mov	r3, r20
    193e:	fc 01       	movw	r30, r24
    1940:	e8 5b       	subi	r30, 0xB8	; 184
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	56 80       	ldd	r5, Z+6	; 0x06
    1946:	17 81       	ldd	r17, Z+7	; 0x07
    1948:	7f 01       	movw	r14, r30
    194a:	3c 01       	movw	r6, r24
    194c:	e4 e7       	ldi	r30, 0x74	; 116
    194e:	6e 0e       	add	r6, r30
    1950:	71 1c       	adc	r7, r1
    1952:	f7 01       	movw	r30, r14
    1954:	c0 85       	ldd	r28, Z+8	; 0x08
    1956:	c5 19       	sub	r28, r5
    1958:	2d 2e       	mov	r2, r29
    195a:	cd 17       	cp	r28, r29
    195c:	08 f4       	brcc	.+2      	; 0x1960 <u8g2_font_decode_len+0x4c>
    195e:	2c 2e       	mov	r2, r28
    1960:	f7 01       	movw	r30, r14
    1962:	c4 80       	ldd	r12, Z+4	; 0x04
    1964:	d5 80       	ldd	r13, Z+5	; 0x05
    1966:	06 85       	ldd	r16, Z+14	; 0x0e
    1968:	41 2e       	mov	r4, r17
    196a:	20 2f       	mov	r18, r16
    196c:	41 2f       	mov	r20, r17
    196e:	65 2d       	mov	r22, r5
    1970:	82 81       	ldd	r24, Z+2	; 0x02
    1972:	93 81       	ldd	r25, Z+3	; 0x03
    1974:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <u8g2_add_vector_x>
    1978:	5c 01       	movw	r10, r24
    197a:	20 2f       	mov	r18, r16
    197c:	41 2f       	mov	r20, r17
    197e:	65 2d       	mov	r22, r5
    1980:	c6 01       	movw	r24, r12
    1982:	0e 94 56 0c 	call	0x18ac	; 0x18ac <u8g2_add_vector_y>
    1986:	33 20       	and	r3, r3
    1988:	61 f0       	breq	.+24     	; 0x19a2 <u8g2_font_decode_len+0x8e>
    198a:	f7 01       	movw	r30, r14
    198c:	24 85       	ldd	r18, Z+12	; 0x0c
    198e:	f3 01       	movw	r30, r6
    1990:	20 83       	st	Z, r18
    1992:	22 2d       	mov	r18, r2
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	ac 01       	movw	r20, r24
    1998:	b5 01       	movw	r22, r10
    199a:	c4 01       	movw	r24, r8
    199c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <u8g2_DrawHVLine>
    19a0:	0e c0       	rjmp	.+28     	; 0x19be <u8g2_font_decode_len+0xaa>
    19a2:	f7 01       	movw	r30, r14
    19a4:	23 85       	ldd	r18, Z+11	; 0x0b
    19a6:	21 11       	cpse	r18, r1
    19a8:	0a c0       	rjmp	.+20     	; 0x19be <u8g2_font_decode_len+0xaa>
    19aa:	25 85       	ldd	r18, Z+13	; 0x0d
    19ac:	f3 01       	movw	r30, r6
    19ae:	20 83       	st	Z, r18
    19b0:	22 2d       	mov	r18, r2
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	ac 01       	movw	r20, r24
    19b6:	b5 01       	movw	r22, r10
    19b8:	c4 01       	movw	r24, r8
    19ba:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <u8g2_DrawHVLine>
    19be:	dc 17       	cp	r29, r28
    19c0:	20 f0       	brcs	.+8      	; 0x19ca <u8g2_font_decode_len+0xb6>
    19c2:	dc 1b       	sub	r29, r28
    19c4:	1f 5f       	subi	r17, 0xFF	; 255
    19c6:	51 2c       	mov	r5, r1
    19c8:	c4 cf       	rjmp	.-120    	; 0x1952 <u8g2_font_decode_len+0x3e>
    19ca:	f4 01       	movw	r30, r8
    19cc:	e8 5b       	subi	r30, 0xB8	; 184
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	d5 0d       	add	r29, r5
    19d2:	d6 83       	std	Z+6, r29	; 0x06
    19d4:	47 82       	std	Z+7, r4	; 0x07
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	cf 90       	pop	r12
    19e6:	bf 90       	pop	r11
    19e8:	af 90       	pop	r10
    19ea:	9f 90       	pop	r9
    19ec:	8f 90       	pop	r8
    19ee:	7f 90       	pop	r7
    19f0:	6f 90       	pop	r6
    19f2:	5f 90       	pop	r5
    19f4:	4f 90       	pop	r4
    19f6:	3f 90       	pop	r3
    19f8:	2f 90       	pop	r2
    19fa:	08 95       	ret

000019fc <u8g2_font_decode_glyph>:
    19fc:	6f 92       	push	r6
    19fe:	7f 92       	push	r7
    1a00:	8f 92       	push	r8
    1a02:	9f 92       	push	r9
    1a04:	af 92       	push	r10
    1a06:	bf 92       	push	r11
    1a08:	cf 92       	push	r12
    1a0a:	df 92       	push	r13
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	ec 01       	movw	r28, r24
    1a1a:	7c 01       	movw	r14, r24
    1a1c:	88 e4       	ldi	r24, 0x48	; 72
    1a1e:	e8 0e       	add	r14, r24
    1a20:	f1 1c       	adc	r15, r1
    1a22:	ce 01       	movw	r24, r28
    1a24:	0e 94 1e 0c 	call	0x183c	; 0x183c <u8g2_font_setup_decode>
    1a28:	fe 01       	movw	r30, r28
    1a2a:	ef 5a       	subi	r30, 0xAF	; 175
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	60 80       	ld	r6, Z
    1a30:	3c 96       	adiw	r30, 0x0c	; 12
    1a32:	60 81       	ld	r22, Z
    1a34:	c7 01       	movw	r24, r14
    1a36:	0e 94 47 0c 	call	0x188e	; 0x188e <u8g2_font_decode_get_signed_bits>
    1a3a:	98 2e       	mov	r9, r24
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e2 5a       	subi	r30, 0xA2	; 162
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	60 81       	ld	r22, Z
    1a44:	c7 01       	movw	r24, r14
    1a46:	0e 94 47 0c 	call	0x188e	; 0x188e <u8g2_font_decode_get_signed_bits>
    1a4a:	18 2f       	mov	r17, r24
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e1 5a       	subi	r30, 0xA1	; 161
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	60 81       	ld	r22, Z
    1a54:	c7 01       	movw	r24, r14
    1a56:	0e 94 47 0c 	call	0x188e	; 0x188e <u8g2_font_decode_get_signed_bits>
    1a5a:	78 2e       	mov	r7, r24
    1a5c:	f7 01       	movw	r30, r14
    1a5e:	80 84       	ldd	r8, Z+8	; 0x08
    1a60:	18 14       	cp	r1, r8
    1a62:	0c f0       	brlt	.+2      	; 0x1a66 <u8g2_font_decode_glyph+0x6a>
    1a64:	a4 c0       	rjmp	.+328    	; 0x1bae <u8g2_font_decode_glyph+0x1b2>
    1a66:	06 85       	ldd	r16, Z+14	; 0x0e
    1a68:	16 0d       	add	r17, r6
    1a6a:	11 95       	neg	r17
    1a6c:	20 2f       	mov	r18, r16
    1a6e:	41 2f       	mov	r20, r17
    1a70:	69 2d       	mov	r22, r9
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	93 81       	ldd	r25, Z+3	; 0x03
    1a76:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <u8g2_add_vector_x>
    1a7a:	6c 01       	movw	r12, r24
    1a7c:	f7 01       	movw	r30, r14
    1a7e:	93 83       	std	Z+3, r25	; 0x03
    1a80:	82 83       	std	Z+2, r24	; 0x02
    1a82:	20 2f       	mov	r18, r16
    1a84:	41 2f       	mov	r20, r17
    1a86:	69 2d       	mov	r22, r9
    1a88:	84 81       	ldd	r24, Z+4	; 0x04
    1a8a:	95 81       	ldd	r25, Z+5	; 0x05
    1a8c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <u8g2_add_vector_y>
    1a90:	f7 01       	movw	r30, r14
    1a92:	95 83       	std	Z+5, r25	; 0x05
    1a94:	84 83       	std	Z+4, r24	; 0x04
    1a96:	01 30       	cpi	r16, 0x01	; 1
    1a98:	89 f0       	breq	.+34     	; 0x1abc <u8g2_font_decode_glyph+0xc0>
    1a9a:	28 f0       	brcs	.+10     	; 0x1aa6 <u8g2_font_decode_glyph+0xaa>
    1a9c:	02 30       	cpi	r16, 0x02	; 2
    1a9e:	f9 f0       	breq	.+62     	; 0x1ade <u8g2_font_decode_glyph+0xe2>
    1aa0:	03 30       	cpi	r16, 0x03	; 3
    1aa2:	99 f1       	breq	.+102    	; 0x1b0a <u8g2_font_decode_glyph+0x10e>
    1aa4:	43 c0       	rjmp	.+134    	; 0x1b2c <u8g2_font_decode_glyph+0x130>
    1aa6:	96 01       	movw	r18, r12
    1aa8:	28 0d       	add	r18, r8
    1aaa:	31 1d       	adc	r19, r1
    1aac:	87 fc       	sbrc	r8, 7
    1aae:	3a 95       	dec	r19
    1ab0:	8c 01       	movw	r16, r24
    1ab2:	06 0d       	add	r16, r6
    1ab4:	11 1d       	adc	r17, r1
    1ab6:	67 fc       	sbrc	r6, 7
    1ab8:	1a 95       	dec	r17
    1aba:	3a c0       	rjmp	.+116    	; 0x1b30 <u8g2_font_decode_glyph+0x134>
    1abc:	41 e0       	ldi	r20, 0x01	; 1
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	46 19       	sub	r20, r6
    1ac2:	51 09       	sbc	r21, r1
    1ac4:	67 fc       	sbrc	r6, 7
    1ac6:	53 95       	inc	r21
    1ac8:	96 01       	movw	r18, r12
    1aca:	2f 5f       	subi	r18, 0xFF	; 255
    1acc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ace:	8c 01       	movw	r16, r24
    1ad0:	08 0d       	add	r16, r8
    1ad2:	11 1d       	adc	r17, r1
    1ad4:	87 fc       	sbrc	r8, 7
    1ad6:	1a 95       	dec	r17
    1ad8:	c4 0e       	add	r12, r20
    1ada:	d5 1e       	adc	r13, r21
    1adc:	29 c0       	rjmp	.+82     	; 0x1b30 <u8g2_font_decode_glyph+0x134>
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	ba 01       	movw	r22, r20
    1ae4:	68 19       	sub	r22, r8
    1ae6:	71 09       	sbc	r23, r1
    1ae8:	87 fc       	sbrc	r8, 7
    1aea:	73 95       	inc	r23
    1aec:	96 01       	movw	r18, r12
    1aee:	2f 5f       	subi	r18, 0xFF	; 255
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	46 19       	sub	r20, r6
    1af4:	51 09       	sbc	r21, r1
    1af6:	67 fc       	sbrc	r6, 7
    1af8:	53 95       	inc	r21
    1afa:	8c 01       	movw	r16, r24
    1afc:	0f 5f       	subi	r16, 0xFF	; 255
    1afe:	1f 4f       	sbci	r17, 0xFF	; 255
    1b00:	84 0f       	add	r24, r20
    1b02:	95 1f       	adc	r25, r21
    1b04:	c6 0e       	add	r12, r22
    1b06:	d7 1e       	adc	r13, r23
    1b08:	13 c0       	rjmp	.+38     	; 0x1b30 <u8g2_font_decode_glyph+0x134>
    1b0a:	96 01       	movw	r18, r12
    1b0c:	26 0d       	add	r18, r6
    1b0e:	31 1d       	adc	r19, r1
    1b10:	67 fc       	sbrc	r6, 7
    1b12:	3a 95       	dec	r19
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	48 19       	sub	r20, r8
    1b1a:	51 09       	sbc	r21, r1
    1b1c:	87 fc       	sbrc	r8, 7
    1b1e:	53 95       	inc	r21
    1b20:	8c 01       	movw	r16, r24
    1b22:	0f 5f       	subi	r16, 0xFF	; 255
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
    1b26:	84 0f       	add	r24, r20
    1b28:	95 1f       	adc	r25, r21
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <u8g2_font_decode_glyph+0x134>
    1b2c:	8c 01       	movw	r16, r24
    1b2e:	96 01       	movw	r18, r12
    1b30:	ac 01       	movw	r20, r24
    1b32:	b6 01       	movw	r22, r12
    1b34:	ce 01       	movw	r24, r28
    1b36:	0e 94 63 10 	call	0x20c6	; 0x20c6 <u8g2_IsIntersection>
    1b3a:	88 23       	and	r24, r24
    1b3c:	c1 f1       	breq	.+112    	; 0x1bae <u8g2_font_decode_glyph+0x1b2>
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e8 5b       	subi	r30, 0xB8	; 184
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	16 82       	std	Z+6, r1	; 0x06
    1b46:	17 82       	std	Z+7, r1	; 0x07
    1b48:	4e 01       	movw	r8, r28
    1b4a:	f9 e5       	ldi	r31, 0x59	; 89
    1b4c:	8f 0e       	add	r8, r31
    1b4e:	91 1c       	adc	r9, r1
    1b50:	5e 01       	movw	r10, r28
    1b52:	8a e5       	ldi	r24, 0x5A	; 90
    1b54:	a8 0e       	add	r10, r24
    1b56:	b1 1c       	adc	r11, r1
    1b58:	6e 01       	movw	r12, r28
    1b5a:	e8 e4       	ldi	r30, 0x48	; 72
    1b5c:	ce 0e       	add	r12, r30
    1b5e:	d1 1c       	adc	r13, r1
    1b60:	f4 01       	movw	r30, r8
    1b62:	60 81       	ld	r22, Z
    1b64:	c7 01       	movw	r24, r14
    1b66:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <u8g2_font_decode_get_unsigned_bits>
    1b6a:	08 2f       	mov	r16, r24
    1b6c:	f5 01       	movw	r30, r10
    1b6e:	60 81       	ld	r22, Z
    1b70:	c7 01       	movw	r24, r14
    1b72:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <u8g2_font_decode_get_unsigned_bits>
    1b76:	18 2f       	mov	r17, r24
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	60 2f       	mov	r22, r16
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <u8g2_font_decode_len>
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	61 2f       	mov	r22, r17
    1b86:	ce 01       	movw	r24, r28
    1b88:	0e 94 8a 0c 	call	0x1914	; 0x1914 <u8g2_font_decode_len>
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	c7 01       	movw	r24, r14
    1b90:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <u8g2_font_decode_get_unsigned_bits>
    1b94:	81 11       	cpse	r24, r1
    1b96:	f0 cf       	rjmp	.-32     	; 0x1b78 <u8g2_font_decode_glyph+0x17c>
    1b98:	f6 01       	movw	r30, r12
    1b9a:	87 81       	ldd	r24, Z+7	; 0x07
    1b9c:	86 15       	cp	r24, r6
    1b9e:	04 f3       	brlt	.-64     	; 0x1b60 <u8g2_font_decode_glyph+0x164>
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	ec 58       	subi	r30, 0x8C	; 140
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	c8 5b       	subi	r28, 0xB8	; 184
    1ba8:	df 4f       	sbci	r29, 0xFF	; 255
    1baa:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bac:	80 83       	st	Z, r24
    1bae:	87 2d       	mov	r24, r7
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	df 90       	pop	r13
    1bbe:	cf 90       	pop	r12
    1bc0:	bf 90       	pop	r11
    1bc2:	af 90       	pop	r10
    1bc4:	9f 90       	pop	r9
    1bc6:	8f 90       	pop	r8
    1bc8:	7f 90       	pop	r7
    1bca:	6f 90       	pop	r6
    1bcc:	08 95       	ret

00001bce <u8g2_font_get_glyph_data>:
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	fc 01       	movw	r30, r24
    1bdc:	ec 5b       	subi	r30, 0xBC	; 188
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	c0 81       	ld	r28, Z
    1be2:	d1 81       	ldd	r29, Z+1	; 0x01
    1be4:	67 96       	adiw	r28, 0x17	; 23
    1be6:	6f 3f       	cpi	r22, 0xFF	; 255
    1be8:	71 05       	cpc	r23, r1
    1bea:	11 f0       	breq	.+4      	; 0x1bf0 <u8g2_font_get_glyph_data+0x22>
    1bec:	08 f0       	brcs	.+2      	; 0x1bf0 <u8g2_font_get_glyph_data+0x22>
    1bee:	35 c0       	rjmp	.+106    	; 0x1c5a <u8g2_font_get_glyph_data+0x8c>
    1bf0:	61 36       	cpi	r22, 0x61	; 97
    1bf2:	71 05       	cpc	r23, r1
    1bf4:	30 f0       	brcs	.+12     	; 0x1c02 <u8g2_font_get_glyph_data+0x34>
    1bf6:	b6 96       	adiw	r30, 0x26	; 38
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 81       	ldd	r25, Z+1	; 0x01
    1bfc:	c8 0f       	add	r28, r24
    1bfe:	d9 1f       	adc	r29, r25
    1c00:	0a c0       	rjmp	.+20     	; 0x1c16 <u8g2_font_get_glyph_data+0x48>
    1c02:	61 34       	cpi	r22, 0x41	; 65
    1c04:	71 05       	cpc	r23, r1
    1c06:	38 f0       	brcs	.+14     	; 0x1c16 <u8g2_font_get_glyph_data+0x48>
    1c08:	fc 01       	movw	r30, r24
    1c0a:	e8 59       	subi	r30, 0x98	; 152
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	c8 0f       	add	r28, r24
    1c14:	d9 1f       	adc	r29, r25
    1c16:	ce 01       	movw	r24, r28
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	24 91       	lpm	r18, Z
    1c1e:	22 23       	and	r18, r18
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <u8g2_font_get_glyph_data+0x56>
    1c22:	5a c0       	rjmp	.+180    	; 0x1cd8 <u8g2_font_get_glyph_data+0x10a>
    1c24:	fe 01       	movw	r30, r28
    1c26:	24 91       	lpm	r18, Z
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	62 17       	cp	r22, r18
    1c2c:	73 07       	cpc	r23, r19
    1c2e:	51 f4       	brne	.+20     	; 0x1c44 <u8g2_font_get_glyph_data+0x76>
    1c30:	06 c0       	rjmp	.+12     	; 0x1c3e <u8g2_font_get_glyph_data+0x70>
    1c32:	fe 01       	movw	r30, r28
    1c34:	24 91       	lpm	r18, Z
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	62 17       	cp	r22, r18
    1c3a:	73 07       	cpc	r23, r19
    1c3c:	19 f4       	brne	.+6      	; 0x1c44 <u8g2_font_get_glyph_data+0x76>
    1c3e:	ce 01       	movw	r24, r28
    1c40:	02 96       	adiw	r24, 0x02	; 2
    1c42:	52 c0       	rjmp	.+164    	; 0x1ce8 <u8g2_font_get_glyph_data+0x11a>
    1c44:	fc 01       	movw	r30, r24
    1c46:	84 91       	lpm	r24, Z
    1c48:	c8 0f       	add	r28, r24
    1c4a:	d1 1d       	adc	r29, r1
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	fc 01       	movw	r30, r24
    1c52:	24 91       	lpm	r18, Z
    1c54:	21 11       	cpse	r18, r1
    1c56:	ed cf       	rjmp	.-38     	; 0x1c32 <u8g2_font_get_glyph_data+0x64>
    1c58:	42 c0       	rjmp	.+132    	; 0x1cde <u8g2_font_get_glyph_data+0x110>
    1c5a:	8b 01       	movw	r16, r22
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	e4 59       	subi	r30, 0x94	; 148
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	80 81       	ld	r24, Z
    1c64:	91 81       	ldd	r25, Z+1	; 0x01
    1c66:	c8 0f       	add	r28, r24
    1c68:	d9 1f       	adc	r29, r25
    1c6a:	7e 01       	movw	r14, r28
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	c7 01       	movw	r24, r14
    1c70:	0e 94 80 0b 	call	0x1700	; 0x1700 <u8g2_font_get_word>
    1c74:	c8 0f       	add	r28, r24
    1c76:	d9 1f       	adc	r29, r25
    1c78:	62 e0       	ldi	r22, 0x02	; 2
    1c7a:	c7 01       	movw	r24, r14
    1c7c:	0e 94 80 0b 	call	0x1700	; 0x1700 <u8g2_font_get_word>
    1c80:	f4 e0       	ldi	r31, 0x04	; 4
    1c82:	ef 0e       	add	r14, r31
    1c84:	f1 1c       	adc	r15, r1
    1c86:	80 17       	cp	r24, r16
    1c88:	91 07       	cpc	r25, r17
    1c8a:	80 f3       	brcs	.-32     	; 0x1c6c <u8g2_font_get_glyph_data+0x9e>
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	84 91       	lpm	r24, Z
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	98 2f       	mov	r25, r24
    1c94:	88 27       	eor	r24, r24
    1c96:	31 96       	adiw	r30, 0x01	; 1
    1c98:	e4 91       	lpm	r30, Z
    1c9a:	8e 2b       	or	r24, r30
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	11 f1       	breq	.+68     	; 0x1ce4 <u8g2_font_get_glyph_data+0x116>
    1ca0:	08 17       	cp	r16, r24
    1ca2:	19 07       	cpc	r17, r25
    1ca4:	39 f4       	brne	.+14     	; 0x1cb4 <u8g2_font_get_glyph_data+0xe6>
    1ca6:	03 c0       	rjmp	.+6      	; 0x1cae <u8g2_font_get_glyph_data+0xe0>
    1ca8:	08 17       	cp	r16, r24
    1caa:	19 07       	cpc	r17, r25
    1cac:	19 f4       	brne	.+6      	; 0x1cb4 <u8g2_font_get_glyph_data+0xe6>
    1cae:	ce 01       	movw	r24, r28
    1cb0:	03 96       	adiw	r24, 0x03	; 3
    1cb2:	1a c0       	rjmp	.+52     	; 0x1ce8 <u8g2_font_get_glyph_data+0x11a>
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	32 96       	adiw	r30, 0x02	; 2
    1cb8:	e4 91       	lpm	r30, Z
    1cba:	ce 0f       	add	r28, r30
    1cbc:	d1 1d       	adc	r29, r1
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	84 91       	lpm	r24, Z
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	98 2f       	mov	r25, r24
    1cc6:	88 27       	eor	r24, r24
    1cc8:	31 96       	adiw	r30, 0x01	; 1
    1cca:	e4 91       	lpm	r30, Z
    1ccc:	8e 2b       	or	r24, r30
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	59 f7       	brne	.-42     	; 0x1ca8 <u8g2_font_get_glyph_data+0xda>
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	08 c0       	rjmp	.+16     	; 0x1ce8 <u8g2_font_get_glyph_data+0x11a>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	05 c0       	rjmp	.+10     	; 0x1ce8 <u8g2_font_get_glyph_data+0x11a>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <u8g2_font_get_glyph_data+0x11a>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	ff 90       	pop	r15
    1cf2:	ef 90       	pop	r14
    1cf4:	08 95       	ret

00001cf6 <u8g2_DrawGlyph>:
    1cf6:	cf 92       	push	r12
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	ec 01       	movw	r28, r24
    1d08:	7b 01       	movw	r14, r22
    1d0a:	8a 01       	movw	r16, r20
    1d0c:	69 01       	movw	r12, r18
    1d0e:	fc 01       	movw	r30, r24
    1d10:	ea 5a       	subi	r30, 0xAA	; 170
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	80 81       	ld	r24, Z
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	89 f0       	breq	.+34     	; 0x1d3c <u8g2_DrawGlyph+0x46>
    1d1a:	28 f0       	brcs	.+10     	; 0x1d26 <u8g2_DrawGlyph+0x30>
    1d1c:	82 30       	cpi	r24, 0x02	; 2
    1d1e:	c9 f0       	breq	.+50     	; 0x1d52 <u8g2_DrawGlyph+0x5c>
    1d20:	83 30       	cpi	r24, 0x03	; 3
    1d22:	11 f1       	breq	.+68     	; 0x1d68 <u8g2_DrawGlyph+0x72>
    1d24:	2b c0       	rjmp	.+86     	; 0x1d7c <u8g2_DrawGlyph+0x86>
    1d26:	fe 01       	movw	r30, r28
    1d28:	ea 5b       	subi	r30, 0xBA	; 186
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	01 90       	ld	r0, Z+
    1d2e:	f0 81       	ld	r31, Z
    1d30:	e0 2d       	mov	r30, r0
    1d32:	ce 01       	movw	r24, r28
    1d34:	09 95       	icall
    1d36:	08 0f       	add	r16, r24
    1d38:	19 1f       	adc	r17, r25
    1d3a:	20 c0       	rjmp	.+64     	; 0x1d7c <u8g2_DrawGlyph+0x86>
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	ea 5b       	subi	r30, 0xBA	; 186
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	01 90       	ld	r0, Z+
    1d44:	f0 81       	ld	r31, Z
    1d46:	e0 2d       	mov	r30, r0
    1d48:	ce 01       	movw	r24, r28
    1d4a:	09 95       	icall
    1d4c:	e8 1a       	sub	r14, r24
    1d4e:	f9 0a       	sbc	r15, r25
    1d50:	15 c0       	rjmp	.+42     	; 0x1d7c <u8g2_DrawGlyph+0x86>
    1d52:	fe 01       	movw	r30, r28
    1d54:	ea 5b       	subi	r30, 0xBA	; 186
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	01 90       	ld	r0, Z+
    1d5a:	f0 81       	ld	r31, Z
    1d5c:	e0 2d       	mov	r30, r0
    1d5e:	ce 01       	movw	r24, r28
    1d60:	09 95       	icall
    1d62:	08 1b       	sub	r16, r24
    1d64:	19 0b       	sbc	r17, r25
    1d66:	0a c0       	rjmp	.+20     	; 0x1d7c <u8g2_DrawGlyph+0x86>
    1d68:	fe 01       	movw	r30, r28
    1d6a:	ea 5b       	subi	r30, 0xBA	; 186
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	01 90       	ld	r0, Z+
    1d70:	f0 81       	ld	r31, Z
    1d72:	e0 2d       	mov	r30, r0
    1d74:	ce 01       	movw	r24, r28
    1d76:	09 95       	icall
    1d78:	e8 0e       	add	r14, r24
    1d7a:	f9 1e       	adc	r15, r25
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e6 5b       	subi	r30, 0xB6	; 182
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	f1 82       	std	Z+1, r15	; 0x01
    1d84:	e0 82       	st	Z, r14
    1d86:	32 96       	adiw	r30, 0x02	; 2
    1d88:	11 83       	std	Z+1, r17	; 0x01
    1d8a:	00 83       	st	Z, r16
    1d8c:	b6 01       	movw	r22, r12
    1d8e:	ce 01       	movw	r24, r28
    1d90:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <u8g2_font_get_glyph_data>
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	41 f0       	breq	.+16     	; 0x1da8 <u8g2_DrawGlyph+0xb2>
    1d98:	bc 01       	movw	r22, r24
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <u8g2_font_decode_glyph>
    1da0:	08 2e       	mov	r0, r24
    1da2:	00 0c       	add	r0, r0
    1da4:	99 0b       	sbc	r25, r25
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <u8g2_DrawGlyph+0xb6>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	ff 90       	pop	r15
    1db6:	ef 90       	pop	r14
    1db8:	df 90       	pop	r13
    1dba:	cf 90       	pop	r12
    1dbc:	08 95       	ret

00001dbe <u8g2_draw_string>:
    1dbe:	8f 92       	push	r8
    1dc0:	9f 92       	push	r9
    1dc2:	af 92       	push	r10
    1dc4:	bf 92       	push	r11
    1dc6:	cf 92       	push	r12
    1dc8:	df 92       	push	r13
    1dca:	ef 92       	push	r14
    1dcc:	ff 92       	push	r15
    1dce:	0f 93       	push	r16
    1dd0:	1f 93       	push	r17
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	ec 01       	movw	r28, r24
    1dd8:	5b 01       	movw	r10, r22
    1dda:	6a 01       	movw	r12, r20
    1ddc:	e2 2e       	mov	r14, r18
    1dde:	f3 2e       	mov	r15, r19
    1de0:	0e 94 02 12 	call	0x2404	; 0x2404 <u8x8_utf8_init>
    1de4:	0e 2d       	mov	r16, r14
    1de6:	1f 2d       	mov	r17, r15
    1de8:	e1 2c       	mov	r14, r1
    1dea:	f1 2c       	mov	r15, r1
    1dec:	4e 01       	movw	r8, r28
    1dee:	26 e5       	ldi	r18, 0x56	; 86
    1df0:	82 0e       	add	r8, r18
    1df2:	91 1c       	adc	r9, r1
    1df4:	f8 01       	movw	r30, r16
    1df6:	61 91       	ld	r22, Z+
    1df8:	8f 01       	movw	r16, r30
    1dfa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dfc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dfe:	ce 01       	movw	r24, r28
    1e00:	09 95       	icall
    1e02:	8f 3f       	cpi	r24, 0xFF	; 255
    1e04:	ff ef       	ldi	r31, 0xFF	; 255
    1e06:	9f 07       	cpc	r25, r31
    1e08:	19 f1       	breq	.+70     	; 0x1e50 <u8g2_draw_string+0x92>
    1e0a:	8e 3f       	cpi	r24, 0xFE	; 254
    1e0c:	2f ef       	ldi	r18, 0xFF	; 255
    1e0e:	92 07       	cpc	r25, r18
    1e10:	89 f3       	breq	.-30     	; 0x1df4 <u8g2_draw_string+0x36>
    1e12:	9c 01       	movw	r18, r24
    1e14:	a6 01       	movw	r20, r12
    1e16:	b5 01       	movw	r22, r10
    1e18:	ce 01       	movw	r24, r28
    1e1a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <u8g2_DrawGlyph>
    1e1e:	9c 01       	movw	r18, r24
    1e20:	f4 01       	movw	r30, r8
    1e22:	90 81       	ld	r25, Z
    1e24:	91 30       	cpi	r25, 0x01	; 1
    1e26:	49 f0       	breq	.+18     	; 0x1e3a <u8g2_draw_string+0x7c>
    1e28:	28 f0       	brcs	.+10     	; 0x1e34 <u8g2_draw_string+0x76>
    1e2a:	92 30       	cpi	r25, 0x02	; 2
    1e2c:	49 f0       	breq	.+18     	; 0x1e40 <u8g2_draw_string+0x82>
    1e2e:	93 30       	cpi	r25, 0x03	; 3
    1e30:	51 f0       	breq	.+20     	; 0x1e46 <u8g2_draw_string+0x88>
    1e32:	0b c0       	rjmp	.+22     	; 0x1e4a <u8g2_draw_string+0x8c>
    1e34:	a2 0e       	add	r10, r18
    1e36:	b3 1e       	adc	r11, r19
    1e38:	08 c0       	rjmp	.+16     	; 0x1e4a <u8g2_draw_string+0x8c>
    1e3a:	c2 0e       	add	r12, r18
    1e3c:	d3 1e       	adc	r13, r19
    1e3e:	05 c0       	rjmp	.+10     	; 0x1e4a <u8g2_draw_string+0x8c>
    1e40:	a2 1a       	sub	r10, r18
    1e42:	b3 0a       	sbc	r11, r19
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <u8g2_draw_string+0x8c>
    1e46:	c2 1a       	sub	r12, r18
    1e48:	d3 0a       	sbc	r13, r19
    1e4a:	e2 0e       	add	r14, r18
    1e4c:	f3 1e       	adc	r15, r19
    1e4e:	d2 cf       	rjmp	.-92     	; 0x1df4 <u8g2_draw_string+0x36>
    1e50:	c7 01       	movw	r24, r14
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	ff 90       	pop	r15
    1e5c:	ef 90       	pop	r14
    1e5e:	df 90       	pop	r13
    1e60:	cf 90       	pop	r12
    1e62:	bf 90       	pop	r11
    1e64:	af 90       	pop	r10
    1e66:	9f 90       	pop	r9
    1e68:	8f 90       	pop	r8
    1e6a:	08 95       	ret

00001e6c <u8g2_DrawStr>:
    1e6c:	e5 ef       	ldi	r30, 0xF5	; 245
    1e6e:	f1 e1       	ldi	r31, 0x11	; 17
    1e70:	dc 01       	movw	r26, r24
    1e72:	13 96       	adiw	r26, 0x03	; 3
    1e74:	fc 93       	st	X, r31
    1e76:	ee 93       	st	-X, r30
    1e78:	12 97       	sbiw	r26, 0x02	; 2
    1e7a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <u8g2_draw_string>
    1e7e:	08 95       	ret

00001e80 <u8g2_UpdateRefHeight>:
    1e80:	fc 01       	movw	r30, r24
    1e82:	ec 5b       	subi	r30, 0xBC	; 188
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	20 81       	ld	r18, Z
    1e88:	31 81       	ldd	r19, Z+1	; 0x01
    1e8a:	23 2b       	or	r18, r19
    1e8c:	e1 f1       	breq	.+120    	; 0x1f06 <u8g2_UpdateRefHeight+0x86>
    1e8e:	b0 96       	adiw	r30, 0x20	; 32
    1e90:	20 81       	ld	r18, Z
    1e92:	3c 96       	adiw	r30, 0x0c	; 12
    1e94:	20 83       	st	Z, r18
    1e96:	3b 97       	sbiw	r30, 0x0b	; 11
    1e98:	40 81       	ld	r20, Z
    1e9a:	3c 96       	adiw	r30, 0x0c	; 12
    1e9c:	40 83       	st	Z, r20
    1e9e:	32 97       	sbiw	r30, 0x02	; 2
    1ea0:	30 81       	ld	r19, Z
    1ea2:	33 23       	and	r19, r19
    1ea4:	81 f1       	breq	.+96     	; 0x1f06 <u8g2_UpdateRefHeight+0x86>
    1ea6:	31 30       	cpi	r19, 0x01	; 1
    1ea8:	79 f4       	brne	.+30     	; 0x1ec8 <u8g2_UpdateRefHeight+0x48>
    1eaa:	39 97       	sbiw	r30, 0x09	; 9
    1eac:	30 81       	ld	r19, Z
    1eae:	23 17       	cp	r18, r19
    1eb0:	14 f4       	brge	.+4      	; 0x1eb6 <u8g2_UpdateRefHeight+0x36>
    1eb2:	3a 96       	adiw	r30, 0x0a	; 10
    1eb4:	30 83       	st	Z, r19
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	e9 59       	subi	r30, 0x99	; 153
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	20 81       	ld	r18, Z
    1ebe:	24 17       	cp	r18, r20
    1ec0:	14 f5       	brge	.+68     	; 0x1f06 <u8g2_UpdateRefHeight+0x86>
    1ec2:	3a 96       	adiw	r30, 0x0a	; 10
    1ec4:	20 83       	st	Z, r18
    1ec6:	08 95       	ret
    1ec8:	fc 01       	movw	r30, r24
    1eca:	ef 59       	subi	r30, 0x9F	; 159
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	e0 81       	ld	r30, Z
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	ad 59       	subi	r26, 0x9D	; 157
    1ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed6:	5c 91       	ld	r21, X
    1ed8:	02 2e       	mov	r0, r18
    1eda:	00 0c       	add	r0, r0
    1edc:	33 0b       	sbc	r19, r19
    1ede:	65 2f       	mov	r22, r21
    1ee0:	05 2e       	mov	r0, r21
    1ee2:	00 0c       	add	r0, r0
    1ee4:	77 0b       	sbc	r23, r23
    1ee6:	6e 0f       	add	r22, r30
    1ee8:	71 1d       	adc	r23, r1
    1eea:	e7 fd       	sbrc	r30, 7
    1eec:	7a 95       	dec	r23
    1eee:	26 17       	cp	r18, r22
    1ef0:	37 07       	cpc	r19, r23
    1ef2:	1c f4       	brge	.+6      	; 0x1efa <u8g2_UpdateRefHeight+0x7a>
    1ef4:	1d 96       	adiw	r26, 0x0d	; 13
    1ef6:	e5 0f       	add	r30, r21
    1ef8:	ec 93       	st	X, r30
    1efa:	54 17       	cp	r21, r20
    1efc:	24 f4       	brge	.+8      	; 0x1f06 <u8g2_UpdateRefHeight+0x86>
    1efe:	fc 01       	movw	r30, r24
    1f00:	ef 58       	subi	r30, 0x8F	; 143
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	50 83       	st	Z, r21
    1f06:	08 95       	ret

00001f08 <u8g2_SetFontPosBaseline>:
    1f08:	8a 5b       	subi	r24, 0xBA	; 186
    1f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0c:	2c e8       	ldi	r18, 0x8C	; 140
    1f0e:	3b e0       	ldi	r19, 0x0B	; 11
    1f10:	fc 01       	movw	r30, r24
    1f12:	31 83       	std	Z+1, r19	; 0x01
    1f14:	20 83       	st	Z, r18
    1f16:	08 95       	ret

00001f18 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
  if ( u8g2->font != font )
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	ec 5b       	subi	r30, 0xBC	; 188
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	20 81       	ld	r18, Z
    1f24:	31 81       	ldd	r19, Z+1	; 0x01
    1f26:	26 17       	cp	r18, r22
    1f28:	37 07       	cpc	r19, r23
    1f2a:	51 f0       	breq	.+20     	; 0x1f40 <u8g2_SetFont+0x28>
    1f2c:	ec 01       	movw	r28, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    1f2e:	71 83       	std	Z+1, r23	; 0x01
    1f30:	60 83       	st	Z, r22
    u8g2_read_font_info(&(u8g2->font_info), font);
    1f32:	89 5a       	subi	r24, 0xA9	; 169
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	0e 94 8f 0b 	call	0x171e	; 0x171e <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	08 95       	ret

00001f46 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1f46:	0f 93       	push	r16
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    1f48:	dc 01       	movw	r26, r24
    1f4a:	9a 96       	adiw	r26, 0x2a	; 42
    1f4c:	ed 91       	ld	r30, X+
    1f4e:	fc 91       	ld	r31, X
    1f50:	9b 97       	sbiw	r26, 0x2b	; 43
    1f52:	4e 1b       	sub	r20, r30
    1f54:	5f 0b       	sbc	r21, r31
    1f56:	5e 96       	adiw	r26, 0x1e	; 30
    1f58:	ed 91       	ld	r30, X+
    1f5a:	fc 91       	ld	r31, X
    1f5c:	5f 97       	sbiw	r26, 0x1f	; 31
    1f5e:	09 95       	icall
}
    1f60:	0f 91       	pop	r16
    1f62:	08 95       	ret

00001f64 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	da 01       	movw	r26, r20
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    1f72:	fc 01       	movw	r30, r24
    1f74:	e2 59       	subi	r30, 0x92	; 146
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	50 81       	ld	r21, Z
    1f7a:	55 23       	and	r21, r21
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <u8g2_DrawHVLine+0x1c>
    1f7e:	83 c0       	rjmp	.+262    	; 0x2086 <u8g2_DrawHVLine+0x122>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    1f80:	21 15       	cp	r18, r1
    1f82:	31 05       	cpc	r19, r1
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <u8g2_DrawHVLine+0x24>
    1f86:	7f c0       	rjmp	.+254    	; 0x2086 <u8g2_DrawHVLine+0x122>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    1f88:	22 30       	cpi	r18, 0x02	; 2
    1f8a:	31 05       	cpc	r19, r1
    1f8c:	70 f0       	brcs	.+28     	; 0x1faa <u8g2_DrawHVLine+0x46>
      {
	if ( dir == 2 )
    1f8e:	02 30       	cpi	r16, 0x02	; 2
    1f90:	29 f4       	brne	.+10     	; 0x1f9c <u8g2_DrawHVLine+0x38>
    1f92:	6f 5f       	subi	r22, 0xFF	; 255
    1f94:	7f 4f       	sbci	r23, 0xFF	; 255
	{
	  x -= len;
	  x++;
    1f96:	62 1b       	sub	r22, r18
    1f98:	73 0b       	sbc	r23, r19
    1f9a:	0b c0       	rjmp	.+22     	; 0x1fb2 <u8g2_DrawHVLine+0x4e>
	}
	else if ( dir == 3 )
    1f9c:	03 30       	cpi	r16, 0x03	; 3
    1f9e:	29 f4       	brne	.+10     	; 0x1faa <u8g2_DrawHVLine+0x46>
    1fa0:	11 96       	adiw	r26, 0x01	; 1
	{
	  y -= len;
	  y++;
    1fa2:	a2 1b       	sub	r26, r18
    1fa4:	b3 0b       	sbc	r27, r19
	}
      }
      dir &= 1;  
    1fa6:	f1 e0       	ldi	r31, 0x01	; 1
    1fa8:	37 c0       	rjmp	.+110    	; 0x2018 <u8g2_DrawHVLine+0xb4>
      
      /* clip against the user window */
      if ( dir == 0 )
    1faa:	f0 2f       	mov	r31, r16
    1fac:	f1 70       	andi	r31, 0x01	; 1
    1fae:	00 fd       	sbrc	r16, 0
    1fb0:	33 c0       	rjmp	.+102    	; 0x2018 <u8g2_DrawHVLine+0xb4>
      {
	if ( y < u8g2->user_y0 )
    1fb2:	ec 01       	movw	r28, r24
    1fb4:	48 ad       	ldd	r20, Y+56	; 0x38
    1fb6:	59 ad       	ldd	r21, Y+57	; 0x39
    1fb8:	a4 17       	cp	r26, r20
    1fba:	b5 07       	cpc	r27, r21
    1fbc:	08 f4       	brcc	.+2      	; 0x1fc0 <u8g2_DrawHVLine+0x5c>
    1fbe:	63 c0       	rjmp	.+198    	; 0x2086 <u8g2_DrawHVLine+0x122>
	  return;
	if ( y >= u8g2->user_y1 )
    1fc0:	4a ad       	ldd	r20, Y+58	; 0x3a
    1fc2:	5b ad       	ldd	r21, Y+59	; 0x3b
    1fc4:	a4 17       	cp	r26, r20
    1fc6:	b5 07       	cpc	r27, r21
    1fc8:	08 f0       	brcs	.+2      	; 0x1fcc <u8g2_DrawHVLine+0x68>
    1fca:	5d c0       	rjmp	.+186    	; 0x2086 <u8g2_DrawHVLine+0x122>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    1fcc:	4e a9       	ldd	r20, Y+54	; 0x36
    1fce:	5f a9       	ldd	r21, Y+55	; 0x37
    1fd0:	ec a9       	ldd	r30, Y+52	; 0x34
    1fd2:	fd a9       	ldd	r31, Y+53	; 0x35
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    1fd4:	26 0f       	add	r18, r22
    1fd6:	37 1f       	adc	r19, r23
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    1fd8:	26 17       	cp	r18, r22
    1fda:	37 07       	cpc	r19, r23
    1fdc:	40 f4       	brcc	.+16     	; 0x1fee <u8g2_DrawHVLine+0x8a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    1fde:	64 17       	cp	r22, r20
    1fe0:	75 07       	cpc	r23, r21
    1fe2:	20 f4       	brcc	.+8      	; 0x1fec <u8g2_DrawHVLine+0x88>
    {
      b = d;
      b--;
    1fe4:	9a 01       	movw	r18, r20
    1fe6:	21 50       	subi	r18, 0x01	; 1
    1fe8:	31 09       	sbc	r19, r1
    1fea:	05 c0       	rjmp	.+10     	; 0x1ff6 <u8g2_DrawHVLine+0x92>
    }
    else
    {
      a = c;
    1fec:	bf 01       	movw	r22, r30
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    1fee:	64 17       	cp	r22, r20
    1ff0:	75 07       	cpc	r23, r21
    1ff2:	08 f0       	brcs	.+2      	; 0x1ff6 <u8g2_DrawHVLine+0x92>
    1ff4:	48 c0       	rjmp	.+144    	; 0x2086 <u8g2_DrawHVLine+0x122>
    return 0;
  if ( b <= c )
    1ff6:	e2 17       	cp	r30, r18
    1ff8:	f3 07       	cpc	r31, r19
    1ffa:	08 f0       	brcs	.+2      	; 0x1ffe <u8g2_DrawHVLine+0x9a>
    1ffc:	44 c0       	rjmp	.+136    	; 0x2086 <u8g2_DrawHVLine+0x122>
    1ffe:	6e 17       	cp	r22, r30
    2000:	7f 07       	cpc	r23, r31
    2002:	08 f4       	brcc	.+2      	; 0x2006 <u8g2_DrawHVLine+0xa2>
    2004:	bf 01       	movw	r22, r30
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    2006:	24 17       	cp	r18, r20
    2008:	35 07       	cpc	r19, r21
    200a:	08 f4       	brcc	.+2      	; 0x200e <u8g2_DrawHVLine+0xaa>
    200c:	a9 01       	movw	r20, r18
    200e:	9a 01       	movw	r18, r20
    2010:	26 1b       	sub	r18, r22
    2012:	37 0b       	sbc	r19, r23
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	2d c0       	rjmp	.+90     	; 0x2072 <u8g2_DrawHVLine+0x10e>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    2018:	ec 01       	movw	r28, r24
    201a:	4c a9       	ldd	r20, Y+52	; 0x34
    201c:	5d a9       	ldd	r21, Y+53	; 0x35
    201e:	64 17       	cp	r22, r20
    2020:	75 07       	cpc	r23, r21
    2022:	88 f1       	brcs	.+98     	; 0x2086 <u8g2_DrawHVLine+0x122>
	  return;
	if ( x >= u8g2->user_x1 )
    2024:	4e a9       	ldd	r20, Y+54	; 0x36
    2026:	5f a9       	ldd	r21, Y+55	; 0x37
    2028:	64 17       	cp	r22, r20
    202a:	75 07       	cpc	r23, r21
    202c:	60 f5       	brcc	.+88     	; 0x2086 <u8g2_DrawHVLine+0x122>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    202e:	4a ad       	ldd	r20, Y+58	; 0x3a
    2030:	5b ad       	ldd	r21, Y+59	; 0x3b
    2032:	08 ad       	ldd	r16, Y+56	; 0x38
    2034:	19 ad       	ldd	r17, Y+57	; 0x39
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    2036:	2a 0f       	add	r18, r26
    2038:	3b 1f       	adc	r19, r27
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    203a:	2a 17       	cp	r18, r26
    203c:	3b 07       	cpc	r19, r27
    203e:	40 f4       	brcc	.+16     	; 0x2050 <u8g2_DrawHVLine+0xec>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    2040:	a4 17       	cp	r26, r20
    2042:	b5 07       	cpc	r27, r21
    2044:	20 f4       	brcc	.+8      	; 0x204e <u8g2_DrawHVLine+0xea>
    {
      b = d;
      b--;
    2046:	9a 01       	movw	r18, r20
    2048:	21 50       	subi	r18, 0x01	; 1
    204a:	31 09       	sbc	r19, r1
    204c:	04 c0       	rjmp	.+8      	; 0x2056 <u8g2_DrawHVLine+0xf2>
    }
    else
    {
      a = c;
    204e:	d8 01       	movw	r26, r16
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    2050:	a4 17       	cp	r26, r20
    2052:	b5 07       	cpc	r27, r21
    2054:	c0 f4       	brcc	.+48     	; 0x2086 <u8g2_DrawHVLine+0x122>
    return 0;
  if ( b <= c )
    2056:	02 17       	cp	r16, r18
    2058:	13 07       	cpc	r17, r19
    205a:	a8 f4       	brcc	.+42     	; 0x2086 <u8g2_DrawHVLine+0x122>
    205c:	a0 17       	cp	r26, r16
    205e:	b1 07       	cpc	r27, r17
    2060:	08 f4       	brcc	.+2      	; 0x2064 <u8g2_DrawHVLine+0x100>
    2062:	d8 01       	movw	r26, r16
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    2064:	24 17       	cp	r18, r20
    2066:	35 07       	cpc	r19, r21
    2068:	08 f4       	brcc	.+2      	; 0x206c <u8g2_DrawHVLine+0x108>
    206a:	a9 01       	movw	r20, r18
    206c:	9a 01       	movw	r18, r20
    206e:	2a 1b       	sub	r18, r26
    2070:	3b 0b       	sbc	r19, r27
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    2072:	ec 01       	movw	r28, r24
    2074:	48 a1       	ldd	r20, Y+32	; 0x20
    2076:	59 a1       	ldd	r21, Y+33	; 0x21
    2078:	ea 01       	movw	r28, r20
    207a:	ec 80       	ldd	r14, Y+4	; 0x04
    207c:	fd 80       	ldd	r15, Y+5	; 0x05
    207e:	0f 2f       	mov	r16, r31
    2080:	ad 01       	movw	r20, r26
    2082:	f7 01       	movw	r30, r14
    2084:	09 95       	icall
    }
}
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	ff 90       	pop	r15
    2090:	ef 90       	pop	r14
    2092:	08 95       	ret

00002094 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    2094:	46 17       	cp	r20, r22
    2096:	57 07       	cpc	r21, r23
    2098:	48 f4       	brcc	.+18     	; 0x20ac <u8g2_is_intersection_decision_tree+0x18>
  {
    if ( v1 > a0 )	// v1 >= a0
    209a:	82 17       	cp	r24, r18
    209c:	93 07       	cpc	r25, r19
    209e:	78 f0       	brcs	.+30     	; 0x20be <u8g2_is_intersection_decision_tree+0x2a>
    {
      return 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	24 17       	cp	r18, r20
    20a4:	35 07       	cpc	r19, r21
    20a6:	70 f0       	brcs	.+28     	; 0x20c4 <u8g2_is_intersection_decision_tree+0x30>
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    20ac:	82 17       	cp	r24, r18
    20ae:	93 07       	cpc	r25, r19
    20b0:	40 f4       	brcc	.+16     	; 0x20c2 <u8g2_is_intersection_decision_tree+0x2e>
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	24 17       	cp	r18, r20
    20b6:	35 07       	cpc	r19, r21
    20b8:	28 f0       	brcs	.+10     	; 0x20c4 <u8g2_is_intersection_decision_tree+0x30>
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	08 95       	ret
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
}
    20c4:	08 95       	ret

000020c6 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    20c6:	cf 92       	push	r12
    20c8:	df 92       	push	r13
    20ca:	ef 92       	push	r14
    20cc:	ff 92       	push	r15
    20ce:	0f 93       	push	r16
    20d0:	1f 93       	push	r17
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
    20d6:	ec 01       	movw	r28, r24
    20d8:	7b 01       	movw	r14, r22
    20da:	69 01       	movw	r12, r18
    20dc:	98 01       	movw	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    20de:	6a ad       	ldd	r22, Y+58	; 0x3a
    20e0:	7b ad       	ldd	r23, Y+59	; 0x3b
    20e2:	88 ad       	ldd	r24, Y+56	; 0x38
    20e4:	99 ad       	ldd	r25, Y+57	; 0x39
    20e6:	0e 94 4a 10 	call	0x2094	; 0x2094 <u8g2_is_intersection_decision_tree>
    20ea:	88 23       	and	r24, r24
    20ec:	41 f0       	breq	.+16     	; 0x20fe <u8g2_IsIntersection+0x38>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    20ee:	6e a9       	ldd	r22, Y+54	; 0x36
    20f0:	7f a9       	ldd	r23, Y+55	; 0x37
    20f2:	96 01       	movw	r18, r12
    20f4:	a7 01       	movw	r20, r14
    20f6:	8c a9       	ldd	r24, Y+52	; 0x34
    20f8:	9d a9       	ldd	r25, Y+53	; 0x35
    20fa:	0e 94 4a 10 	call	0x2094	; 0x2094 <u8g2_is_intersection_decision_tree>
}
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	df 90       	pop	r13
    210c:	cf 90       	pop	r12
    210e:	08 95       	ret

00002110 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    2110:	cf 92       	push	r12
    2112:	df 92       	push	r13
    2114:	ff 92       	push	r15
    2116:	0f 93       	push	r16
    2118:	1f 93       	push	r17
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	6c 01       	movw	r12, r24
    2120:	d9 01       	movw	r26, r18
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    2122:	34 2f       	mov	r19, r20
    2124:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	03 2e       	mov	r0, r19
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <u8g2_ll_hvline_vertical_top_lsb+0x22>
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	0a 94       	dec	r0
    2134:	e2 f7       	brpl	.-8      	; 0x212e <u8g2_ll_hvline_vertical_top_lsb+0x1e>
    2136:	18 2f       	mov	r17, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    2138:	f6 01       	movw	r30, r12
    213a:	ec 58       	subi	r30, 0x8C	; 140
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	20 81       	ld	r18, Z
    2140:	22 30       	cpi	r18, 0x02	; 2
    2142:	20 f4       	brcc	.+8      	; 0x214c <u8g2_ll_hvline_vertical_top_lsb+0x3c>
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    2144:	21 30       	cpi	r18, 0x01	; 1
    2146:	21 f0       	breq	.+8      	; 0x2150 <u8g2_ll_hvline_vertical_top_lsb+0x40>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    2148:	28 2f       	mov	r18, r24
    214a:	04 c0       	rjmp	.+8      	; 0x2154 <u8g2_ll_hvline_vertical_top_lsb+0x44>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <u8g2_ll_hvline_vertical_top_lsb+0x44>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    2150:	28 2f       	mov	r18, r24
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    2152:	10 e0       	ldi	r17, 0x00	; 0
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    2154:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    2156:	e6 01       	movw	r28, r12
    2158:	8a a1       	ldd	r24, Y+34	; 0x22
    215a:	9b a1       	ldd	r25, Y+35	; 0x23
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    215c:	e8 81       	ld	r30, Y
    215e:	f9 81       	ldd	r31, Y+1	; 0x01
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    2160:	f0 88       	ldd	r15, Z+16	; 0x10
    2162:	f4 9e       	mul	r15, r20
    2164:	f0 01       	movw	r30, r0
    2166:	f5 9e       	mul	r15, r21
    2168:	f0 0d       	add	r31, r0
    216a:	11 24       	eor	r1, r1
    216c:	6e 0f       	add	r22, r30
    216e:	7f 1f       	adc	r23, r31
    2170:	fc 01       	movw	r30, r24
    2172:	e6 0f       	add	r30, r22
    2174:	f7 1f       	adc	r31, r23
  
  if ( dir == 0 )
    2176:	01 11       	cpse	r16, r1
    2178:	0a c0       	rjmp	.+20     	; 0x218e <u8g2_ll_hvline_vertical_top_lsb+0x7e>
    217a:	ae 0f       	add	r26, r30
    217c:	bf 1f       	adc	r27, r31
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    217e:	80 81       	ld	r24, Z
    2180:	82 2b       	or	r24, r18
    2182:	81 27       	eor	r24, r17
    2184:	81 93       	st	Z+, r24
	ptr++;
	len--;
      } while( len != 0 );
    2186:	ea 17       	cp	r30, r26
    2188:	fb 07       	cpc	r31, r27
    218a:	c9 f7       	brne	.-14     	; 0x217e <u8g2_ll_hvline_vertical_top_lsb+0x6e>
    218c:	22 c0       	rjmp	.+68     	; 0x21d2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    218e:	a6 01       	movw	r20, r12
    2190:	4c 58       	subi	r20, 0x8C	; 140
    2192:	5f 4f       	sbci	r21, 0xFF	; 255
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    2194:	90 81       	ld	r25, Z
    2196:	92 2b       	or	r25, r18
    2198:	91 27       	eor	r25, r17
    219a:	90 83       	st	Z, r25
      
      bit_pos++;
    219c:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    219e:	37 70       	andi	r19, 0x07	; 7

      len--;
    21a0:	11 97       	sbiw	r26, 0x01	; 1

      if ( bit_pos == 0 )
    21a2:	31 11       	cpse	r19, r1
    21a4:	0e c0       	rjmp	.+28     	; 0x21c2 <u8g2_ll_hvline_vertical_top_lsb+0xb2>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    21a6:	e6 01       	movw	r28, r12
    21a8:	8e a1       	ldd	r24, Y+38	; 0x26
    21aa:	9f a1       	ldd	r25, Y+39	; 0x27
    21ac:	e8 0f       	add	r30, r24
    21ae:	f9 1f       	adc	r31, r25
		
	if ( u8g2->draw_color <= 1 )
    21b0:	ea 01       	movw	r28, r20
    21b2:	98 81       	ld	r25, Y
    21b4:	92 30       	cpi	r25, 0x02	; 2
    21b6:	40 f4       	brcc	.+16     	; 0x21c8 <u8g2_ll_hvline_vertical_top_lsb+0xb8>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    21b8:	91 30       	cpi	r25, 0x01	; 1
    21ba:	41 f0       	breq	.+16     	; 0x21cc <u8g2_ll_hvline_vertical_top_lsb+0xbc>
	  xor_mask = 1;
    21bc:	11 e0       	ldi	r17, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    21be:	21 e0       	ldi	r18, 0x01	; 1
    21c0:	06 c0       	rjmp	.+12     	; 0x21ce <u8g2_ll_hvline_vertical_top_lsb+0xbe>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    21c2:	22 0f       	add	r18, r18
	xor_mask <<= 1;
    21c4:	11 0f       	add	r17, r17
    21c6:	03 c0       	rjmp	.+6      	; 0x21ce <u8g2_ll_hvline_vertical_top_lsb+0xbe>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    21c8:	11 e0       	ldi	r17, 0x01	; 1
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <u8g2_ll_hvline_vertical_top_lsb+0xbe>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    21cc:	21 e0       	ldi	r18, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    21ce:	10 97       	sbiw	r26, 0x00	; 0
    21d0:	09 f7       	brne	.-62     	; 0x2194 <u8g2_ll_hvline_vertical_top_lsb+0x84>
  }
}
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	1f 91       	pop	r17
    21d8:	0f 91       	pop	r16
    21da:	ff 90       	pop	r15
    21dc:	df 90       	pop	r13
    21de:	cf 90       	pop	r12
    21e0:	08 95       	ret

000021e2 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    21e2:	cf 93       	push	r28
    21e4:	df 93       	push	r29
    21e6:	fc 01       	movw	r30, r24
    21e8:	a0 81       	ld	r26, Z
    21ea:	b1 81       	ldd	r27, Z+1	; 0x01
    21ec:	84 a1       	ldd	r24, Z+36	; 0x24
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9c 01       	movw	r18, r24
    21f2:	22 0f       	add	r18, r18
    21f4:	33 1f       	adc	r19, r19
    21f6:	22 0f       	add	r18, r18
    21f8:	33 1f       	adc	r19, r19
    21fa:	22 0f       	add	r18, r18
    21fc:	33 1f       	adc	r19, r19
    21fe:	31 a7       	std	Z+41, r19	; 0x29
    2200:	20 a7       	std	Z+40, r18	; 0x28
    2202:	50 96       	adiw	r26, 0x10	; 16
    2204:	2c 91       	ld	r18, X
    2206:	50 97       	sbiw	r26, 0x10	; 16
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	22 0f       	add	r18, r18
    220c:	33 1f       	adc	r19, r19
    220e:	22 0f       	add	r18, r18
    2210:	33 1f       	adc	r19, r19
    2212:	22 0f       	add	r18, r18
    2214:	33 1f       	adc	r19, r19
    2216:	37 a3       	std	Z+39, r19	; 0x27
    2218:	26 a3       	std	Z+38, r18	; 0x26
    221a:	75 a1       	ldd	r23, Z+37	; 0x25
    221c:	47 2f       	mov	r20, r23
    221e:	50 e0       	ldi	r21, 0x00	; 0
    2220:	9a 01       	movw	r18, r20
    2222:	22 0f       	add	r18, r18
    2224:	33 1f       	adc	r19, r19
    2226:	22 0f       	add	r18, r18
    2228:	33 1f       	adc	r19, r19
    222a:	22 0f       	add	r18, r18
    222c:	33 1f       	adc	r19, r19
    222e:	33 a7       	std	Z+43, r19	; 0x2b
    2230:	22 a7       	std	Z+42, r18	; 0x2a
    2232:	51 96       	adiw	r26, 0x11	; 17
    2234:	6c 91       	ld	r22, X
    2236:	51 97       	sbiw	r26, 0x11	; 17
    2238:	48 0f       	add	r20, r24
    223a:	59 1f       	adc	r21, r25
    223c:	c6 2f       	mov	r28, r22
    223e:	d0 e0       	ldi	r29, 0x00	; 0
    2240:	c4 17       	cp	r28, r20
    2242:	d5 07       	cpc	r29, r21
    2244:	18 f4       	brcc	.+6      	; 0x224c <u8g2_update_dimension_common+0x6a>
    2246:	ce 01       	movw	r24, r28
    2248:	87 1b       	sub	r24, r23
    224a:	91 09       	sbc	r25, r1
    224c:	35 a7       	std	Z+45, r19	; 0x2d
    224e:	24 a7       	std	Z+44, r18	; 0x2c
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	82 0f       	add	r24, r18
    225e:	93 1f       	adc	r25, r19
    2260:	97 a7       	std	Z+47, r25	; 0x2f
    2262:	86 a7       	std	Z+46, r24	; 0x2e
    2264:	54 96       	adiw	r26, 0x14	; 20
    2266:	8d 91       	ld	r24, X+
    2268:	9c 91       	ld	r25, X
    226a:	55 97       	sbiw	r26, 0x15	; 21
    226c:	91 ab       	std	Z+49, r25	; 0x31
    226e:	80 ab       	std	Z+48, r24	; 0x30
    2270:	56 96       	adiw	r26, 0x16	; 22
    2272:	8d 91       	ld	r24, X+
    2274:	9c 91       	ld	r25, X
    2276:	57 97       	sbiw	r26, 0x17	; 23
    2278:	93 ab       	std	Z+51, r25	; 0x33
    227a:	82 ab       	std	Z+50, r24	; 0x32
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	08 95       	ret

00002282 <u8g2_update_dimension_r0>:
    2282:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <u8g2_update_dimension_common>
    2286:	08 95       	ret

00002288 <u8g2_apply_clip_window>:
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	ec 01       	movw	r28, r24
    2292:	fc 01       	movw	r30, r24
    2294:	ee 5b       	subi	r30, 0xBE	; 190
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	00 81       	ld	r16, Z
    229a:	11 81       	ldd	r17, Z+1	; 0x01
    229c:	2e ad       	ldd	r18, Y+62	; 0x3e
    229e:	3f ad       	ldd	r19, Y+63	; 0x3f
    22a0:	32 97       	sbiw	r30, 0x02	; 2
    22a2:	40 81       	ld	r20, Z
    22a4:	51 81       	ldd	r21, Z+1	; 0x01
    22a6:	6c ad       	ldd	r22, Y+60	; 0x3c
    22a8:	7d ad       	ldd	r23, Y+61	; 0x3d
    22aa:	0e 94 63 10 	call	0x20c6	; 0x20c6 <u8g2_IsIntersection>
    22ae:	81 11       	cpse	r24, r1
    22b0:	04 c0       	rjmp	.+8      	; 0x22ba <u8g2_apply_clip_window+0x32>
    22b2:	c2 59       	subi	r28, 0x92	; 146
    22b4:	df 4f       	sbci	r29, 0xFF	; 255
    22b6:	18 82       	st	Y, r1
    22b8:	2f c0       	rjmp	.+94     	; 0x2318 <u8g2_apply_clip_window+0x90>
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	fe 01       	movw	r30, r28
    22be:	e2 59       	subi	r30, 0x92	; 146
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 83       	st	Z, r24
    22c4:	8c ad       	ldd	r24, Y+60	; 0x3c
    22c6:	9d ad       	ldd	r25, Y+61	; 0x3d
    22c8:	2c a9       	ldd	r18, Y+52	; 0x34
    22ca:	3d a9       	ldd	r19, Y+53	; 0x35
    22cc:	28 17       	cp	r18, r24
    22ce:	39 07       	cpc	r19, r25
    22d0:	10 f4       	brcc	.+4      	; 0x22d6 <u8g2_apply_clip_window+0x4e>
    22d2:	9d ab       	std	Y+53, r25	; 0x35
    22d4:	8c ab       	std	Y+52, r24	; 0x34
    22d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    22d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    22da:	2e a9       	ldd	r18, Y+54	; 0x36
    22dc:	3f a9       	ldd	r19, Y+55	; 0x37
    22de:	82 17       	cp	r24, r18
    22e0:	93 07       	cpc	r25, r19
    22e2:	10 f4       	brcc	.+4      	; 0x22e8 <u8g2_apply_clip_window+0x60>
    22e4:	9f ab       	std	Y+55, r25	; 0x37
    22e6:	8e ab       	std	Y+54, r24	; 0x36
    22e8:	fe 01       	movw	r30, r28
    22ea:	e0 5c       	subi	r30, 0xC0	; 192
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	80 81       	ld	r24, Z
    22f0:	91 81       	ldd	r25, Z+1	; 0x01
    22f2:	28 ad       	ldd	r18, Y+56	; 0x38
    22f4:	39 ad       	ldd	r19, Y+57	; 0x39
    22f6:	28 17       	cp	r18, r24
    22f8:	39 07       	cpc	r19, r25
    22fa:	10 f4       	brcc	.+4      	; 0x2300 <u8g2_apply_clip_window+0x78>
    22fc:	99 af       	std	Y+57, r25	; 0x39
    22fe:	88 af       	std	Y+56, r24	; 0x38
    2300:	fe 01       	movw	r30, r28
    2302:	ee 5b       	subi	r30, 0xBE	; 190
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	2a ad       	ldd	r18, Y+58	; 0x3a
    230c:	3b ad       	ldd	r19, Y+59	; 0x3b
    230e:	82 17       	cp	r24, r18
    2310:	93 07       	cpc	r25, r19
    2312:	10 f4       	brcc	.+4      	; 0x2318 <u8g2_apply_clip_window+0x90>
    2314:	9b af       	std	Y+59, r25	; 0x3b
    2316:	8a af       	std	Y+58, r24	; 0x3a
    2318:	df 91       	pop	r29
    231a:	cf 91       	pop	r28
    231c:	1f 91       	pop	r17
    231e:	0f 91       	pop	r16
    2320:	08 95       	ret

00002322 <u8g2_update_page_win_r0>:
    2322:	fc 01       	movw	r30, r24
    2324:	15 aa       	std	Z+53, r1	; 0x35
    2326:	14 aa       	std	Z+52, r1	; 0x34
    2328:	80 a9       	ldd	r24, Z+48	; 0x30
    232a:	91 a9       	ldd	r25, Z+49	; 0x31
    232c:	97 ab       	std	Z+55, r25	; 0x37
    232e:	86 ab       	std	Z+54, r24	; 0x36
    2330:	84 a5       	ldd	r24, Z+44	; 0x2c
    2332:	95 a5       	ldd	r25, Z+45	; 0x2d
    2334:	91 af       	std	Z+57, r25	; 0x39
    2336:	80 af       	std	Z+56, r24	; 0x38
    2338:	86 a5       	ldd	r24, Z+46	; 0x2e
    233a:	97 a5       	ldd	r25, Z+47	; 0x2f
    233c:	93 af       	std	Z+59, r25	; 0x3b
    233e:	82 af       	std	Z+58, r24	; 0x3a
    2340:	cf 01       	movw	r24, r30
    2342:	0e 94 44 11 	call	0x2288	; 0x2288 <u8g2_apply_clip_window>
    2346:	08 95       	ret

00002348 <u8g2_draw_l90_r0>:
    2348:	0f 93       	push	r16
    234a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <u8g2_draw_hv_line_2dir>
    234e:	0f 91       	pop	r16
    2350:	08 95       	ret

00002352 <u8g2_SetMaxClipWindow>:
    2352:	dc 01       	movw	r26, r24
    2354:	dd 96       	adiw	r26, 0x3d	; 61
    2356:	1c 92       	st	X, r1
    2358:	1e 92       	st	-X, r1
    235a:	dc 97       	sbiw	r26, 0x3c	; 60
    235c:	fc 01       	movw	r30, r24
    235e:	e0 5c       	subi	r30, 0xC0	; 192
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	11 82       	std	Z+1, r1	; 0x01
    2364:	10 82       	st	Z, r1
    2366:	2f ef       	ldi	r18, 0xFF	; 255
    2368:	3f ef       	ldi	r19, 0xFF	; 255
    236a:	fc 01       	movw	r30, r24
    236c:	37 af       	std	Z+63, r19	; 0x3f
    236e:	26 af       	std	Z+62, r18	; 0x3e
    2370:	ee 5b       	subi	r30, 0xBE	; 190
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	31 83       	std	Z+1, r19	; 0x01
    2376:	20 83       	st	Z, r18
    2378:	90 96       	adiw	r26, 0x20	; 32
    237a:	ed 91       	ld	r30, X+
    237c:	fc 91       	ld	r31, X
    237e:	91 97       	sbiw	r26, 0x21	; 33
    2380:	02 80       	ldd	r0, Z+2	; 0x02
    2382:	f3 81       	ldd	r31, Z+3	; 0x03
    2384:	e0 2d       	mov	r30, r0
    2386:	09 95       	icall
    2388:	08 95       	ret

0000238a <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    2394:	fc 01       	movw	r30, r24
    2396:	ec 5b       	subi	r30, 0xBC	; 188
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	11 82       	std	Z+1, r1	; 0x01
    239c:	10 82       	st	Z, r1
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    239e:	3f 8f       	std	Y+31, r19	; 0x1f
    23a0:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    23a2:	7b a3       	std	Y+35, r23	; 0x23
    23a4:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    23a6:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    23a8:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    23aa:	3f 96       	adiw	r30, 0x0f	; 15
    23ac:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    23ae:	b0 96       	adiw	r30, 0x20	; 32
    23b0:	10 82       	st	Z, r1
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    23b2:	34 97       	sbiw	r30, 0x04	; 4
    23b4:	10 82       	st	Z, r1
  u8g2->draw_color = 1;
    23b6:	35 96       	adiw	r30, 0x05	; 5
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    23bc:	31 96       	adiw	r30, 0x01	; 1
    23be:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    23c0:	19 a3       	std	Y+33, r17	; 0x21
    23c2:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    23c4:	d8 01       	movw	r26, r16
    23c6:	ed 91       	ld	r30, X+
    23c8:	fc 91       	ld	r31, X
    23ca:	ce 01       	movw	r24, r28
    23cc:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    23ce:	ce 01       	movw	r24, r28
    23d0:	0e 94 a9 11 	call	0x2352	; 0x2352 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    23d4:	ce 01       	movw	r24, r28
    23d6:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    23da:	ca 5a       	subi	r28, 0xAA	; 170
    23dc:	df 4f       	sbci	r29, 0xFF	; 255
    23de:	18 82       	st	Y, r1
#endif
}
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	1f 91       	pop	r17
    23e6:	0f 91       	pop	r16
    23e8:	08 95       	ret

000023ea <u8x8_ascii_next>:
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    23ea:	66 23       	and	r22, r22
    23ec:	29 f0       	breq	.+10     	; 0x23f8 <u8x8_ascii_next+0xe>
    23ee:	6a 30       	cpi	r22, 0x0A	; 10
    23f0:	31 f0       	breq	.+12     	; 0x23fe <u8x8_ascii_next+0x14>
    23f2:	86 2f       	mov	r24, r22
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	08 95       	ret
    23f8:	8f ef       	ldi	r24, 0xFF	; 255
    23fa:	9f ef       	ldi	r25, 0xFF	; 255
    23fc:	08 95       	ret
    23fe:	8f ef       	ldi	r24, 0xFF	; 255
    2400:	9f ef       	ldi	r25, 0xFF	; 255
    2402:	08 95       	ret

00002404 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    2404:	fc 01       	movw	r30, r24
    2406:	10 8e       	std	Z+24, r1	; 0x18
    2408:	08 95       	ret

0000240a <u8x8_byte_SendBytes>:
      break;
    default:
      return 0;
  }
  return 1;
}
    240a:	9a 01       	movw	r18, r20
    240c:	dc 01       	movw	r26, r24
    240e:	18 96       	adiw	r26, 0x08	; 8
    2410:	ed 91       	ld	r30, X+
    2412:	fc 91       	ld	r31, X
    2414:	19 97       	sbiw	r26, 0x09	; 9
    2416:	46 2f       	mov	r20, r22
    2418:	67 e1       	ldi	r22, 0x17	; 23
    241a:	09 95       	icall
    241c:	08 95       	ret

0000241e <u8x8_byte_SendByte>:
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	1f 92       	push	r1
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	69 83       	std	Y+1, r22	; 0x01
    242a:	ae 01       	movw	r20, r28
    242c:	4f 5f       	subi	r20, 0xFF	; 255
    242e:	5f 4f       	sbci	r21, 0xFF	; 255
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	0e 94 05 12 	call	0x240a	; 0x240a <u8x8_byte_SendBytes>
    2436:	0f 90       	pop	r0
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	08 95       	ret

0000243e <u8x8_byte_StartTransfer>:
    243e:	dc 01       	movw	r26, r24
    2440:	18 96       	adiw	r26, 0x08	; 8
    2442:	ed 91       	ld	r30, X+
    2444:	fc 91       	ld	r31, X
    2446:	19 97       	sbiw	r26, 0x09	; 9
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	68 e1       	ldi	r22, 0x18	; 24
    2450:	09 95       	icall
    2452:	08 95       	ret

00002454 <u8x8_byte_EndTransfer>:
    2454:	dc 01       	movw	r26, r24
    2456:	18 96       	adiw	r26, 0x08	; 8
    2458:	ed 91       	ld	r30, X+
    245a:	fc 91       	ld	r31, X
    245c:	19 97       	sbiw	r26, 0x09	; 9
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	69 e1       	ldi	r22, 0x19	; 25
    2466:	09 95       	icall
    2468:	08 95       	ret

0000246a <u8x8_byte_sw_i2c>:
  /* 1: nothing happend during ack cycle */  
  i2c_read_bit(u8x8);
}

uint8_t u8x8_byte_sw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    246a:	d9 01       	movw	r26, r18
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes */
	static uint8_t buf_idx;
	uint8_t *data;
	
	switch(msg)
    246c:	68 31       	cpi	r22, 0x18	; 24
    246e:	f1 f0       	breq	.+60     	; 0x24ac <u8x8_byte_sw_i2c+0x42>
    2470:	28 f4       	brcc	.+10     	; 0x247c <u8x8_byte_sw_i2c+0x12>
    2472:	64 31       	cpi	r22, 0x14	; 20
    2474:	39 f0       	breq	.+14     	; 0x2484 <u8x8_byte_sw_i2c+0x1a>
    2476:	67 31       	cpi	r22, 0x17	; 23
    2478:	39 f0       	breq	.+14     	; 0x2488 <u8x8_byte_sw_i2c+0x1e>
    247a:	28 c0       	rjmp	.+80     	; 0x24cc <u8x8_byte_sw_i2c+0x62>
    247c:	69 31       	cpi	r22, 0x19	; 25
    247e:	d1 f0       	breq	.+52     	; 0x24b4 <u8x8_byte_sw_i2c+0x4a>
    2480:	60 32       	cpi	r22, 0x20	; 32
    2482:	21 f5       	brne	.+72     	; 0x24cc <u8x8_byte_sw_i2c+0x62>
		i2c_transfer(u8x8, u8x8_GetI2CAddress(u8x8), buf_idx, buffer);
		break;
		default:
		return 0;
	}
	return 1;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	08 95       	ret
	
	switch(msg)
	{
		case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
		while( arg_int > 0 )
    2488:	44 23       	and	r20, r20
    248a:	11 f1       	breq	.+68     	; 0x24d0 <u8x8_byte_sw_i2c+0x66>
    248c:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <buf_idx.3608>
    2490:	48 0f       	add	r20, r24
		{
			buffer[buf_idx++] = *data;
    2492:	9d 91       	ld	r25, X+
    2494:	e8 2f       	mov	r30, r24
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	e0 5f       	subi	r30, 0xF0	; 240
    249a:	fa 4f       	sbci	r31, 0xFA	; 250
    249c:	90 83       	st	Z, r25
    249e:	8f 5f       	subi	r24, 0xFF	; 255
	
	switch(msg)
	{
		case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
		while( arg_int > 0 )
    24a0:	48 13       	cpse	r20, r24
    24a2:	f7 cf       	rjmp	.-18     	; 0x2492 <u8x8_byte_sw_i2c+0x28>
    24a4:	40 93 30 05 	sts	0x0530, r20	; 0x800530 <buf_idx.3608>
		i2c_transfer(u8x8, u8x8_GetI2CAddress(u8x8), buf_idx, buffer);
		break;
		default:
		return 0;
	}
	return 1;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	08 95       	ret
		break;
		case U8X8_MSG_BYTE_SET_DC:
		/* ignored for i2c */
		break;
		case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
    24ac:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <buf_idx.3608>
		i2c_transfer(u8x8, u8x8_GetI2CAddress(u8x8), buf_idx, buffer);
		break;
		default:
		return 0;
	}
	return 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_SET_DC:
		/* ignored for i2c */
		break;
		case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
		break;
    24b2:	08 95       	ret
  //i2c_start(u8x8);
  //i2c_write_byte(u8x8, adr);
  //for( i = 0; i < cnt; i++ )
    //i2c_write_byte(u8x8, data[i]);
  //i2c_stop(u8x8);  
  twi_transfer(adr, data, cnt);
    24b4:	40 91 30 05 	lds	r20, 0x0530	; 0x800530 <buf_idx.3608>
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	fc 01       	movw	r30, r24
    24bc:	86 89       	ldd	r24, Z+22	; 0x16
    24be:	60 e1       	ldi	r22, 0x10	; 16
    24c0:	75 e0       	ldi	r23, 0x05	; 5
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 a8 08 	call	0x1150	; 0x1150 <twi_transfer>
		i2c_transfer(u8x8, u8x8_GetI2CAddress(u8x8), buf_idx, buffer);
		break;
		default:
		return 0;
	}
	return 1;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	08 95       	ret
		break;
		case U8X8_MSG_BYTE_END_TRANSFER:
		i2c_transfer(u8x8, u8x8_GetI2CAddress(u8x8), buf_idx, buffer);
		break;
		default:
		return 0;
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	08 95       	ret
	}
	return 1;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
}
    24d2:	08 95       	ret

000024d4 <u8x8_i2c_data_transfer>:
      break;
    default:
      return 0;
  }
  return 1;
}
    24d4:	ef 92       	push	r14
    24d6:	ff 92       	push	r15
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	ec 01       	movw	r28, r24
    24e0:	16 2f       	mov	r17, r22
    24e2:	7a 01       	movw	r14, r20
    24e4:	0e 94 1f 12 	call	0x243e	; 0x243e <u8x8_byte_StartTransfer>
    24e8:	60 e4       	ldi	r22, 0x40	; 64
    24ea:	ce 01       	movw	r24, r28
    24ec:	0e 94 0f 12 	call	0x241e	; 0x241e <u8x8_byte_SendByte>
    24f0:	e8 85       	ldd	r30, Y+8	; 0x08
    24f2:	f9 85       	ldd	r31, Y+9	; 0x09
    24f4:	97 01       	movw	r18, r14
    24f6:	41 2f       	mov	r20, r17
    24f8:	67 e1       	ldi	r22, 0x17	; 23
    24fa:	ce 01       	movw	r24, r28
    24fc:	09 95       	icall
    24fe:	ce 01       	movw	r24, r28
    2500:	0e 94 2a 12 	call	0x2454	; 0x2454 <u8x8_byte_EndTransfer>
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	1f 91       	pop	r17
    250a:	ff 90       	pop	r15
    250c:	ef 90       	pop	r14
    250e:	08 95       	ret

00002510 <u8x8_cad_SendCmd>:
    2510:	46 2f       	mov	r20, r22
    2512:	dc 01       	movw	r26, r24
    2514:	16 96       	adiw	r26, 0x06	; 6
    2516:	ed 91       	ld	r30, X+
    2518:	fc 91       	ld	r31, X
    251a:	17 97       	sbiw	r26, 0x07	; 7
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	65 e1       	ldi	r22, 0x15	; 21
    2522:	09 95       	icall
    2524:	08 95       	ret

00002526 <u8x8_cad_SendArg>:
    2526:	46 2f       	mov	r20, r22
    2528:	dc 01       	movw	r26, r24
    252a:	16 96       	adiw	r26, 0x06	; 6
    252c:	ed 91       	ld	r30, X+
    252e:	fc 91       	ld	r31, X
    2530:	17 97       	sbiw	r26, 0x07	; 7
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	66 e1       	ldi	r22, 0x16	; 22
    2538:	09 95       	icall
    253a:	08 95       	ret

0000253c <u8x8_cad_SendData>:
    253c:	9a 01       	movw	r18, r20
    253e:	dc 01       	movw	r26, r24
    2540:	16 96       	adiw	r26, 0x06	; 6
    2542:	ed 91       	ld	r30, X+
    2544:	fc 91       	ld	r31, X
    2546:	17 97       	sbiw	r26, 0x07	; 7
    2548:	46 2f       	mov	r20, r22
    254a:	67 e1       	ldi	r22, 0x17	; 23
    254c:	09 95       	icall
    254e:	08 95       	ret

00002550 <u8x8_cad_StartTransfer>:
    2550:	dc 01       	movw	r26, r24
    2552:	16 96       	adiw	r26, 0x06	; 6
    2554:	ed 91       	ld	r30, X+
    2556:	fc 91       	ld	r31, X
    2558:	17 97       	sbiw	r26, 0x07	; 7
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e0       	ldi	r20, 0x00	; 0
    2560:	68 e1       	ldi	r22, 0x18	; 24
    2562:	09 95       	icall
    2564:	08 95       	ret

00002566 <u8x8_cad_EndTransfer>:
    2566:	dc 01       	movw	r26, r24
    2568:	16 96       	adiw	r26, 0x06	; 6
    256a:	ed 91       	ld	r30, X+
    256c:	fc 91       	ld	r31, X
    256e:	17 97       	sbiw	r26, 0x07	; 7
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e0       	ldi	r20, 0x00	; 0
    2576:	69 e1       	ldi	r22, 0x19	; 25
    2578:	09 95       	icall
    257a:	08 95       	ret

0000257c <u8x8_cad_SendSequence>:
    257c:	ef 92       	push	r14
    257e:	ff 92       	push	r15
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	1f 92       	push	r1
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	7c 01       	movw	r14, r24
    2590:	8b 01       	movw	r16, r22
    2592:	d8 01       	movw	r26, r16
    2594:	6c 91       	ld	r22, X
    2596:	67 31       	cpi	r22, 0x17	; 23
    2598:	c1 f0       	breq	.+48     	; 0x25ca <u8x8_cad_SendSequence+0x4e>
    259a:	18 f4       	brcc	.+6      	; 0x25a2 <u8x8_cad_SendSequence+0x26>
    259c:	65 31       	cpi	r22, 0x15	; 21
    259e:	30 f4       	brcc	.+12     	; 0x25ac <u8x8_cad_SendSequence+0x30>
    25a0:	38 c0       	rjmp	.+112    	; 0x2612 <u8x8_cad_SendSequence+0x96>
    25a2:	6a 31       	cpi	r22, 0x1A	; 26
    25a4:	f8 f0       	brcs	.+62     	; 0x25e4 <u8x8_cad_SendSequence+0x68>
    25a6:	6e 3f       	cpi	r22, 0xFE	; 254
    25a8:	51 f1       	breq	.+84     	; 0x25fe <u8x8_cad_SendSequence+0x82>
    25aa:	33 c0       	rjmp	.+102    	; 0x2612 <u8x8_cad_SendSequence+0x96>
    25ac:	f8 01       	movw	r30, r16
    25ae:	41 81       	ldd	r20, Z+1	; 0x01
    25b0:	49 83       	std	Y+1, r20	; 0x01
    25b2:	d7 01       	movw	r26, r14
    25b4:	16 96       	adiw	r26, 0x06	; 6
    25b6:	ed 91       	ld	r30, X+
    25b8:	fc 91       	ld	r31, X
    25ba:	17 97       	sbiw	r26, 0x07	; 7
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	c7 01       	movw	r24, r14
    25c2:	09 95       	icall
    25c4:	0e 5f       	subi	r16, 0xFE	; 254
    25c6:	1f 4f       	sbci	r17, 0xFF	; 255
    25c8:	e4 cf       	rjmp	.-56     	; 0x2592 <u8x8_cad_SendSequence+0x16>
    25ca:	f8 01       	movw	r30, r16
    25cc:	81 81       	ldd	r24, Z+1	; 0x01
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	ae 01       	movw	r20, r28
    25d2:	4f 5f       	subi	r20, 0xFF	; 255
    25d4:	5f 4f       	sbci	r21, 0xFF	; 255
    25d6:	61 e0       	ldi	r22, 0x01	; 1
    25d8:	c7 01       	movw	r24, r14
    25da:	0e 94 9e 12 	call	0x253c	; 0x253c <u8x8_cad_SendData>
    25de:	0e 5f       	subi	r16, 0xFE	; 254
    25e0:	1f 4f       	sbci	r17, 0xFF	; 255
    25e2:	d7 cf       	rjmp	.-82     	; 0x2592 <u8x8_cad_SendSequence+0x16>
    25e4:	0f 5f       	subi	r16, 0xFF	; 255
    25e6:	1f 4f       	sbci	r17, 0xFF	; 255
    25e8:	d7 01       	movw	r26, r14
    25ea:	16 96       	adiw	r26, 0x06	; 6
    25ec:	ed 91       	ld	r30, X+
    25ee:	fc 91       	ld	r31, X
    25f0:	17 97       	sbiw	r26, 0x07	; 7
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	c7 01       	movw	r24, r14
    25fa:	09 95       	icall
    25fc:	ca cf       	rjmp	.-108    	; 0x2592 <u8x8_cad_SendSequence+0x16>
    25fe:	f8 01       	movw	r30, r16
    2600:	41 81       	ldd	r20, Z+1	; 0x01
    2602:	49 83       	std	Y+1, r20	; 0x01
    2604:	69 e2       	ldi	r22, 0x29	; 41
    2606:	c7 01       	movw	r24, r14
    2608:	0e 94 cd 14 	call	0x299a	; 0x299a <u8x8_gpio_call>
    260c:	0e 5f       	subi	r16, 0xFE	; 254
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	c0 cf       	rjmp	.-128    	; 0x2592 <u8x8_cad_SendSequence+0x16>
    2612:	0f 90       	pop	r0
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	ff 90       	pop	r15
    261e:	ef 90       	pop	r14
    2620:	08 95       	ret

00002622 <u8x8_cad_ssd13xx_fast_i2c>:


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2622:	ef 92       	push	r14
    2624:	ff 92       	push	r15
    2626:	0f 93       	push	r16
    2628:	1f 93       	push	r17
    262a:	cf 93       	push	r28
    262c:	7c 01       	movw	r14, r24
    262e:	c4 2f       	mov	r28, r20
    2630:	89 01       	movw	r16, r18
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    2632:	66 31       	cpi	r22, 0x16	; 22
    2634:	29 f1       	breq	.+74     	; 0x2680 <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    2636:	30 f4       	brcc	.+12     	; 0x2644 <u8x8_cad_ssd13xx_fast_i2c+0x22>
    2638:	64 31       	cpi	r22, 0x14	; 20
    263a:	09 f4       	brne	.+2      	; 0x263e <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    263c:	42 c0       	rjmp	.+132    	; 0x26c2 <u8x8_cad_ssd13xx_fast_i2c+0xa0>
    263e:	65 31       	cpi	r22, 0x15	; 21
    2640:	49 f0       	breq	.+18     	; 0x2654 <u8x8_cad_ssd13xx_fast_i2c+0x32>
    2642:	62 c0       	rjmp	.+196    	; 0x2708 <u8x8_cad_ssd13xx_fast_i2c+0xe6>
    2644:	68 31       	cpi	r22, 0x18	; 24
    2646:	09 f4       	brne	.+2      	; 0x264a <u8x8_cad_ssd13xx_fast_i2c+0x28>
    2648:	50 c0       	rjmp	.+160    	; 0x26ea <u8x8_cad_ssd13xx_fast_i2c+0xc8>
    264a:	f8 f0       	brcs	.+62     	; 0x268a <u8x8_cad_ssd13xx_fast_i2c+0x68>
    264c:	69 31       	cpi	r22, 0x19	; 25
    264e:	09 f4       	brne	.+2      	; 0x2652 <u8x8_cad_ssd13xx_fast_i2c+0x30>
    2650:	50 c0       	rjmp	.+160    	; 0x26f2 <u8x8_cad_ssd13xx_fast_i2c+0xd0>
    2652:	5a c0       	rjmp	.+180    	; 0x2708 <u8x8_cad_ssd13xx_fast_i2c+0xe6>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    2654:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <in_transfer.3593>
    2658:	88 23       	and	r24, r24
    265a:	19 f0       	breq	.+6      	; 0x2662 <u8x8_cad_ssd13xx_fast_i2c+0x40>
	 u8x8_byte_EndTransfer(u8x8); 
    265c:	c7 01       	movw	r24, r14
    265e:	0e 94 2a 12 	call	0x2454	; 0x2454 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    2662:	c7 01       	movw	r24, r14
    2664:	0e 94 1f 12 	call	0x243e	; 0x243e <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	c7 01       	movw	r24, r14
    266c:	0e 94 0f 12 	call	0x241e	; 0x241e <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    2670:	6c 2f       	mov	r22, r28
    2672:	c7 01       	movw	r24, r14
    2674:	0e 94 0f 12 	call	0x241e	; 0x241e <u8x8_byte_SendByte>
      in_transfer = 1;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <in_transfer.3593>
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    267e:	45 c0       	rjmp	.+138    	; 0x270a <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    2680:	64 2f       	mov	r22, r20
    2682:	0e 94 0f 12 	call	0x241e	; 0x241e <u8x8_byte_SendByte>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    2686:	81 e0       	ldi	r24, 0x01	; 1
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    2688:	40 c0       	rjmp	.+128    	; 0x270a <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    268a:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <in_transfer.3593>
    268e:	88 23       	and	r24, r24
    2690:	19 f0       	breq	.+6      	; 0x2698 <u8x8_cad_ssd13xx_fast_i2c+0x76>
	u8x8_byte_EndTransfer(u8x8); 
    2692:	c7 01       	movw	r24, r14
    2694:	0e 94 2a 12 	call	0x2454	; 0x2454 <u8x8_byte_EndTransfer>
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    2698:	c9 31       	cpi	r28, 0x19	; 25
    269a:	50 f0       	brcs	.+20     	; 0x26b0 <u8x8_cad_ssd13xx_fast_i2c+0x8e>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    269c:	a8 01       	movw	r20, r16
    269e:	68 e1       	ldi	r22, 0x18	; 24
    26a0:	c7 01       	movw	r24, r14
    26a2:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <u8x8_i2c_data_transfer>
	arg_int-=24;
    26a6:	c8 51       	subi	r28, 0x18	; 24
	p+=24;
    26a8:	08 5e       	subi	r16, 0xE8	; 232
    26aa:	1f 4f       	sbci	r17, 0xFF	; 255
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    26ac:	c9 31       	cpi	r28, 0x19	; 25
    26ae:	b0 f7       	brcc	.-20     	; 0x269c <u8x8_cad_ssd13xx_fast_i2c+0x7a>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    26b0:	a8 01       	movw	r20, r16
    26b2:	6c 2f       	mov	r22, r28
    26b4:	c7 01       	movw	r24, r14
    26b6:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <u8x8_i2c_data_transfer>
      in_transfer = 0;
    26ba:	10 92 31 05 	sts	0x0531, r1	; 0x800531 <in_transfer.3593>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    26be:	81 e0       	ldi	r24, 0x01	; 1
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    26c0:	24 c0       	rjmp	.+72     	; 0x270a <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    26c2:	dc 01       	movw	r26, r24
    26c4:	56 96       	adiw	r26, 0x16	; 22
    26c6:	8c 91       	ld	r24, X
    26c8:	56 97       	sbiw	r26, 0x16	; 22
    26ca:	8f 3f       	cpi	r24, 0xFF	; 255
    26cc:	19 f4       	brne	.+6      	; 0x26d4 <u8x8_cad_ssd13xx_fast_i2c+0xb2>
	u8x8->i2c_address = 0x078;
    26ce:	88 e7       	ldi	r24, 0x78	; 120
    26d0:	56 96       	adiw	r26, 0x16	; 22
    26d2:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    26d4:	d7 01       	movw	r26, r14
    26d6:	18 96       	adiw	r26, 0x08	; 8
    26d8:	ed 91       	ld	r30, X+
    26da:	fc 91       	ld	r31, X
    26dc:	19 97       	sbiw	r26, 0x09	; 9
    26de:	98 01       	movw	r18, r16
    26e0:	4c 2f       	mov	r20, r28
    26e2:	64 e1       	ldi	r22, 0x14	; 20
    26e4:	c7 01       	movw	r24, r14
    26e6:	09 95       	icall
    26e8:	10 c0       	rjmp	.+32     	; 0x270a <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    26ea:	10 92 31 05 	sts	0x0531, r1	; 0x800531 <in_transfer.3593>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    26f0:	0c c0       	rjmp	.+24     	; 0x270a <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    26f2:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <in_transfer.3593>
    26f6:	88 23       	and	r24, r24
    26f8:	19 f0       	breq	.+6      	; 0x2700 <u8x8_cad_ssd13xx_fast_i2c+0xde>
	u8x8_byte_EndTransfer(u8x8); 
    26fa:	c7 01       	movw	r24, r14
    26fc:	0e 94 2a 12 	call	0x2454	; 0x2454 <u8x8_byte_EndTransfer>
      in_transfer = 0;
    2700:	10 92 31 05 	sts	0x0531, r1	; 0x800531 <in_transfer.3593>
      break;
    default:
      return 0;
  }
  return 1;
    2704:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    2706:	01 c0       	rjmp	.+2      	; 0x270a <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    default:
      return 0;
    2708:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	ff 90       	pop	r15
    2712:	ef 90       	pop	r14
    2714:	08 95       	ret

00002716 <u8x8_d_helper_display_setup_memory>:
*/
void u8x8_InitInterface(u8x8_t *u8x8)
{
  u8x8_gpio_Init(u8x8);
  u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
}
    2716:	fc 01       	movw	r30, r24
    2718:	71 83       	std	Z+1, r23	; 0x01
    271a:	60 83       	st	Z, r22
    271c:	fb 01       	movw	r30, r22
    271e:	22 89       	ldd	r18, Z+18	; 0x12
    2720:	fc 01       	movw	r30, r24
    2722:	24 8b       	std	Z+20, r18	; 0x14
    2724:	08 95       	ret

00002726 <u8x8_d_helper_display_init>:
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	ec 01       	movw	r28, r24
    272c:	ea 85       	ldd	r30, Y+10	; 0x0a
    272e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	68 e2       	ldi	r22, 0x28	; 40
    2738:	09 95       	icall
    273a:	ee 81       	ldd	r30, Y+6	; 0x06
    273c:	ff 81       	ldd	r31, Y+7	; 0x07
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	64 e1       	ldi	r22, 0x14	; 20
    2746:	ce 01       	movw	r24, r28
    2748:	09 95       	icall
    274a:	41 e0       	ldi	r20, 0x01	; 1
    274c:	6b e4       	ldi	r22, 0x4B	; 75
    274e:	ce 01       	movw	r24, r28
    2750:	0e 94 cd 14 	call	0x299a	; 0x299a <u8x8_gpio_call>
    2754:	e8 81       	ld	r30, Y
    2756:	f9 81       	ldd	r31, Y+1	; 0x01
    2758:	44 81       	ldd	r20, Z+4	; 0x04
    275a:	69 e2       	ldi	r22, 0x29	; 41
    275c:	ce 01       	movw	r24, r28
    275e:	0e 94 cd 14 	call	0x299a	; 0x299a <u8x8_gpio_call>
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	6b e4       	ldi	r22, 0x4B	; 75
    2766:	ce 01       	movw	r24, r28
    2768:	0e 94 cd 14 	call	0x299a	; 0x299a <u8x8_gpio_call>
    276c:	e8 81       	ld	r30, Y
    276e:	f9 81       	ldd	r31, Y+1	; 0x01
    2770:	44 81       	ldd	r20, Z+4	; 0x04
    2772:	69 e2       	ldi	r22, 0x29	; 41
    2774:	ce 01       	movw	r24, r28
    2776:	0e 94 cd 14 	call	0x299a	; 0x299a <u8x8_gpio_call>
    277a:	41 e0       	ldi	r20, 0x01	; 1
    277c:	6b e4       	ldi	r22, 0x4B	; 75
    277e:	ce 01       	movw	r24, r28
    2780:	0e 94 cd 14 	call	0x299a	; 0x299a <u8x8_gpio_call>
    2784:	e8 81       	ld	r30, Y
    2786:	f9 81       	ldd	r31, Y+1	; 0x01
    2788:	45 81       	ldd	r20, Z+5	; 0x05
    278a:	69 e2       	ldi	r22, 0x29	; 41
    278c:	ce 01       	movw	r24, r28
    278e:	0e 94 cd 14 	call	0x299a	; 0x299a <u8x8_gpio_call>
    2792:	df 91       	pop	r29
    2794:	cf 91       	pop	r28
    2796:	08 95       	ret

00002798 <u8x8_DrawTile>:
    2798:	0f 93       	push	r16
    279a:	1f 93       	push	r17
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <u8x8_DrawTile+0xa>
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <u8x8_DrawTile+0xc>
    27a4:	1f 92       	push	r1
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	6c 83       	std	Y+4, r22	; 0x04
    27ac:	4d 83       	std	Y+5, r20	; 0x05
    27ae:	2b 83       	std	Y+3, r18	; 0x03
    27b0:	1a 83       	std	Y+2, r17	; 0x02
    27b2:	09 83       	std	Y+1, r16	; 0x01
    27b4:	dc 01       	movw	r26, r24
    27b6:	14 96       	adiw	r26, 0x04	; 4
    27b8:	ed 91       	ld	r30, X+
    27ba:	fc 91       	ld	r31, X
    27bc:	15 97       	sbiw	r26, 0x05	; 5
    27be:	9e 01       	movw	r18, r28
    27c0:	2f 5f       	subi	r18, 0xFF	; 255
    27c2:	3f 4f       	sbci	r19, 0xFF	; 255
    27c4:	41 e0       	ldi	r20, 0x01	; 1
    27c6:	6f e0       	ldi	r22, 0x0F	; 15
    27c8:	09 95       	icall
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	df 91       	pop	r29
    27d6:	cf 91       	pop	r28
    27d8:	1f 91       	pop	r17
    27da:	0f 91       	pop	r16
    27dc:	08 95       	ret

000027de <u8x8_SetupMemory>:
    27de:	dc 01       	movw	r26, r24
    27e0:	14 96       	adiw	r26, 0x04	; 4
    27e2:	ed 91       	ld	r30, X+
    27e4:	fc 91       	ld	r31, X
    27e6:	15 97       	sbiw	r26, 0x05	; 5
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	69 e0       	ldi	r22, 0x09	; 9
    27f0:	09 95       	icall
    27f2:	08 95       	ret

000027f4 <u8x8_InitDisplay>:
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
    27f4:	dc 01       	movw	r26, r24
    27f6:	14 96       	adiw	r26, 0x04	; 4
    27f8:	ed 91       	ld	r30, X+
    27fa:	fc 91       	ld	r31, X
    27fc:	15 97       	sbiw	r26, 0x05	; 5
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	6a e0       	ldi	r22, 0x0A	; 10
    2806:	09 95       	icall
    2808:	08 95       	ret

0000280a <u8x8_SetPowerSave>:
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
    280a:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
    280c:	dc 01       	movw	r26, r24
    280e:	14 96       	adiw	r26, 0x04	; 4
    2810:	ed 91       	ld	r30, X+
    2812:	fc 91       	ld	r31, X
    2814:	15 97       	sbiw	r26, 0x05	; 5
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	6b e0       	ldi	r22, 0x0B	; 11
    281c:	09 95       	icall
    281e:	08 95       	ret

00002820 <u8x8_SetFlipMode>:
}

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
    2820:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
    2822:	dc 01       	movw	r26, r24
    2824:	14 96       	adiw	r26, 0x04	; 4
    2826:	ed 91       	ld	r30, X+
    2828:	fc 91       	ld	r31, X
    282a:	15 97       	sbiw	r26, 0x05	; 5
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	6d e0       	ldi	r22, 0x0D	; 13
    2832:	09 95       	icall
    2834:	08 95       	ret

00002836 <u8x8_SetContrast>:
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
    2836:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    2838:	dc 01       	movw	r26, r24
    283a:	14 96       	adiw	r26, 0x04	; 4
    283c:	ed 91       	ld	r30, X+
    283e:	fc 91       	ld	r31, X
    2840:	15 97       	sbiw	r26, 0x05	; 5
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	6e e0       	ldi	r22, 0x0E	; 14
    2848:	09 95       	icall
    284a:	08 95       	ret

0000284c <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    284c:	dc 01       	movw	r26, r24
    284e:	14 96       	adiw	r26, 0x04	; 4
    2850:	ed 91       	ld	r30, X+
    2852:	fc 91       	ld	r31, X
    2854:	15 97       	sbiw	r26, 0x05	; 5
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	60 e1       	ldi	r22, 0x10	; 16
    285e:	09 95       	icall
    2860:	08 95       	ret

00002862 <u8x8_d_ssd1306_128x32_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2862:	ef 92       	push	r14
    2864:	ff 92       	push	r15
    2866:	0f 93       	push	r16
    2868:	1f 93       	push	r17
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	8c 01       	movw	r16, r24
    2870:	c4 2f       	mov	r28, r20
    2872:	79 01       	movw	r14, r18
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    2874:	6d 30       	cpi	r22, 0x0D	; 13
    2876:	19 f1       	breq	.+70     	; 0x28be <u8x8_d_ssd1306_128x32_generic+0x5c>
    2878:	28 f4       	brcc	.+10     	; 0x2884 <u8x8_d_ssd1306_128x32_generic+0x22>
    287a:	6a 30       	cpi	r22, 0x0A	; 10
    287c:	49 f0       	breq	.+18     	; 0x2890 <u8x8_d_ssd1306_128x32_generic+0x2e>
    287e:	6b 30       	cpi	r22, 0x0B	; 11
    2880:	81 f0       	breq	.+32     	; 0x28a2 <u8x8_d_ssd1306_128x32_generic+0x40>
    2882:	78 c0       	rjmp	.+240    	; 0x2974 <u8x8_d_ssd1306_128x32_generic+0x112>
    2884:	6e 30       	cpi	r22, 0x0E	; 14
    2886:	b9 f1       	breq	.+110    	; 0x28f6 <u8x8_d_ssd1306_128x32_generic+0x94>
    2888:	6f 30       	cpi	r22, 0x0F	; 15
    288a:	09 f4       	brne	.+2      	; 0x288e <u8x8_d_ssd1306_128x32_generic+0x2c>
    288c:	43 c0       	rjmp	.+134    	; 0x2914 <u8x8_d_ssd1306_128x32_generic+0xb2>
    288e:	72 c0       	rjmp	.+228    	; 0x2974 <u8x8_d_ssd1306_128x32_generic+0x112>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    2890:	0e 94 93 13 	call	0x2726	; 0x2726 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
    2894:	63 e5       	ldi	r22, 0x53	; 83
    2896:	72 e0       	ldi	r23, 0x02	; 2
    2898:	c8 01       	movw	r24, r16
    289a:	0e 94 be 12 	call	0x257c	; 0x257c <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    289e:	81 e0       	ldi	r24, 0x01	; 1
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
      break;
    28a0:	6a c0       	rjmp	.+212    	; 0x2976 <u8x8_d_ssd1306_128x32_generic+0x114>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    28a2:	41 11       	cpse	r20, r1
    28a4:	06 c0       	rjmp	.+12     	; 0x28b2 <u8x8_d_ssd1306_128x32_generic+0x50>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
    28a6:	6e e4       	ldi	r22, 0x4E	; 78
    28a8:	72 e0       	ldi	r23, 0x02	; 2
    28aa:	0e 94 be 12 	call	0x257c	; 0x257c <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	62 c0       	rjmp	.+196    	; 0x2976 <u8x8_d_ssd1306_128x32_generic+0x114>
      break;
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
    28b2:	69 e4       	ldi	r22, 0x49	; 73
    28b4:	72 e0       	ldi	r23, 0x02	; 2
    28b6:	0e 94 be 12 	call	0x257c	; 0x257c <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	5c c0       	rjmp	.+184    	; 0x2976 <u8x8_d_ssd1306_128x32_generic+0x114>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    28be:	41 11       	cpse	r20, r1
    28c0:	0d c0       	rjmp	.+26     	; 0x28dc <u8x8_d_ssd1306_128x32_generic+0x7a>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
    28c2:	62 e4       	ldi	r22, 0x42	; 66
    28c4:	72 e0       	ldi	r23, 0x02	; 2
    28c6:	0e 94 be 12 	call	0x257c	; 0x257c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    28ca:	d8 01       	movw	r26, r16
    28cc:	ed 91       	ld	r30, X+
    28ce:	fc 91       	ld	r31, X
    28d0:	11 97       	sbiw	r26, 0x01	; 1
    28d2:	82 89       	ldd	r24, Z+18	; 0x12
    28d4:	54 96       	adiw	r26, 0x14	; 20
    28d6:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	4d c0       	rjmp	.+154    	; 0x2976 <u8x8_d_ssd1306_128x32_generic+0x114>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
    28dc:	6b e3       	ldi	r22, 0x3B	; 59
    28de:	72 e0       	ldi	r23, 0x02	; 2
    28e0:	0e 94 be 12 	call	0x257c	; 0x257c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    28e4:	d8 01       	movw	r26, r16
    28e6:	ed 91       	ld	r30, X+
    28e8:	fc 91       	ld	r31, X
    28ea:	11 97       	sbiw	r26, 0x01	; 1
    28ec:	83 89       	ldd	r24, Z+19	; 0x13
    28ee:	54 96       	adiw	r26, 0x14	; 20
    28f0:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	40 c0       	rjmp	.+128    	; 0x2976 <u8x8_d_ssd1306_128x32_generic+0x114>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    28f6:	0e 94 a8 12 	call	0x2550	; 0x2550 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    28fa:	61 e8       	ldi	r22, 0x81	; 129
    28fc:	c8 01       	movw	r24, r16
    28fe:	0e 94 88 12 	call	0x2510	; 0x2510 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    2902:	6c 2f       	mov	r22, r28
    2904:	c8 01       	movw	r24, r16
    2906:	0e 94 93 12 	call	0x2526	; 0x2526 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    290a:	c8 01       	movw	r24, r16
    290c:	0e 94 b3 12 	call	0x2566	; 0x2566 <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    2912:	31 c0       	rjmp	.+98     	; 0x2976 <u8x8_d_ssd1306_128x32_generic+0x114>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    2914:	0e 94 a8 12 	call	0x2550	; 0x2550 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    2918:	f7 01       	movw	r30, r14
    291a:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    291c:	dd 0f       	add	r29, r29
    291e:	dd 0f       	add	r29, r29
    2920:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    2922:	d8 01       	movw	r26, r16
    2924:	54 96       	adiw	r26, 0x14	; 20
    2926:	8c 91       	ld	r24, X
    2928:	d8 0f       	add	r29, r24
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    292a:	6d 2f       	mov	r22, r29
    292c:	62 95       	swap	r22
    292e:	6f 70       	andi	r22, 0x0F	; 15
    2930:	60 61       	ori	r22, 0x10	; 16
    2932:	c8 01       	movw	r24, r16
    2934:	0e 94 88 12 	call	0x2510	; 0x2510 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
    2938:	6d 2f       	mov	r22, r29
    293a:	6f 70       	andi	r22, 0x0F	; 15
    293c:	c8 01       	movw	r24, r16
    293e:	0e 94 88 12 	call	0x2510	; 0x2510 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
    2942:	f7 01       	movw	r30, r14
    2944:	64 81       	ldd	r22, Z+4	; 0x04
    2946:	60 6b       	ori	r22, 0xB0	; 176
    2948:	c8 01       	movw	r24, r16
    294a:	0e 94 88 12 	call	0x2510	; 0x2510 <u8x8_cad_SendCmd>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    294e:	d7 01       	movw	r26, r14
    2950:	4d 91       	ld	r20, X+
    2952:	5c 91       	ld	r21, X
    2954:	11 97       	sbiw	r26, 0x01	; 1
    2956:	12 96       	adiw	r26, 0x02	; 2
    2958:	6c 91       	ld	r22, X
    295a:	66 0f       	add	r22, r22
    295c:	66 0f       	add	r22, r22
    295e:	66 0f       	add	r22, r22
    2960:	c8 01       	movw	r24, r16
    2962:	0e 94 9e 12 	call	0x253c	; 0x253c <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    2966:	c1 50       	subi	r28, 0x01	; 1
      } while( arg_int > 0 );
    2968:	91 f7       	brne	.-28     	; 0x294e <u8x8_d_ssd1306_128x32_generic+0xec>
      
      u8x8_cad_EndTransfer(u8x8);
    296a:	c8 01       	movw	r24, r16
    296c:	0e 94 b3 12 	call	0x2566	; 0x2566 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    2970:	81 e0       	ldi	r24, 0x01	; 1
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <u8x8_d_ssd1306_128x32_generic+0x114>
    default:
      return 0;
    2974:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	08 95       	ret

00002984 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
    2984:	69 30       	cpi	r22, 0x09	; 9
    2986:	31 f4       	brne	.+12     	; 0x2994 <u8x8_d_ssd1306_128x32_univision+0x10>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
    2988:	63 e2       	ldi	r22, 0x23	; 35
    298a:	72 e0       	ldi	r23, 0x02	; 2
    298c:	0e 94 8b 13 	call	0x2716	; 0x2716 <u8x8_d_helper_display_setup_memory>
      return 1;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	08 95       	ret
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
    2994:	0e 94 31 14 	call	0x2862	; 0x2862 <u8x8_d_ssd1306_128x32_generic>
}
    2998:	08 95       	ret

0000299a <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    299a:	dc 01       	movw	r26, r24
    299c:	1a 96       	adiw	r26, 0x0a	; 10
    299e:	ed 91       	ld	r30, X+
    29a0:	fc 91       	ld	r31, X
    29a2:	1b 97       	sbiw	r26, 0x0b	; 11
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	09 95       	icall
    29aa:	08 95       	ret

000029ac <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	08 95       	ret

000029b0 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    29b0:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    29b2:	11 82       	std	Z+1, r1	; 0x01
    29b4:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    29b6:	86 ed       	ldi	r24, 0xD6	; 214
    29b8:	94 e1       	ldi	r25, 0x14	; 20
    29ba:	95 83       	std	Z+5, r25	; 0x05
    29bc:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    29be:	97 83       	std	Z+7, r25	; 0x07
    29c0:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    29c2:	91 87       	std	Z+9, r25	; 0x09
    29c4:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    29c6:	93 87       	std	Z+11, r25	; 0x0b
    29c8:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    29ca:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    29cc:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    29ce:	14 86       	std	Z+12, r1	; 0x0c
    29d0:	15 86       	std	Z+13, r1	; 0x0d
    29d2:	16 86       	std	Z+14, r1	; 0x0e
    29d4:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    29d6:	8f ef       	ldi	r24, 0xFF	; 255
    29d8:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    29da:	82 8f       	std	Z+26, r24	; 0x1a
    29dc:	08 95       	ret

000029de <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    29de:	af 92       	push	r10
    29e0:	bf 92       	push	r11
    29e2:	cf 92       	push	r12
    29e4:	df 92       	push	r13
    29e6:	ef 92       	push	r14
    29e8:	ff 92       	push	r15
    29ea:	0f 93       	push	r16
    29ec:	1f 93       	push	r17
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	ec 01       	movw	r28, r24
    29f4:	5b 01       	movw	r10, r22
    29f6:	6a 01       	movw	r12, r20
    29f8:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    29fa:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    29fe:	bd 82       	std	Y+5, r11	; 0x05
    2a00:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    2a02:	df 82       	std	Y+7, r13	; 0x07
    2a04:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    2a06:	f9 86       	std	Y+9, r15	; 0x09
    2a08:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    2a0a:	1b 87       	std	Y+11, r17	; 0x0b
    2a0c:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    2a0e:	ce 01       	movw	r24, r28
    2a10:	0e 94 ef 13 	call	0x27de	; 0x27de <u8x8_SetupMemory>
}
    2a14:	df 91       	pop	r29
    2a16:	cf 91       	pop	r28
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	ff 90       	pop	r15
    2a1e:	ef 90       	pop	r14
    2a20:	df 90       	pop	r13
    2a22:	cf 90       	pop	r12
    2a24:	bf 90       	pop	r11
    2a26:	af 90       	pop	r10
    2a28:	08 95       	ret

00002a2a <__fixunssfsi>:
    2a2a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__fp_splitA>
    2a2e:	88 f0       	brcs	.+34     	; 0x2a52 <__fixunssfsi+0x28>
    2a30:	9f 57       	subi	r25, 0x7F	; 127
    2a32:	98 f0       	brcs	.+38     	; 0x2a5a <__fixunssfsi+0x30>
    2a34:	b9 2f       	mov	r27, r25
    2a36:	99 27       	eor	r25, r25
    2a38:	b7 51       	subi	r27, 0x17	; 23
    2a3a:	b0 f0       	brcs	.+44     	; 0x2a68 <__fixunssfsi+0x3e>
    2a3c:	e1 f0       	breq	.+56     	; 0x2a76 <__fixunssfsi+0x4c>
    2a3e:	66 0f       	add	r22, r22
    2a40:	77 1f       	adc	r23, r23
    2a42:	88 1f       	adc	r24, r24
    2a44:	99 1f       	adc	r25, r25
    2a46:	1a f0       	brmi	.+6      	; 0x2a4e <__fixunssfsi+0x24>
    2a48:	ba 95       	dec	r27
    2a4a:	c9 f7       	brne	.-14     	; 0x2a3e <__fixunssfsi+0x14>
    2a4c:	14 c0       	rjmp	.+40     	; 0x2a76 <__fixunssfsi+0x4c>
    2a4e:	b1 30       	cpi	r27, 0x01	; 1
    2a50:	91 f0       	breq	.+36     	; 0x2a76 <__fixunssfsi+0x4c>
    2a52:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__fp_zero>
    2a56:	b1 e0       	ldi	r27, 0x01	; 1
    2a58:	08 95       	ret
    2a5a:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__fp_zero>
    2a5e:	67 2f       	mov	r22, r23
    2a60:	78 2f       	mov	r23, r24
    2a62:	88 27       	eor	r24, r24
    2a64:	b8 5f       	subi	r27, 0xF8	; 248
    2a66:	39 f0       	breq	.+14     	; 0x2a76 <__fixunssfsi+0x4c>
    2a68:	b9 3f       	cpi	r27, 0xF9	; 249
    2a6a:	cc f3       	brlt	.-14     	; 0x2a5e <__fixunssfsi+0x34>
    2a6c:	86 95       	lsr	r24
    2a6e:	77 95       	ror	r23
    2a70:	67 95       	ror	r22
    2a72:	b3 95       	inc	r27
    2a74:	d9 f7       	brne	.-10     	; 0x2a6c <__fixunssfsi+0x42>
    2a76:	3e f4       	brtc	.+14     	; 0x2a86 <__fixunssfsi+0x5c>
    2a78:	90 95       	com	r25
    2a7a:	80 95       	com	r24
    2a7c:	70 95       	com	r23
    2a7e:	61 95       	neg	r22
    2a80:	7f 4f       	sbci	r23, 0xFF	; 255
    2a82:	8f 4f       	sbci	r24, 0xFF	; 255
    2a84:	9f 4f       	sbci	r25, 0xFF	; 255
    2a86:	08 95       	ret

00002a88 <__floatunsisf>:
    2a88:	e8 94       	clt
    2a8a:	09 c0       	rjmp	.+18     	; 0x2a9e <__floatsisf+0x12>

00002a8c <__floatsisf>:
    2a8c:	97 fb       	bst	r25, 7
    2a8e:	3e f4       	brtc	.+14     	; 0x2a9e <__floatsisf+0x12>
    2a90:	90 95       	com	r25
    2a92:	80 95       	com	r24
    2a94:	70 95       	com	r23
    2a96:	61 95       	neg	r22
    2a98:	7f 4f       	sbci	r23, 0xFF	; 255
    2a9a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9e:	99 23       	and	r25, r25
    2aa0:	a9 f0       	breq	.+42     	; 0x2acc <__floatsisf+0x40>
    2aa2:	f9 2f       	mov	r31, r25
    2aa4:	96 e9       	ldi	r25, 0x96	; 150
    2aa6:	bb 27       	eor	r27, r27
    2aa8:	93 95       	inc	r25
    2aaa:	f6 95       	lsr	r31
    2aac:	87 95       	ror	r24
    2aae:	77 95       	ror	r23
    2ab0:	67 95       	ror	r22
    2ab2:	b7 95       	ror	r27
    2ab4:	f1 11       	cpse	r31, r1
    2ab6:	f8 cf       	rjmp	.-16     	; 0x2aa8 <__floatsisf+0x1c>
    2ab8:	fa f4       	brpl	.+62     	; 0x2af8 <__floatsisf+0x6c>
    2aba:	bb 0f       	add	r27, r27
    2abc:	11 f4       	brne	.+4      	; 0x2ac2 <__floatsisf+0x36>
    2abe:	60 ff       	sbrs	r22, 0
    2ac0:	1b c0       	rjmp	.+54     	; 0x2af8 <__floatsisf+0x6c>
    2ac2:	6f 5f       	subi	r22, 0xFF	; 255
    2ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aca:	16 c0       	rjmp	.+44     	; 0x2af8 <__floatsisf+0x6c>
    2acc:	88 23       	and	r24, r24
    2ace:	11 f0       	breq	.+4      	; 0x2ad4 <__floatsisf+0x48>
    2ad0:	96 e9       	ldi	r25, 0x96	; 150
    2ad2:	11 c0       	rjmp	.+34     	; 0x2af6 <__floatsisf+0x6a>
    2ad4:	77 23       	and	r23, r23
    2ad6:	21 f0       	breq	.+8      	; 0x2ae0 <__floatsisf+0x54>
    2ad8:	9e e8       	ldi	r25, 0x8E	; 142
    2ada:	87 2f       	mov	r24, r23
    2adc:	76 2f       	mov	r23, r22
    2ade:	05 c0       	rjmp	.+10     	; 0x2aea <__floatsisf+0x5e>
    2ae0:	66 23       	and	r22, r22
    2ae2:	71 f0       	breq	.+28     	; 0x2b00 <__floatsisf+0x74>
    2ae4:	96 e8       	ldi	r25, 0x86	; 134
    2ae6:	86 2f       	mov	r24, r22
    2ae8:	70 e0       	ldi	r23, 0x00	; 0
    2aea:	60 e0       	ldi	r22, 0x00	; 0
    2aec:	2a f0       	brmi	.+10     	; 0x2af8 <__floatsisf+0x6c>
    2aee:	9a 95       	dec	r25
    2af0:	66 0f       	add	r22, r22
    2af2:	77 1f       	adc	r23, r23
    2af4:	88 1f       	adc	r24, r24
    2af6:	da f7       	brpl	.-10     	; 0x2aee <__floatsisf+0x62>
    2af8:	88 0f       	add	r24, r24
    2afa:	96 95       	lsr	r25
    2afc:	87 95       	ror	r24
    2afe:	97 f9       	bld	r25, 7
    2b00:	08 95       	ret

00002b02 <__fp_split3>:
    2b02:	57 fd       	sbrc	r21, 7
    2b04:	90 58       	subi	r25, 0x80	; 128
    2b06:	44 0f       	add	r20, r20
    2b08:	55 1f       	adc	r21, r21
    2b0a:	59 f0       	breq	.+22     	; 0x2b22 <__fp_splitA+0x10>
    2b0c:	5f 3f       	cpi	r21, 0xFF	; 255
    2b0e:	71 f0       	breq	.+28     	; 0x2b2c <__fp_splitA+0x1a>
    2b10:	47 95       	ror	r20

00002b12 <__fp_splitA>:
    2b12:	88 0f       	add	r24, r24
    2b14:	97 fb       	bst	r25, 7
    2b16:	99 1f       	adc	r25, r25
    2b18:	61 f0       	breq	.+24     	; 0x2b32 <__fp_splitA+0x20>
    2b1a:	9f 3f       	cpi	r25, 0xFF	; 255
    2b1c:	79 f0       	breq	.+30     	; 0x2b3c <__fp_splitA+0x2a>
    2b1e:	87 95       	ror	r24
    2b20:	08 95       	ret
    2b22:	12 16       	cp	r1, r18
    2b24:	13 06       	cpc	r1, r19
    2b26:	14 06       	cpc	r1, r20
    2b28:	55 1f       	adc	r21, r21
    2b2a:	f2 cf       	rjmp	.-28     	; 0x2b10 <__fp_split3+0xe>
    2b2c:	46 95       	lsr	r20
    2b2e:	f1 df       	rcall	.-30     	; 0x2b12 <__fp_splitA>
    2b30:	08 c0       	rjmp	.+16     	; 0x2b42 <__fp_splitA+0x30>
    2b32:	16 16       	cp	r1, r22
    2b34:	17 06       	cpc	r1, r23
    2b36:	18 06       	cpc	r1, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	f1 cf       	rjmp	.-30     	; 0x2b1e <__fp_splitA+0xc>
    2b3c:	86 95       	lsr	r24
    2b3e:	71 05       	cpc	r23, r1
    2b40:	61 05       	cpc	r22, r1
    2b42:	08 94       	sec
    2b44:	08 95       	ret

00002b46 <__fp_zero>:
    2b46:	e8 94       	clt

00002b48 <__fp_szero>:
    2b48:	bb 27       	eor	r27, r27
    2b4a:	66 27       	eor	r22, r22
    2b4c:	77 27       	eor	r23, r23
    2b4e:	cb 01       	movw	r24, r22
    2b50:	97 f9       	bld	r25, 7
    2b52:	08 95       	ret

00002b54 <__mulsf3>:
    2b54:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__mulsf3x>
    2b58:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__fp_round>
    2b5c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <__fp_pscA>
    2b60:	38 f0       	brcs	.+14     	; 0x2b70 <__mulsf3+0x1c>
    2b62:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__fp_pscB>
    2b66:	20 f0       	brcs	.+8      	; 0x2b70 <__mulsf3+0x1c>
    2b68:	95 23       	and	r25, r21
    2b6a:	11 f0       	breq	.+4      	; 0x2b70 <__mulsf3+0x1c>
    2b6c:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__fp_inf>
    2b70:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__fp_nan>
    2b74:	11 24       	eor	r1, r1
    2b76:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_szero>

00002b7a <__mulsf3x>:
    2b7a:	0e 94 81 15 	call	0x2b02	; 0x2b02 <__fp_split3>
    2b7e:	70 f3       	brcs	.-36     	; 0x2b5c <__mulsf3+0x8>

00002b80 <__mulsf3_pse>:
    2b80:	95 9f       	mul	r25, r21
    2b82:	c1 f3       	breq	.-16     	; 0x2b74 <__mulsf3+0x20>
    2b84:	95 0f       	add	r25, r21
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	55 1f       	adc	r21, r21
    2b8a:	62 9f       	mul	r22, r18
    2b8c:	f0 01       	movw	r30, r0
    2b8e:	72 9f       	mul	r23, r18
    2b90:	bb 27       	eor	r27, r27
    2b92:	f0 0d       	add	r31, r0
    2b94:	b1 1d       	adc	r27, r1
    2b96:	63 9f       	mul	r22, r19
    2b98:	aa 27       	eor	r26, r26
    2b9a:	f0 0d       	add	r31, r0
    2b9c:	b1 1d       	adc	r27, r1
    2b9e:	aa 1f       	adc	r26, r26
    2ba0:	64 9f       	mul	r22, r20
    2ba2:	66 27       	eor	r22, r22
    2ba4:	b0 0d       	add	r27, r0
    2ba6:	a1 1d       	adc	r26, r1
    2ba8:	66 1f       	adc	r22, r22
    2baa:	82 9f       	mul	r24, r18
    2bac:	22 27       	eor	r18, r18
    2bae:	b0 0d       	add	r27, r0
    2bb0:	a1 1d       	adc	r26, r1
    2bb2:	62 1f       	adc	r22, r18
    2bb4:	73 9f       	mul	r23, r19
    2bb6:	b0 0d       	add	r27, r0
    2bb8:	a1 1d       	adc	r26, r1
    2bba:	62 1f       	adc	r22, r18
    2bbc:	83 9f       	mul	r24, r19
    2bbe:	a0 0d       	add	r26, r0
    2bc0:	61 1d       	adc	r22, r1
    2bc2:	22 1f       	adc	r18, r18
    2bc4:	74 9f       	mul	r23, r20
    2bc6:	33 27       	eor	r19, r19
    2bc8:	a0 0d       	add	r26, r0
    2bca:	61 1d       	adc	r22, r1
    2bcc:	23 1f       	adc	r18, r19
    2bce:	84 9f       	mul	r24, r20
    2bd0:	60 0d       	add	r22, r0
    2bd2:	21 1d       	adc	r18, r1
    2bd4:	82 2f       	mov	r24, r18
    2bd6:	76 2f       	mov	r23, r22
    2bd8:	6a 2f       	mov	r22, r26
    2bda:	11 24       	eor	r1, r1
    2bdc:	9f 57       	subi	r25, 0x7F	; 127
    2bde:	50 40       	sbci	r21, 0x00	; 0
    2be0:	9a f0       	brmi	.+38     	; 0x2c08 <__mulsf3_pse+0x88>
    2be2:	f1 f0       	breq	.+60     	; 0x2c20 <__mulsf3_pse+0xa0>
    2be4:	88 23       	and	r24, r24
    2be6:	4a f0       	brmi	.+18     	; 0x2bfa <__mulsf3_pse+0x7a>
    2be8:	ee 0f       	add	r30, r30
    2bea:	ff 1f       	adc	r31, r31
    2bec:	bb 1f       	adc	r27, r27
    2bee:	66 1f       	adc	r22, r22
    2bf0:	77 1f       	adc	r23, r23
    2bf2:	88 1f       	adc	r24, r24
    2bf4:	91 50       	subi	r25, 0x01	; 1
    2bf6:	50 40       	sbci	r21, 0x00	; 0
    2bf8:	a9 f7       	brne	.-22     	; 0x2be4 <__mulsf3_pse+0x64>
    2bfa:	9e 3f       	cpi	r25, 0xFE	; 254
    2bfc:	51 05       	cpc	r21, r1
    2bfe:	80 f0       	brcs	.+32     	; 0x2c20 <__mulsf3_pse+0xa0>
    2c00:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__fp_inf>
    2c04:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_szero>
    2c08:	5f 3f       	cpi	r21, 0xFF	; 255
    2c0a:	e4 f3       	brlt	.-8      	; 0x2c04 <__mulsf3_pse+0x84>
    2c0c:	98 3e       	cpi	r25, 0xE8	; 232
    2c0e:	d4 f3       	brlt	.-12     	; 0x2c04 <__mulsf3_pse+0x84>
    2c10:	86 95       	lsr	r24
    2c12:	77 95       	ror	r23
    2c14:	67 95       	ror	r22
    2c16:	b7 95       	ror	r27
    2c18:	f7 95       	ror	r31
    2c1a:	e7 95       	ror	r30
    2c1c:	9f 5f       	subi	r25, 0xFF	; 255
    2c1e:	c1 f7       	brne	.-16     	; 0x2c10 <__mulsf3_pse+0x90>
    2c20:	fe 2b       	or	r31, r30
    2c22:	88 0f       	add	r24, r24
    2c24:	91 1d       	adc	r25, r1
    2c26:	96 95       	lsr	r25
    2c28:	87 95       	ror	r24
    2c2a:	97 f9       	bld	r25, 7
    2c2c:	08 95       	ret

00002c2e <__fp_inf>:
    2c2e:	97 f9       	bld	r25, 7
    2c30:	9f 67       	ori	r25, 0x7F	; 127
    2c32:	80 e8       	ldi	r24, 0x80	; 128
    2c34:	70 e0       	ldi	r23, 0x00	; 0
    2c36:	60 e0       	ldi	r22, 0x00	; 0
    2c38:	08 95       	ret

00002c3a <__fp_nan>:
    2c3a:	9f ef       	ldi	r25, 0xFF	; 255
    2c3c:	80 ec       	ldi	r24, 0xC0	; 192
    2c3e:	08 95       	ret

00002c40 <__fp_pscA>:
    2c40:	00 24       	eor	r0, r0
    2c42:	0a 94       	dec	r0
    2c44:	16 16       	cp	r1, r22
    2c46:	17 06       	cpc	r1, r23
    2c48:	18 06       	cpc	r1, r24
    2c4a:	09 06       	cpc	r0, r25
    2c4c:	08 95       	ret

00002c4e <__fp_pscB>:
    2c4e:	00 24       	eor	r0, r0
    2c50:	0a 94       	dec	r0
    2c52:	12 16       	cp	r1, r18
    2c54:	13 06       	cpc	r1, r19
    2c56:	14 06       	cpc	r1, r20
    2c58:	05 06       	cpc	r0, r21
    2c5a:	08 95       	ret

00002c5c <__fp_round>:
    2c5c:	09 2e       	mov	r0, r25
    2c5e:	03 94       	inc	r0
    2c60:	00 0c       	add	r0, r0
    2c62:	11 f4       	brne	.+4      	; 0x2c68 <__fp_round+0xc>
    2c64:	88 23       	and	r24, r24
    2c66:	52 f0       	brmi	.+20     	; 0x2c7c <__fp_round+0x20>
    2c68:	bb 0f       	add	r27, r27
    2c6a:	40 f4       	brcc	.+16     	; 0x2c7c <__fp_round+0x20>
    2c6c:	bf 2b       	or	r27, r31
    2c6e:	11 f4       	brne	.+4      	; 0x2c74 <__fp_round+0x18>
    2c70:	60 ff       	sbrs	r22, 0
    2c72:	04 c0       	rjmp	.+8      	; 0x2c7c <__fp_round+0x20>
    2c74:	6f 5f       	subi	r22, 0xFF	; 255
    2c76:	7f 4f       	sbci	r23, 0xFF	; 255
    2c78:	8f 4f       	sbci	r24, 0xFF	; 255
    2c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7c:	08 95       	ret

00002c7e <__udivmodhi4>:
    2c7e:	aa 1b       	sub	r26, r26
    2c80:	bb 1b       	sub	r27, r27
    2c82:	51 e1       	ldi	r21, 0x11	; 17
    2c84:	07 c0       	rjmp	.+14     	; 0x2c94 <__udivmodhi4_ep>

00002c86 <__udivmodhi4_loop>:
    2c86:	aa 1f       	adc	r26, r26
    2c88:	bb 1f       	adc	r27, r27
    2c8a:	a6 17       	cp	r26, r22
    2c8c:	b7 07       	cpc	r27, r23
    2c8e:	10 f0       	brcs	.+4      	; 0x2c94 <__udivmodhi4_ep>
    2c90:	a6 1b       	sub	r26, r22
    2c92:	b7 0b       	sbc	r27, r23

00002c94 <__udivmodhi4_ep>:
    2c94:	88 1f       	adc	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	5a 95       	dec	r21
    2c9a:	a9 f7       	brne	.-22     	; 0x2c86 <__udivmodhi4_loop>
    2c9c:	80 95       	com	r24
    2c9e:	90 95       	com	r25
    2ca0:	bc 01       	movw	r22, r24
    2ca2:	cd 01       	movw	r24, r26
    2ca4:	08 95       	ret

00002ca6 <__divmodhi4>:
    2ca6:	97 fb       	bst	r25, 7
    2ca8:	07 2e       	mov	r0, r23
    2caa:	16 f4       	brtc	.+4      	; 0x2cb0 <__divmodhi4+0xa>
    2cac:	00 94       	com	r0
    2cae:	07 d0       	rcall	.+14     	; 0x2cbe <__divmodhi4_neg1>
    2cb0:	77 fd       	sbrc	r23, 7
    2cb2:	09 d0       	rcall	.+18     	; 0x2cc6 <__divmodhi4_neg2>
    2cb4:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__udivmodhi4>
    2cb8:	07 fc       	sbrc	r0, 7
    2cba:	05 d0       	rcall	.+10     	; 0x2cc6 <__divmodhi4_neg2>
    2cbc:	3e f4       	brtc	.+14     	; 0x2ccc <__divmodhi4_exit>

00002cbe <__divmodhi4_neg1>:
    2cbe:	90 95       	com	r25
    2cc0:	81 95       	neg	r24
    2cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc4:	08 95       	ret

00002cc6 <__divmodhi4_neg2>:
    2cc6:	70 95       	com	r23
    2cc8:	61 95       	neg	r22
    2cca:	7f 4f       	sbci	r23, 0xFF	; 255

00002ccc <__divmodhi4_exit>:
    2ccc:	08 95       	ret

00002cce <__udivmodsi4>:
    2cce:	a1 e2       	ldi	r26, 0x21	; 33
    2cd0:	1a 2e       	mov	r1, r26
    2cd2:	aa 1b       	sub	r26, r26
    2cd4:	bb 1b       	sub	r27, r27
    2cd6:	fd 01       	movw	r30, r26
    2cd8:	0d c0       	rjmp	.+26     	; 0x2cf4 <__udivmodsi4_ep>

00002cda <__udivmodsi4_loop>:
    2cda:	aa 1f       	adc	r26, r26
    2cdc:	bb 1f       	adc	r27, r27
    2cde:	ee 1f       	adc	r30, r30
    2ce0:	ff 1f       	adc	r31, r31
    2ce2:	a2 17       	cp	r26, r18
    2ce4:	b3 07       	cpc	r27, r19
    2ce6:	e4 07       	cpc	r30, r20
    2ce8:	f5 07       	cpc	r31, r21
    2cea:	20 f0       	brcs	.+8      	; 0x2cf4 <__udivmodsi4_ep>
    2cec:	a2 1b       	sub	r26, r18
    2cee:	b3 0b       	sbc	r27, r19
    2cf0:	e4 0b       	sbc	r30, r20
    2cf2:	f5 0b       	sbc	r31, r21

00002cf4 <__udivmodsi4_ep>:
    2cf4:	66 1f       	adc	r22, r22
    2cf6:	77 1f       	adc	r23, r23
    2cf8:	88 1f       	adc	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	1a 94       	dec	r1
    2cfe:	69 f7       	brne	.-38     	; 0x2cda <__udivmodsi4_loop>
    2d00:	60 95       	com	r22
    2d02:	70 95       	com	r23
    2d04:	80 95       	com	r24
    2d06:	90 95       	com	r25
    2d08:	9b 01       	movw	r18, r22
    2d0a:	ac 01       	movw	r20, r24
    2d0c:	bd 01       	movw	r22, r26
    2d0e:	cf 01       	movw	r24, r30
    2d10:	08 95       	ret

00002d12 <__umulhisi3>:
    2d12:	a2 9f       	mul	r26, r18
    2d14:	b0 01       	movw	r22, r0
    2d16:	b3 9f       	mul	r27, r19
    2d18:	c0 01       	movw	r24, r0
    2d1a:	a3 9f       	mul	r26, r19
    2d1c:	70 0d       	add	r23, r0
    2d1e:	81 1d       	adc	r24, r1
    2d20:	11 24       	eor	r1, r1
    2d22:	91 1d       	adc	r25, r1
    2d24:	b2 9f       	mul	r27, r18
    2d26:	70 0d       	add	r23, r0
    2d28:	81 1d       	adc	r24, r1
    2d2a:	11 24       	eor	r1, r1
    2d2c:	91 1d       	adc	r25, r1
    2d2e:	08 95       	ret

00002d30 <__muluhisi3>:
    2d30:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__umulhisi3>
    2d34:	a5 9f       	mul	r26, r21
    2d36:	90 0d       	add	r25, r0
    2d38:	b4 9f       	mul	r27, r20
    2d3a:	90 0d       	add	r25, r0
    2d3c:	a4 9f       	mul	r26, r20
    2d3e:	80 0d       	add	r24, r0
    2d40:	91 1d       	adc	r25, r1
    2d42:	11 24       	eor	r1, r1
    2d44:	08 95       	ret

00002d46 <__mulshisi3>:
    2d46:	b7 ff       	sbrs	r27, 7
    2d48:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__muluhisi3>

00002d4c <__mulohisi3>:
    2d4c:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__muluhisi3>
    2d50:	82 1b       	sub	r24, r18
    2d52:	93 0b       	sbc	r25, r19
    2d54:	08 95       	ret

00002d56 <memset>:
    2d56:	dc 01       	movw	r26, r24
    2d58:	01 c0       	rjmp	.+2      	; 0x2d5c <memset+0x6>
    2d5a:	6d 93       	st	X+, r22
    2d5c:	41 50       	subi	r20, 0x01	; 1
    2d5e:	50 40       	sbci	r21, 0x00	; 0
    2d60:	e0 f7       	brcc	.-8      	; 0x2d5a <memset+0x4>
    2d62:	08 95       	ret

00002d64 <sprintf>:
    2d64:	ae e0       	ldi	r26, 0x0E	; 14
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	e8 eb       	ldi	r30, 0xB8	; 184
    2d6a:	f6 e1       	ldi	r31, 0x16	; 22
    2d6c:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <__prologue_saves__+0x1c>
    2d70:	0d 89       	ldd	r16, Y+21	; 0x15
    2d72:	1e 89       	ldd	r17, Y+22	; 0x16
    2d74:	86 e0       	ldi	r24, 0x06	; 6
    2d76:	8c 83       	std	Y+4, r24	; 0x04
    2d78:	1a 83       	std	Y+2, r17	; 0x02
    2d7a:	09 83       	std	Y+1, r16	; 0x01
    2d7c:	8f ef       	ldi	r24, 0xFF	; 255
    2d7e:	9f e7       	ldi	r25, 0x7F	; 127
    2d80:	9e 83       	std	Y+6, r25	; 0x06
    2d82:	8d 83       	std	Y+5, r24	; 0x05
    2d84:	ae 01       	movw	r20, r28
    2d86:	47 5e       	subi	r20, 0xE7	; 231
    2d88:	5f 4f       	sbci	r21, 0xFF	; 255
    2d8a:	6f 89       	ldd	r22, Y+23	; 0x17
    2d8c:	78 8d       	ldd	r23, Y+24	; 0x18
    2d8e:	ce 01       	movw	r24, r28
    2d90:	01 96       	adiw	r24, 0x01	; 1
    2d92:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <vfprintf>
    2d96:	ef 81       	ldd	r30, Y+7	; 0x07
    2d98:	f8 85       	ldd	r31, Y+8	; 0x08
    2d9a:	e0 0f       	add	r30, r16
    2d9c:	f1 1f       	adc	r31, r17
    2d9e:	10 82       	st	Z, r1
    2da0:	2e 96       	adiw	r28, 0x0e	; 14
    2da2:	e4 e0       	ldi	r30, 0x04	; 4
    2da4:	0c 94 8f 19 	jmp	0x331e	; 0x331e <__epilogue_restores__+0x1c>

00002da8 <vfprintf>:
    2da8:	ab e0       	ldi	r26, 0x0B	; 11
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	ea ed       	ldi	r30, 0xDA	; 218
    2dae:	f6 e1       	ldi	r31, 0x16	; 22
    2db0:	0c 94 65 19 	jmp	0x32ca	; 0x32ca <__prologue_saves__>
    2db4:	6c 01       	movw	r12, r24
    2db6:	7b 01       	movw	r14, r22
    2db8:	8a 01       	movw	r16, r20
    2dba:	fc 01       	movw	r30, r24
    2dbc:	17 82       	std	Z+7, r1	; 0x07
    2dbe:	16 82       	std	Z+6, r1	; 0x06
    2dc0:	83 81       	ldd	r24, Z+3	; 0x03
    2dc2:	81 ff       	sbrs	r24, 1
    2dc4:	cc c1       	rjmp	.+920    	; 0x315e <vfprintf+0x3b6>
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	3c 01       	movw	r6, r24
    2dcc:	f6 01       	movw	r30, r12
    2dce:	93 81       	ldd	r25, Z+3	; 0x03
    2dd0:	f7 01       	movw	r30, r14
    2dd2:	93 fd       	sbrc	r25, 3
    2dd4:	85 91       	lpm	r24, Z+
    2dd6:	93 ff       	sbrs	r25, 3
    2dd8:	81 91       	ld	r24, Z+
    2dda:	7f 01       	movw	r14, r30
    2ddc:	88 23       	and	r24, r24
    2dde:	09 f4       	brne	.+2      	; 0x2de2 <vfprintf+0x3a>
    2de0:	ba c1       	rjmp	.+884    	; 0x3156 <vfprintf+0x3ae>
    2de2:	85 32       	cpi	r24, 0x25	; 37
    2de4:	39 f4       	brne	.+14     	; 0x2df4 <vfprintf+0x4c>
    2de6:	93 fd       	sbrc	r25, 3
    2de8:	85 91       	lpm	r24, Z+
    2dea:	93 ff       	sbrs	r25, 3
    2dec:	81 91       	ld	r24, Z+
    2dee:	7f 01       	movw	r14, r30
    2df0:	85 32       	cpi	r24, 0x25	; 37
    2df2:	29 f4       	brne	.+10     	; 0x2dfe <vfprintf+0x56>
    2df4:	b6 01       	movw	r22, r12
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 cb 18 	call	0x3196	; 0x3196 <fputc>
    2dfc:	e7 cf       	rjmp	.-50     	; 0x2dcc <vfprintf+0x24>
    2dfe:	91 2c       	mov	r9, r1
    2e00:	21 2c       	mov	r2, r1
    2e02:	31 2c       	mov	r3, r1
    2e04:	ff e1       	ldi	r31, 0x1F	; 31
    2e06:	f3 15       	cp	r31, r3
    2e08:	d8 f0       	brcs	.+54     	; 0x2e40 <vfprintf+0x98>
    2e0a:	8b 32       	cpi	r24, 0x2B	; 43
    2e0c:	79 f0       	breq	.+30     	; 0x2e2c <vfprintf+0x84>
    2e0e:	38 f4       	brcc	.+14     	; 0x2e1e <vfprintf+0x76>
    2e10:	80 32       	cpi	r24, 0x20	; 32
    2e12:	79 f0       	breq	.+30     	; 0x2e32 <vfprintf+0x8a>
    2e14:	83 32       	cpi	r24, 0x23	; 35
    2e16:	a1 f4       	brne	.+40     	; 0x2e40 <vfprintf+0x98>
    2e18:	23 2d       	mov	r18, r3
    2e1a:	20 61       	ori	r18, 0x10	; 16
    2e1c:	1d c0       	rjmp	.+58     	; 0x2e58 <vfprintf+0xb0>
    2e1e:	8d 32       	cpi	r24, 0x2D	; 45
    2e20:	61 f0       	breq	.+24     	; 0x2e3a <vfprintf+0x92>
    2e22:	80 33       	cpi	r24, 0x30	; 48
    2e24:	69 f4       	brne	.+26     	; 0x2e40 <vfprintf+0x98>
    2e26:	23 2d       	mov	r18, r3
    2e28:	21 60       	ori	r18, 0x01	; 1
    2e2a:	16 c0       	rjmp	.+44     	; 0x2e58 <vfprintf+0xb0>
    2e2c:	83 2d       	mov	r24, r3
    2e2e:	82 60       	ori	r24, 0x02	; 2
    2e30:	38 2e       	mov	r3, r24
    2e32:	e3 2d       	mov	r30, r3
    2e34:	e4 60       	ori	r30, 0x04	; 4
    2e36:	3e 2e       	mov	r3, r30
    2e38:	2a c0       	rjmp	.+84     	; 0x2e8e <vfprintf+0xe6>
    2e3a:	f3 2d       	mov	r31, r3
    2e3c:	f8 60       	ori	r31, 0x08	; 8
    2e3e:	1d c0       	rjmp	.+58     	; 0x2e7a <vfprintf+0xd2>
    2e40:	37 fc       	sbrc	r3, 7
    2e42:	2d c0       	rjmp	.+90     	; 0x2e9e <vfprintf+0xf6>
    2e44:	20 ed       	ldi	r18, 0xD0	; 208
    2e46:	28 0f       	add	r18, r24
    2e48:	2a 30       	cpi	r18, 0x0A	; 10
    2e4a:	40 f0       	brcs	.+16     	; 0x2e5c <vfprintf+0xb4>
    2e4c:	8e 32       	cpi	r24, 0x2E	; 46
    2e4e:	b9 f4       	brne	.+46     	; 0x2e7e <vfprintf+0xd6>
    2e50:	36 fc       	sbrc	r3, 6
    2e52:	81 c1       	rjmp	.+770    	; 0x3156 <vfprintf+0x3ae>
    2e54:	23 2d       	mov	r18, r3
    2e56:	20 64       	ori	r18, 0x40	; 64
    2e58:	32 2e       	mov	r3, r18
    2e5a:	19 c0       	rjmp	.+50     	; 0x2e8e <vfprintf+0xe6>
    2e5c:	36 fe       	sbrs	r3, 6
    2e5e:	06 c0       	rjmp	.+12     	; 0x2e6c <vfprintf+0xc4>
    2e60:	8a e0       	ldi	r24, 0x0A	; 10
    2e62:	98 9e       	mul	r9, r24
    2e64:	20 0d       	add	r18, r0
    2e66:	11 24       	eor	r1, r1
    2e68:	92 2e       	mov	r9, r18
    2e6a:	11 c0       	rjmp	.+34     	; 0x2e8e <vfprintf+0xe6>
    2e6c:	ea e0       	ldi	r30, 0x0A	; 10
    2e6e:	2e 9e       	mul	r2, r30
    2e70:	20 0d       	add	r18, r0
    2e72:	11 24       	eor	r1, r1
    2e74:	22 2e       	mov	r2, r18
    2e76:	f3 2d       	mov	r31, r3
    2e78:	f0 62       	ori	r31, 0x20	; 32
    2e7a:	3f 2e       	mov	r3, r31
    2e7c:	08 c0       	rjmp	.+16     	; 0x2e8e <vfprintf+0xe6>
    2e7e:	8c 36       	cpi	r24, 0x6C	; 108
    2e80:	21 f4       	brne	.+8      	; 0x2e8a <vfprintf+0xe2>
    2e82:	83 2d       	mov	r24, r3
    2e84:	80 68       	ori	r24, 0x80	; 128
    2e86:	38 2e       	mov	r3, r24
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <vfprintf+0xe6>
    2e8a:	88 36       	cpi	r24, 0x68	; 104
    2e8c:	41 f4       	brne	.+16     	; 0x2e9e <vfprintf+0xf6>
    2e8e:	f7 01       	movw	r30, r14
    2e90:	93 fd       	sbrc	r25, 3
    2e92:	85 91       	lpm	r24, Z+
    2e94:	93 ff       	sbrs	r25, 3
    2e96:	81 91       	ld	r24, Z+
    2e98:	7f 01       	movw	r14, r30
    2e9a:	81 11       	cpse	r24, r1
    2e9c:	b3 cf       	rjmp	.-154    	; 0x2e04 <vfprintf+0x5c>
    2e9e:	98 2f       	mov	r25, r24
    2ea0:	9f 7d       	andi	r25, 0xDF	; 223
    2ea2:	95 54       	subi	r25, 0x45	; 69
    2ea4:	93 30       	cpi	r25, 0x03	; 3
    2ea6:	28 f4       	brcc	.+10     	; 0x2eb2 <vfprintf+0x10a>
    2ea8:	0c 5f       	subi	r16, 0xFC	; 252
    2eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2eac:	9f e3       	ldi	r25, 0x3F	; 63
    2eae:	99 83       	std	Y+1, r25	; 0x01
    2eb0:	0d c0       	rjmp	.+26     	; 0x2ecc <vfprintf+0x124>
    2eb2:	83 36       	cpi	r24, 0x63	; 99
    2eb4:	31 f0       	breq	.+12     	; 0x2ec2 <vfprintf+0x11a>
    2eb6:	83 37       	cpi	r24, 0x73	; 115
    2eb8:	71 f0       	breq	.+28     	; 0x2ed6 <vfprintf+0x12e>
    2eba:	83 35       	cpi	r24, 0x53	; 83
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <vfprintf+0x118>
    2ebe:	59 c0       	rjmp	.+178    	; 0x2f72 <vfprintf+0x1ca>
    2ec0:	21 c0       	rjmp	.+66     	; 0x2f04 <vfprintf+0x15c>
    2ec2:	f8 01       	movw	r30, r16
    2ec4:	80 81       	ld	r24, Z
    2ec6:	89 83       	std	Y+1, r24	; 0x01
    2ec8:	0e 5f       	subi	r16, 0xFE	; 254
    2eca:	1f 4f       	sbci	r17, 0xFF	; 255
    2ecc:	88 24       	eor	r8, r8
    2ece:	83 94       	inc	r8
    2ed0:	91 2c       	mov	r9, r1
    2ed2:	53 01       	movw	r10, r6
    2ed4:	13 c0       	rjmp	.+38     	; 0x2efc <vfprintf+0x154>
    2ed6:	28 01       	movw	r4, r16
    2ed8:	f2 e0       	ldi	r31, 0x02	; 2
    2eda:	4f 0e       	add	r4, r31
    2edc:	51 1c       	adc	r5, r1
    2ede:	f8 01       	movw	r30, r16
    2ee0:	a0 80       	ld	r10, Z
    2ee2:	b1 80       	ldd	r11, Z+1	; 0x01
    2ee4:	36 fe       	sbrs	r3, 6
    2ee6:	03 c0       	rjmp	.+6      	; 0x2eee <vfprintf+0x146>
    2ee8:	69 2d       	mov	r22, r9
    2eea:	70 e0       	ldi	r23, 0x00	; 0
    2eec:	02 c0       	rjmp	.+4      	; 0x2ef2 <vfprintf+0x14a>
    2eee:	6f ef       	ldi	r22, 0xFF	; 255
    2ef0:	7f ef       	ldi	r23, 0xFF	; 255
    2ef2:	c5 01       	movw	r24, r10
    2ef4:	0e 94 c0 18 	call	0x3180	; 0x3180 <strnlen>
    2ef8:	4c 01       	movw	r8, r24
    2efa:	82 01       	movw	r16, r4
    2efc:	f3 2d       	mov	r31, r3
    2efe:	ff 77       	andi	r31, 0x7F	; 127
    2f00:	3f 2e       	mov	r3, r31
    2f02:	16 c0       	rjmp	.+44     	; 0x2f30 <vfprintf+0x188>
    2f04:	28 01       	movw	r4, r16
    2f06:	22 e0       	ldi	r18, 0x02	; 2
    2f08:	42 0e       	add	r4, r18
    2f0a:	51 1c       	adc	r5, r1
    2f0c:	f8 01       	movw	r30, r16
    2f0e:	a0 80       	ld	r10, Z
    2f10:	b1 80       	ldd	r11, Z+1	; 0x01
    2f12:	36 fe       	sbrs	r3, 6
    2f14:	03 c0       	rjmp	.+6      	; 0x2f1c <vfprintf+0x174>
    2f16:	69 2d       	mov	r22, r9
    2f18:	70 e0       	ldi	r23, 0x00	; 0
    2f1a:	02 c0       	rjmp	.+4      	; 0x2f20 <vfprintf+0x178>
    2f1c:	6f ef       	ldi	r22, 0xFF	; 255
    2f1e:	7f ef       	ldi	r23, 0xFF	; 255
    2f20:	c5 01       	movw	r24, r10
    2f22:	0e 94 b5 18 	call	0x316a	; 0x316a <strnlen_P>
    2f26:	4c 01       	movw	r8, r24
    2f28:	f3 2d       	mov	r31, r3
    2f2a:	f0 68       	ori	r31, 0x80	; 128
    2f2c:	3f 2e       	mov	r3, r31
    2f2e:	82 01       	movw	r16, r4
    2f30:	33 fc       	sbrc	r3, 3
    2f32:	1b c0       	rjmp	.+54     	; 0x2f6a <vfprintf+0x1c2>
    2f34:	82 2d       	mov	r24, r2
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	88 16       	cp	r8, r24
    2f3a:	99 06       	cpc	r9, r25
    2f3c:	b0 f4       	brcc	.+44     	; 0x2f6a <vfprintf+0x1c2>
    2f3e:	b6 01       	movw	r22, r12
    2f40:	80 e2       	ldi	r24, 0x20	; 32
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	0e 94 cb 18 	call	0x3196	; 0x3196 <fputc>
    2f48:	2a 94       	dec	r2
    2f4a:	f4 cf       	rjmp	.-24     	; 0x2f34 <vfprintf+0x18c>
    2f4c:	f5 01       	movw	r30, r10
    2f4e:	37 fc       	sbrc	r3, 7
    2f50:	85 91       	lpm	r24, Z+
    2f52:	37 fe       	sbrs	r3, 7
    2f54:	81 91       	ld	r24, Z+
    2f56:	5f 01       	movw	r10, r30
    2f58:	b6 01       	movw	r22, r12
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	0e 94 cb 18 	call	0x3196	; 0x3196 <fputc>
    2f60:	21 10       	cpse	r2, r1
    2f62:	2a 94       	dec	r2
    2f64:	21 e0       	ldi	r18, 0x01	; 1
    2f66:	82 1a       	sub	r8, r18
    2f68:	91 08       	sbc	r9, r1
    2f6a:	81 14       	cp	r8, r1
    2f6c:	91 04       	cpc	r9, r1
    2f6e:	71 f7       	brne	.-36     	; 0x2f4c <vfprintf+0x1a4>
    2f70:	e8 c0       	rjmp	.+464    	; 0x3142 <vfprintf+0x39a>
    2f72:	84 36       	cpi	r24, 0x64	; 100
    2f74:	11 f0       	breq	.+4      	; 0x2f7a <vfprintf+0x1d2>
    2f76:	89 36       	cpi	r24, 0x69	; 105
    2f78:	41 f5       	brne	.+80     	; 0x2fca <vfprintf+0x222>
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	37 fe       	sbrs	r3, 7
    2f7e:	07 c0       	rjmp	.+14     	; 0x2f8e <vfprintf+0x1e6>
    2f80:	60 81       	ld	r22, Z
    2f82:	71 81       	ldd	r23, Z+1	; 0x01
    2f84:	82 81       	ldd	r24, Z+2	; 0x02
    2f86:	93 81       	ldd	r25, Z+3	; 0x03
    2f88:	0c 5f       	subi	r16, 0xFC	; 252
    2f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f8c:	08 c0       	rjmp	.+16     	; 0x2f9e <vfprintf+0x1f6>
    2f8e:	60 81       	ld	r22, Z
    2f90:	71 81       	ldd	r23, Z+1	; 0x01
    2f92:	07 2e       	mov	r0, r23
    2f94:	00 0c       	add	r0, r0
    2f96:	88 0b       	sbc	r24, r24
    2f98:	99 0b       	sbc	r25, r25
    2f9a:	0e 5f       	subi	r16, 0xFE	; 254
    2f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f9e:	f3 2d       	mov	r31, r3
    2fa0:	ff 76       	andi	r31, 0x6F	; 111
    2fa2:	3f 2e       	mov	r3, r31
    2fa4:	97 ff       	sbrs	r25, 7
    2fa6:	09 c0       	rjmp	.+18     	; 0x2fba <vfprintf+0x212>
    2fa8:	90 95       	com	r25
    2faa:	80 95       	com	r24
    2fac:	70 95       	com	r23
    2fae:	61 95       	neg	r22
    2fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    2fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb6:	f0 68       	ori	r31, 0x80	; 128
    2fb8:	3f 2e       	mov	r3, r31
    2fba:	2a e0       	ldi	r18, 0x0A	; 10
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	a3 01       	movw	r20, r6
    2fc0:	0e 94 07 19 	call	0x320e	; 0x320e <__ultoa_invert>
    2fc4:	88 2e       	mov	r8, r24
    2fc6:	86 18       	sub	r8, r6
    2fc8:	45 c0       	rjmp	.+138    	; 0x3054 <vfprintf+0x2ac>
    2fca:	85 37       	cpi	r24, 0x75	; 117
    2fcc:	31 f4       	brne	.+12     	; 0x2fda <vfprintf+0x232>
    2fce:	23 2d       	mov	r18, r3
    2fd0:	2f 7e       	andi	r18, 0xEF	; 239
    2fd2:	b2 2e       	mov	r11, r18
    2fd4:	2a e0       	ldi	r18, 0x0A	; 10
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	25 c0       	rjmp	.+74     	; 0x3024 <vfprintf+0x27c>
    2fda:	93 2d       	mov	r25, r3
    2fdc:	99 7f       	andi	r25, 0xF9	; 249
    2fde:	b9 2e       	mov	r11, r25
    2fe0:	8f 36       	cpi	r24, 0x6F	; 111
    2fe2:	c1 f0       	breq	.+48     	; 0x3014 <vfprintf+0x26c>
    2fe4:	18 f4       	brcc	.+6      	; 0x2fec <vfprintf+0x244>
    2fe6:	88 35       	cpi	r24, 0x58	; 88
    2fe8:	79 f0       	breq	.+30     	; 0x3008 <vfprintf+0x260>
    2fea:	b5 c0       	rjmp	.+362    	; 0x3156 <vfprintf+0x3ae>
    2fec:	80 37       	cpi	r24, 0x70	; 112
    2fee:	19 f0       	breq	.+6      	; 0x2ff6 <vfprintf+0x24e>
    2ff0:	88 37       	cpi	r24, 0x78	; 120
    2ff2:	21 f0       	breq	.+8      	; 0x2ffc <vfprintf+0x254>
    2ff4:	b0 c0       	rjmp	.+352    	; 0x3156 <vfprintf+0x3ae>
    2ff6:	e9 2f       	mov	r30, r25
    2ff8:	e0 61       	ori	r30, 0x10	; 16
    2ffa:	be 2e       	mov	r11, r30
    2ffc:	b4 fe       	sbrs	r11, 4
    2ffe:	0d c0       	rjmp	.+26     	; 0x301a <vfprintf+0x272>
    3000:	fb 2d       	mov	r31, r11
    3002:	f4 60       	ori	r31, 0x04	; 4
    3004:	bf 2e       	mov	r11, r31
    3006:	09 c0       	rjmp	.+18     	; 0x301a <vfprintf+0x272>
    3008:	34 fe       	sbrs	r3, 4
    300a:	0a c0       	rjmp	.+20     	; 0x3020 <vfprintf+0x278>
    300c:	29 2f       	mov	r18, r25
    300e:	26 60       	ori	r18, 0x06	; 6
    3010:	b2 2e       	mov	r11, r18
    3012:	06 c0       	rjmp	.+12     	; 0x3020 <vfprintf+0x278>
    3014:	28 e0       	ldi	r18, 0x08	; 8
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	05 c0       	rjmp	.+10     	; 0x3024 <vfprintf+0x27c>
    301a:	20 e1       	ldi	r18, 0x10	; 16
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	02 c0       	rjmp	.+4      	; 0x3024 <vfprintf+0x27c>
    3020:	20 e1       	ldi	r18, 0x10	; 16
    3022:	32 e0       	ldi	r19, 0x02	; 2
    3024:	f8 01       	movw	r30, r16
    3026:	b7 fe       	sbrs	r11, 7
    3028:	07 c0       	rjmp	.+14     	; 0x3038 <vfprintf+0x290>
    302a:	60 81       	ld	r22, Z
    302c:	71 81       	ldd	r23, Z+1	; 0x01
    302e:	82 81       	ldd	r24, Z+2	; 0x02
    3030:	93 81       	ldd	r25, Z+3	; 0x03
    3032:	0c 5f       	subi	r16, 0xFC	; 252
    3034:	1f 4f       	sbci	r17, 0xFF	; 255
    3036:	06 c0       	rjmp	.+12     	; 0x3044 <vfprintf+0x29c>
    3038:	60 81       	ld	r22, Z
    303a:	71 81       	ldd	r23, Z+1	; 0x01
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	0e 5f       	subi	r16, 0xFE	; 254
    3042:	1f 4f       	sbci	r17, 0xFF	; 255
    3044:	a3 01       	movw	r20, r6
    3046:	0e 94 07 19 	call	0x320e	; 0x320e <__ultoa_invert>
    304a:	88 2e       	mov	r8, r24
    304c:	86 18       	sub	r8, r6
    304e:	fb 2d       	mov	r31, r11
    3050:	ff 77       	andi	r31, 0x7F	; 127
    3052:	3f 2e       	mov	r3, r31
    3054:	36 fe       	sbrs	r3, 6
    3056:	0d c0       	rjmp	.+26     	; 0x3072 <vfprintf+0x2ca>
    3058:	23 2d       	mov	r18, r3
    305a:	2e 7f       	andi	r18, 0xFE	; 254
    305c:	a2 2e       	mov	r10, r18
    305e:	89 14       	cp	r8, r9
    3060:	58 f4       	brcc	.+22     	; 0x3078 <vfprintf+0x2d0>
    3062:	34 fe       	sbrs	r3, 4
    3064:	0b c0       	rjmp	.+22     	; 0x307c <vfprintf+0x2d4>
    3066:	32 fc       	sbrc	r3, 2
    3068:	09 c0       	rjmp	.+18     	; 0x307c <vfprintf+0x2d4>
    306a:	83 2d       	mov	r24, r3
    306c:	8e 7e       	andi	r24, 0xEE	; 238
    306e:	a8 2e       	mov	r10, r24
    3070:	05 c0       	rjmp	.+10     	; 0x307c <vfprintf+0x2d4>
    3072:	b8 2c       	mov	r11, r8
    3074:	a3 2c       	mov	r10, r3
    3076:	03 c0       	rjmp	.+6      	; 0x307e <vfprintf+0x2d6>
    3078:	b8 2c       	mov	r11, r8
    307a:	01 c0       	rjmp	.+2      	; 0x307e <vfprintf+0x2d6>
    307c:	b9 2c       	mov	r11, r9
    307e:	a4 fe       	sbrs	r10, 4
    3080:	0f c0       	rjmp	.+30     	; 0x30a0 <vfprintf+0x2f8>
    3082:	fe 01       	movw	r30, r28
    3084:	e8 0d       	add	r30, r8
    3086:	f1 1d       	adc	r31, r1
    3088:	80 81       	ld	r24, Z
    308a:	80 33       	cpi	r24, 0x30	; 48
    308c:	21 f4       	brne	.+8      	; 0x3096 <vfprintf+0x2ee>
    308e:	9a 2d       	mov	r25, r10
    3090:	99 7e       	andi	r25, 0xE9	; 233
    3092:	a9 2e       	mov	r10, r25
    3094:	09 c0       	rjmp	.+18     	; 0x30a8 <vfprintf+0x300>
    3096:	a2 fe       	sbrs	r10, 2
    3098:	06 c0       	rjmp	.+12     	; 0x30a6 <vfprintf+0x2fe>
    309a:	b3 94       	inc	r11
    309c:	b3 94       	inc	r11
    309e:	04 c0       	rjmp	.+8      	; 0x30a8 <vfprintf+0x300>
    30a0:	8a 2d       	mov	r24, r10
    30a2:	86 78       	andi	r24, 0x86	; 134
    30a4:	09 f0       	breq	.+2      	; 0x30a8 <vfprintf+0x300>
    30a6:	b3 94       	inc	r11
    30a8:	a3 fc       	sbrc	r10, 3
    30aa:	11 c0       	rjmp	.+34     	; 0x30ce <vfprintf+0x326>
    30ac:	a0 fe       	sbrs	r10, 0
    30ae:	06 c0       	rjmp	.+12     	; 0x30bc <vfprintf+0x314>
    30b0:	b2 14       	cp	r11, r2
    30b2:	88 f4       	brcc	.+34     	; 0x30d6 <vfprintf+0x32e>
    30b4:	28 0c       	add	r2, r8
    30b6:	92 2c       	mov	r9, r2
    30b8:	9b 18       	sub	r9, r11
    30ba:	0e c0       	rjmp	.+28     	; 0x30d8 <vfprintf+0x330>
    30bc:	b2 14       	cp	r11, r2
    30be:	60 f4       	brcc	.+24     	; 0x30d8 <vfprintf+0x330>
    30c0:	b6 01       	movw	r22, r12
    30c2:	80 e2       	ldi	r24, 0x20	; 32
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	0e 94 cb 18 	call	0x3196	; 0x3196 <fputc>
    30ca:	b3 94       	inc	r11
    30cc:	f7 cf       	rjmp	.-18     	; 0x30bc <vfprintf+0x314>
    30ce:	b2 14       	cp	r11, r2
    30d0:	18 f4       	brcc	.+6      	; 0x30d8 <vfprintf+0x330>
    30d2:	2b 18       	sub	r2, r11
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <vfprintf+0x332>
    30d6:	98 2c       	mov	r9, r8
    30d8:	21 2c       	mov	r2, r1
    30da:	a4 fe       	sbrs	r10, 4
    30dc:	10 c0       	rjmp	.+32     	; 0x30fe <vfprintf+0x356>
    30de:	b6 01       	movw	r22, r12
    30e0:	80 e3       	ldi	r24, 0x30	; 48
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	0e 94 cb 18 	call	0x3196	; 0x3196 <fputc>
    30e8:	a2 fe       	sbrs	r10, 2
    30ea:	17 c0       	rjmp	.+46     	; 0x311a <vfprintf+0x372>
    30ec:	a1 fc       	sbrc	r10, 1
    30ee:	03 c0       	rjmp	.+6      	; 0x30f6 <vfprintf+0x34e>
    30f0:	88 e7       	ldi	r24, 0x78	; 120
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	02 c0       	rjmp	.+4      	; 0x30fa <vfprintf+0x352>
    30f6:	88 e5       	ldi	r24, 0x58	; 88
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	b6 01       	movw	r22, r12
    30fc:	0c c0       	rjmp	.+24     	; 0x3116 <vfprintf+0x36e>
    30fe:	8a 2d       	mov	r24, r10
    3100:	86 78       	andi	r24, 0x86	; 134
    3102:	59 f0       	breq	.+22     	; 0x311a <vfprintf+0x372>
    3104:	a1 fe       	sbrs	r10, 1
    3106:	02 c0       	rjmp	.+4      	; 0x310c <vfprintf+0x364>
    3108:	8b e2       	ldi	r24, 0x2B	; 43
    310a:	01 c0       	rjmp	.+2      	; 0x310e <vfprintf+0x366>
    310c:	80 e2       	ldi	r24, 0x20	; 32
    310e:	a7 fc       	sbrc	r10, 7
    3110:	8d e2       	ldi	r24, 0x2D	; 45
    3112:	b6 01       	movw	r22, r12
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	0e 94 cb 18 	call	0x3196	; 0x3196 <fputc>
    311a:	89 14       	cp	r8, r9
    311c:	38 f4       	brcc	.+14     	; 0x312c <vfprintf+0x384>
    311e:	b6 01       	movw	r22, r12
    3120:	80 e3       	ldi	r24, 0x30	; 48
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	0e 94 cb 18 	call	0x3196	; 0x3196 <fputc>
    3128:	9a 94       	dec	r9
    312a:	f7 cf       	rjmp	.-18     	; 0x311a <vfprintf+0x372>
    312c:	8a 94       	dec	r8
    312e:	f3 01       	movw	r30, r6
    3130:	e8 0d       	add	r30, r8
    3132:	f1 1d       	adc	r31, r1
    3134:	80 81       	ld	r24, Z
    3136:	b6 01       	movw	r22, r12
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	0e 94 cb 18 	call	0x3196	; 0x3196 <fputc>
    313e:	81 10       	cpse	r8, r1
    3140:	f5 cf       	rjmp	.-22     	; 0x312c <vfprintf+0x384>
    3142:	22 20       	and	r2, r2
    3144:	09 f4       	brne	.+2      	; 0x3148 <vfprintf+0x3a0>
    3146:	42 ce       	rjmp	.-892    	; 0x2dcc <vfprintf+0x24>
    3148:	b6 01       	movw	r22, r12
    314a:	80 e2       	ldi	r24, 0x20	; 32
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	0e 94 cb 18 	call	0x3196	; 0x3196 <fputc>
    3152:	2a 94       	dec	r2
    3154:	f6 cf       	rjmp	.-20     	; 0x3142 <vfprintf+0x39a>
    3156:	f6 01       	movw	r30, r12
    3158:	86 81       	ldd	r24, Z+6	; 0x06
    315a:	97 81       	ldd	r25, Z+7	; 0x07
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <vfprintf+0x3ba>
    315e:	8f ef       	ldi	r24, 0xFF	; 255
    3160:	9f ef       	ldi	r25, 0xFF	; 255
    3162:	2b 96       	adiw	r28, 0x0b	; 11
    3164:	e2 e1       	ldi	r30, 0x12	; 18
    3166:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__epilogue_restores__>

0000316a <strnlen_P>:
    316a:	fc 01       	movw	r30, r24
    316c:	05 90       	lpm	r0, Z+
    316e:	61 50       	subi	r22, 0x01	; 1
    3170:	70 40       	sbci	r23, 0x00	; 0
    3172:	01 10       	cpse	r0, r1
    3174:	d8 f7       	brcc	.-10     	; 0x316c <strnlen_P+0x2>
    3176:	80 95       	com	r24
    3178:	90 95       	com	r25
    317a:	8e 0f       	add	r24, r30
    317c:	9f 1f       	adc	r25, r31
    317e:	08 95       	ret

00003180 <strnlen>:
    3180:	fc 01       	movw	r30, r24
    3182:	61 50       	subi	r22, 0x01	; 1
    3184:	70 40       	sbci	r23, 0x00	; 0
    3186:	01 90       	ld	r0, Z+
    3188:	01 10       	cpse	r0, r1
    318a:	d8 f7       	brcc	.-10     	; 0x3182 <strnlen+0x2>
    318c:	80 95       	com	r24
    318e:	90 95       	com	r25
    3190:	8e 0f       	add	r24, r30
    3192:	9f 1f       	adc	r25, r31
    3194:	08 95       	ret

00003196 <fputc>:
    3196:	0f 93       	push	r16
    3198:	1f 93       	push	r17
    319a:	cf 93       	push	r28
    319c:	df 93       	push	r29
    319e:	fb 01       	movw	r30, r22
    31a0:	23 81       	ldd	r18, Z+3	; 0x03
    31a2:	21 fd       	sbrc	r18, 1
    31a4:	03 c0       	rjmp	.+6      	; 0x31ac <fputc+0x16>
    31a6:	8f ef       	ldi	r24, 0xFF	; 255
    31a8:	9f ef       	ldi	r25, 0xFF	; 255
    31aa:	2c c0       	rjmp	.+88     	; 0x3204 <fputc+0x6e>
    31ac:	22 ff       	sbrs	r18, 2
    31ae:	16 c0       	rjmp	.+44     	; 0x31dc <fputc+0x46>
    31b0:	46 81       	ldd	r20, Z+6	; 0x06
    31b2:	57 81       	ldd	r21, Z+7	; 0x07
    31b4:	24 81       	ldd	r18, Z+4	; 0x04
    31b6:	35 81       	ldd	r19, Z+5	; 0x05
    31b8:	42 17       	cp	r20, r18
    31ba:	53 07       	cpc	r21, r19
    31bc:	44 f4       	brge	.+16     	; 0x31ce <fputc+0x38>
    31be:	a0 81       	ld	r26, Z
    31c0:	b1 81       	ldd	r27, Z+1	; 0x01
    31c2:	9d 01       	movw	r18, r26
    31c4:	2f 5f       	subi	r18, 0xFF	; 255
    31c6:	3f 4f       	sbci	r19, 0xFF	; 255
    31c8:	31 83       	std	Z+1, r19	; 0x01
    31ca:	20 83       	st	Z, r18
    31cc:	8c 93       	st	X, r24
    31ce:	26 81       	ldd	r18, Z+6	; 0x06
    31d0:	37 81       	ldd	r19, Z+7	; 0x07
    31d2:	2f 5f       	subi	r18, 0xFF	; 255
    31d4:	3f 4f       	sbci	r19, 0xFF	; 255
    31d6:	37 83       	std	Z+7, r19	; 0x07
    31d8:	26 83       	std	Z+6, r18	; 0x06
    31da:	14 c0       	rjmp	.+40     	; 0x3204 <fputc+0x6e>
    31dc:	8b 01       	movw	r16, r22
    31de:	ec 01       	movw	r28, r24
    31e0:	fb 01       	movw	r30, r22
    31e2:	00 84       	ldd	r0, Z+8	; 0x08
    31e4:	f1 85       	ldd	r31, Z+9	; 0x09
    31e6:	e0 2d       	mov	r30, r0
    31e8:	09 95       	icall
    31ea:	89 2b       	or	r24, r25
    31ec:	e1 f6       	brne	.-72     	; 0x31a6 <fputc+0x10>
    31ee:	d8 01       	movw	r26, r16
    31f0:	16 96       	adiw	r26, 0x06	; 6
    31f2:	8d 91       	ld	r24, X+
    31f4:	9c 91       	ld	r25, X
    31f6:	17 97       	sbiw	r26, 0x07	; 7
    31f8:	01 96       	adiw	r24, 0x01	; 1
    31fa:	17 96       	adiw	r26, 0x07	; 7
    31fc:	9c 93       	st	X, r25
    31fe:	8e 93       	st	-X, r24
    3200:	16 97       	sbiw	r26, 0x06	; 6
    3202:	ce 01       	movw	r24, r28
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	1f 91       	pop	r17
    320a:	0f 91       	pop	r16
    320c:	08 95       	ret

0000320e <__ultoa_invert>:
    320e:	fa 01       	movw	r30, r20
    3210:	aa 27       	eor	r26, r26
    3212:	28 30       	cpi	r18, 0x08	; 8
    3214:	51 f1       	breq	.+84     	; 0x326a <__ultoa_invert+0x5c>
    3216:	20 31       	cpi	r18, 0x10	; 16
    3218:	81 f1       	breq	.+96     	; 0x327a <__ultoa_invert+0x6c>
    321a:	e8 94       	clt
    321c:	6f 93       	push	r22
    321e:	6e 7f       	andi	r22, 0xFE	; 254
    3220:	6e 5f       	subi	r22, 0xFE	; 254
    3222:	7f 4f       	sbci	r23, 0xFF	; 255
    3224:	8f 4f       	sbci	r24, 0xFF	; 255
    3226:	9f 4f       	sbci	r25, 0xFF	; 255
    3228:	af 4f       	sbci	r26, 0xFF	; 255
    322a:	b1 e0       	ldi	r27, 0x01	; 1
    322c:	3e d0       	rcall	.+124    	; 0x32aa <__ultoa_invert+0x9c>
    322e:	b4 e0       	ldi	r27, 0x04	; 4
    3230:	3c d0       	rcall	.+120    	; 0x32aa <__ultoa_invert+0x9c>
    3232:	67 0f       	add	r22, r23
    3234:	78 1f       	adc	r23, r24
    3236:	89 1f       	adc	r24, r25
    3238:	9a 1f       	adc	r25, r26
    323a:	a1 1d       	adc	r26, r1
    323c:	68 0f       	add	r22, r24
    323e:	79 1f       	adc	r23, r25
    3240:	8a 1f       	adc	r24, r26
    3242:	91 1d       	adc	r25, r1
    3244:	a1 1d       	adc	r26, r1
    3246:	6a 0f       	add	r22, r26
    3248:	71 1d       	adc	r23, r1
    324a:	81 1d       	adc	r24, r1
    324c:	91 1d       	adc	r25, r1
    324e:	a1 1d       	adc	r26, r1
    3250:	20 d0       	rcall	.+64     	; 0x3292 <__ultoa_invert+0x84>
    3252:	09 f4       	brne	.+2      	; 0x3256 <__ultoa_invert+0x48>
    3254:	68 94       	set
    3256:	3f 91       	pop	r19
    3258:	2a e0       	ldi	r18, 0x0A	; 10
    325a:	26 9f       	mul	r18, r22
    325c:	11 24       	eor	r1, r1
    325e:	30 19       	sub	r19, r0
    3260:	30 5d       	subi	r19, 0xD0	; 208
    3262:	31 93       	st	Z+, r19
    3264:	de f6       	brtc	.-74     	; 0x321c <__ultoa_invert+0xe>
    3266:	cf 01       	movw	r24, r30
    3268:	08 95       	ret
    326a:	46 2f       	mov	r20, r22
    326c:	47 70       	andi	r20, 0x07	; 7
    326e:	40 5d       	subi	r20, 0xD0	; 208
    3270:	41 93       	st	Z+, r20
    3272:	b3 e0       	ldi	r27, 0x03	; 3
    3274:	0f d0       	rcall	.+30     	; 0x3294 <__ultoa_invert+0x86>
    3276:	c9 f7       	brne	.-14     	; 0x326a <__ultoa_invert+0x5c>
    3278:	f6 cf       	rjmp	.-20     	; 0x3266 <__ultoa_invert+0x58>
    327a:	46 2f       	mov	r20, r22
    327c:	4f 70       	andi	r20, 0x0F	; 15
    327e:	40 5d       	subi	r20, 0xD0	; 208
    3280:	4a 33       	cpi	r20, 0x3A	; 58
    3282:	18 f0       	brcs	.+6      	; 0x328a <__ultoa_invert+0x7c>
    3284:	49 5d       	subi	r20, 0xD9	; 217
    3286:	31 fd       	sbrc	r19, 1
    3288:	40 52       	subi	r20, 0x20	; 32
    328a:	41 93       	st	Z+, r20
    328c:	02 d0       	rcall	.+4      	; 0x3292 <__ultoa_invert+0x84>
    328e:	a9 f7       	brne	.-22     	; 0x327a <__ultoa_invert+0x6c>
    3290:	ea cf       	rjmp	.-44     	; 0x3266 <__ultoa_invert+0x58>
    3292:	b4 e0       	ldi	r27, 0x04	; 4
    3294:	a6 95       	lsr	r26
    3296:	97 95       	ror	r25
    3298:	87 95       	ror	r24
    329a:	77 95       	ror	r23
    329c:	67 95       	ror	r22
    329e:	ba 95       	dec	r27
    32a0:	c9 f7       	brne	.-14     	; 0x3294 <__ultoa_invert+0x86>
    32a2:	00 97       	sbiw	r24, 0x00	; 0
    32a4:	61 05       	cpc	r22, r1
    32a6:	71 05       	cpc	r23, r1
    32a8:	08 95       	ret
    32aa:	9b 01       	movw	r18, r22
    32ac:	ac 01       	movw	r20, r24
    32ae:	0a 2e       	mov	r0, r26
    32b0:	06 94       	lsr	r0
    32b2:	57 95       	ror	r21
    32b4:	47 95       	ror	r20
    32b6:	37 95       	ror	r19
    32b8:	27 95       	ror	r18
    32ba:	ba 95       	dec	r27
    32bc:	c9 f7       	brne	.-14     	; 0x32b0 <__ultoa_invert+0xa2>
    32be:	62 0f       	add	r22, r18
    32c0:	73 1f       	adc	r23, r19
    32c2:	84 1f       	adc	r24, r20
    32c4:	95 1f       	adc	r25, r21
    32c6:	a0 1d       	adc	r26, r0
    32c8:	08 95       	ret

000032ca <__prologue_saves__>:
    32ca:	2f 92       	push	r2
    32cc:	3f 92       	push	r3
    32ce:	4f 92       	push	r4
    32d0:	5f 92       	push	r5
    32d2:	6f 92       	push	r6
    32d4:	7f 92       	push	r7
    32d6:	8f 92       	push	r8
    32d8:	9f 92       	push	r9
    32da:	af 92       	push	r10
    32dc:	bf 92       	push	r11
    32de:	cf 92       	push	r12
    32e0:	df 92       	push	r13
    32e2:	ef 92       	push	r14
    32e4:	ff 92       	push	r15
    32e6:	0f 93       	push	r16
    32e8:	1f 93       	push	r17
    32ea:	cf 93       	push	r28
    32ec:	df 93       	push	r29
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	ca 1b       	sub	r28, r26
    32f4:	db 0b       	sbc	r29, r27
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	f8 94       	cli
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	cd bf       	out	0x3d, r28	; 61
    3300:	09 94       	ijmp

00003302 <__epilogue_restores__>:
    3302:	2a 88       	ldd	r2, Y+18	; 0x12
    3304:	39 88       	ldd	r3, Y+17	; 0x11
    3306:	48 88       	ldd	r4, Y+16	; 0x10
    3308:	5f 84       	ldd	r5, Y+15	; 0x0f
    330a:	6e 84       	ldd	r6, Y+14	; 0x0e
    330c:	7d 84       	ldd	r7, Y+13	; 0x0d
    330e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3310:	9b 84       	ldd	r9, Y+11	; 0x0b
    3312:	aa 84       	ldd	r10, Y+10	; 0x0a
    3314:	b9 84       	ldd	r11, Y+9	; 0x09
    3316:	c8 84       	ldd	r12, Y+8	; 0x08
    3318:	df 80       	ldd	r13, Y+7	; 0x07
    331a:	ee 80       	ldd	r14, Y+6	; 0x06
    331c:	fd 80       	ldd	r15, Y+5	; 0x05
    331e:	0c 81       	ldd	r16, Y+4	; 0x04
    3320:	1b 81       	ldd	r17, Y+3	; 0x03
    3322:	aa 81       	ldd	r26, Y+2	; 0x02
    3324:	b9 81       	ldd	r27, Y+1	; 0x01
    3326:	ce 0f       	add	r28, r30
    3328:	d1 1d       	adc	r29, r1
    332a:	0f b6       	in	r0, 0x3f	; 63
    332c:	f8 94       	cli
    332e:	de bf       	out	0x3e, r29	; 62
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	cd bf       	out	0x3d, r28	; 61
    3334:	ed 01       	movw	r28, r26
    3336:	08 95       	ret

00003338 <_exit>:
    3338:	f8 94       	cli

0000333a <__stop_program>:
    333a:	ff cf       	rjmp	.-2      	; 0x333a <__stop_program>

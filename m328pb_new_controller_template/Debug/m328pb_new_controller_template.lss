
m328pb_new_controller_template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00001b6a  00001bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  0080021e  0080021e  00001d1c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b27  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f7c  00000000  00000000  00003acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e80  00000000  00000000  00004a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000670  00000000  00000000  000068cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008e78  00000000  00000000  00006f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d1d  00000000  00000000  0000fdb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00010ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000039cc  00000000  00000000  00010c61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__vector_1>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 67 06 	jmp	0xcce	; 0xcce <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__vector_20>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_21>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_40>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	12 e0       	ldi	r17, 0x02	; 2
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ea e6       	ldi	r30, 0x6A	; 106
      c8:	fb e1       	ldi	r31, 0x1B	; 27
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ae 31       	cpi	r26, 0x1E	; 30
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	22 e0       	ldi	r18, 0x02	; 2
      d8:	ae e1       	ldi	r26, 0x1E	; 30
      da:	b2 e0       	ldi	r27, 0x02	; 2
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	ab 3a       	cpi	r26, 0xAB	; 171
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 8c 07 	call	0xf18	; 0xf18 <main>
      ea:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_21>:

uint16_t get_adc(uint8_t source){
	adc_pin_select(source);
	//uint16_t adc_tmp_data = adc_convert();
	return adc_convert();
}
      f2:	1f 92       	push	r1
      f4:	0f 92       	push	r0
      f6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
      fa:	0f 92       	push	r0
      fc:	11 24       	eor	r1, r1
      fe:	8f 93       	push	r24
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	cd b7       	in	r28, 0x3d	; 61
     106:	de b7       	in	r29, 0x3e	; 62
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     10e:	00 00       	nop
     110:	df 91       	pop	r29
     112:	cf 91       	pop	r28
     114:	8f 91       	pop	r24
     116:	0f 90       	pop	r0
     118:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     11c:	0f 90       	pop	r0
     11e:	1f 90       	pop	r1
     120:	18 95       	reti

00000122 <adc_init>:
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
     12a:	8c e7       	ldi	r24, 0x7C	; 124
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	2c e7       	ldi	r18, 0x7C	; 124
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	f9 01       	movw	r30, r18
     134:	20 81       	ld	r18, Z
     136:	20 6c       	ori	r18, 0xC0	; 192
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18
     13c:	8a e7       	ldi	r24, 0x7A	; 122
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	2a e7       	ldi	r18, 0x7A	; 122
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	f9 01       	movw	r30, r18
     146:	20 81       	ld	r18, Z
     148:	2f 68       	ori	r18, 0x8F	; 143
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
     14e:	00 00       	nop
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <adc_pin_select>:
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	1f 92       	push	r1
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	89 83       	std	Y+1, r24	; 0x01
     162:	8c e7       	ldi	r24, 0x7C	; 124
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	2c e7       	ldi	r18, 0x7C	; 124
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	f9 01       	movw	r30, r18
     16c:	20 81       	ld	r18, Z
     16e:	20 7f       	andi	r18, 0xF0	; 240
     170:	fc 01       	movw	r30, r24
     172:	20 83       	st	Z, r18
     174:	8c e7       	ldi	r24, 0x7C	; 124
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	2c e7       	ldi	r18, 0x7C	; 124
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	f9 01       	movw	r30, r18
     17e:	30 81       	ld	r19, Z
     180:	29 81       	ldd	r18, Y+1	; 0x01
     182:	23 2b       	or	r18, r19
     184:	fc 01       	movw	r30, r24
     186:	20 83       	st	Z, r18
     188:	00 00       	nop
     18a:	0f 90       	pop	r0
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	08 95       	ret

00000192 <adc_convert>:
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	00 d0       	rcall	.+0      	; 0x198 <adc_convert+0x6>
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	8a e7       	ldi	r24, 0x7A	; 122
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	2a e7       	ldi	r18, 0x7A	; 122
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	f9 01       	movw	r30, r18
     1a6:	20 81       	ld	r18, Z
     1a8:	20 68       	ori	r18, 0x80	; 128
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
     1ae:	19 82       	std	Y+1, r1	; 0x01
     1b0:	1a 82       	std	Y+2, r1	; 0x02
     1b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     1b6:	8a e7       	ldi	r24, 0x7A	; 122
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	2a e7       	ldi	r18, 0x7A	; 122
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	f9 01       	movw	r30, r18
     1c0:	20 81       	ld	r18, Z
     1c2:	20 64       	ori	r18, 0x40	; 64
     1c4:	fc 01       	movw	r30, r24
     1c6:	20 83       	st	Z, r18
     1c8:	00 00       	nop
     1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     1ce:	88 23       	and	r24, r24
     1d0:	e1 f3       	breq	.-8      	; 0x1ca <adc_convert+0x38>
     1d2:	88 e7       	ldi	r24, 0x78	; 120
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	fc 01       	movw	r30, r24
     1d8:	80 81       	ld	r24, Z
     1da:	89 83       	std	Y+1, r24	; 0x01
     1dc:	89 e7       	ldi	r24, 0x79	; 121
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	fc 01       	movw	r30, r24
     1e2:	80 81       	ld	r24, Z
     1e4:	8a 83       	std	Y+2, r24	; 0x02
     1e6:	8a e7       	ldi	r24, 0x7A	; 122
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	2a e7       	ldi	r18, 0x7A	; 122
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	f9 01       	movw	r30, r18
     1f0:	20 81       	ld	r18, Z
     1f2:	2f 77       	andi	r18, 0x7F	; 127
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 83       	st	Z, r18
     1f8:	8a 81       	ldd	r24, Y+2	; 0x02
     1fa:	88 2f       	mov	r24, r24
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	38 2f       	mov	r19, r24
     200:	22 27       	eor	r18, r18
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	88 2f       	mov	r24, r24
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	82 2b       	or	r24, r18
     20a:	93 2b       	or	r25, r19
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	08 95       	ret

00000216 <get_mVolt>:

uint16_t get_mVolt(uint8_t source){
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	1f 92       	push	r1
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	89 83       	std	Y+1, r24	; 0x01
	adc_pin_select(source);
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	0e 94 ab 00 	call	0x156	; 0x156 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_VOLT(adc_convert());
     228:	0e 94 c9 00 	call	0x192	; 0x192 <adc_convert>
     22c:	cc 01       	movw	r24, r24
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e0       	ldi	r27, 0x00	; 0
     232:	bc 01       	movw	r22, r24
     234:	cd 01       	movw	r24, r26
     236:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatunsisf>
     23a:	dc 01       	movw	r26, r24
     23c:	cb 01       	movw	r24, r22
     23e:	2d ec       	ldi	r18, 0xCD	; 205
     240:	3e e1       	ldi	r19, 0x1E	; 30
     242:	48 e9       	ldi	r20, 0x98	; 152
     244:	5f e3       	ldi	r21, 0x3F	; 63
     246:	bc 01       	movw	r22, r24
     248:	cd 01       	movw	r24, r26
     24a:	0e 94 cc 09 	call	0x1398	; 0x1398 <__mulsf3>
     24e:	dc 01       	movw	r26, r24
     250:	cb 01       	movw	r24, r22
     252:	bc 01       	movw	r22, r24
     254:	cd 01       	movw	r24, r26
     256:	0e 94 0e 09 	call	0x121c	; 0x121c <__fixunssfsi>
     25a:	dc 01       	movw	r26, r24
     25c:	cb 01       	movw	r24, r22
}
     25e:	0f 90       	pop	r0
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <gpio_set_pin_level>:

*/


void gpio_set_pin_level(gpio *GPIOx , const bool level)
{
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	00 d0       	rcall	.+0      	; 0x26c <gpio_set_pin_level+0x6>
     26c:	1f 92       	push	r1
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	9a 83       	std	Y+2, r25	; 0x02
     274:	89 83       	std	Y+1, r24	; 0x01
     276:	6b 83       	std	Y+3, r22	; 0x03
	if (level) {
     278:	8b 81       	ldd	r24, Y+3	; 0x03
     27a:	88 23       	and	r24, r24
     27c:	f1 f0       	breq	.+60     	; 0x2ba <gpio_set_pin_level+0x54>
		*GPIOx->port |= 1 << GPIOx->pin;
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	9a 81       	ldd	r25, Y+2	; 0x02
     282:	fc 01       	movw	r30, r24
     284:	80 81       	ld	r24, Z
     286:	91 81       	ldd	r25, Z+1	; 0x01
     288:	29 81       	ldd	r18, Y+1	; 0x01
     28a:	3a 81       	ldd	r19, Y+2	; 0x02
     28c:	f9 01       	movw	r30, r18
     28e:	20 81       	ld	r18, Z
     290:	31 81       	ldd	r19, Z+1	; 0x01
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	62 2f       	mov	r22, r18
     298:	29 81       	ldd	r18, Y+1	; 0x01
     29a:	3a 81       	ldd	r19, Y+2	; 0x02
     29c:	f9 01       	movw	r30, r18
     29e:	22 81       	ldd	r18, Z+2	; 0x02
     2a0:	42 2f       	mov	r20, r18
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	21 e0       	ldi	r18, 0x01	; 1
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <gpio_set_pin_level+0x48>
     2aa:	22 0f       	add	r18, r18
     2ac:	33 1f       	adc	r19, r19
     2ae:	4a 95       	dec	r20
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <gpio_set_pin_level+0x44>
     2b2:	26 2b       	or	r18, r22
     2b4:	fc 01       	movw	r30, r24
     2b6:	20 83       	st	Z, r18
		} else {
		*GPIOx->port &= ~(1 << GPIOx->pin);
	}
}
     2b8:	1e c0       	rjmp	.+60     	; 0x2f6 <gpio_set_pin_level+0x90>
void gpio_set_pin_level(gpio *GPIOx , const bool level)
{
	if (level) {
		*GPIOx->port |= 1 << GPIOx->pin;
		} else {
		*GPIOx->port &= ~(1 << GPIOx->pin);
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	9a 81       	ldd	r25, Y+2	; 0x02
     2be:	fc 01       	movw	r30, r24
     2c0:	80 81       	ld	r24, Z
     2c2:	91 81       	ldd	r25, Z+1	; 0x01
     2c4:	29 81       	ldd	r18, Y+1	; 0x01
     2c6:	3a 81       	ldd	r19, Y+2	; 0x02
     2c8:	f9 01       	movw	r30, r18
     2ca:	20 81       	ld	r18, Z
     2cc:	31 81       	ldd	r19, Z+1	; 0x01
     2ce:	f9 01       	movw	r30, r18
     2d0:	20 81       	ld	r18, Z
     2d2:	62 2f       	mov	r22, r18
     2d4:	29 81       	ldd	r18, Y+1	; 0x01
     2d6:	3a 81       	ldd	r19, Y+2	; 0x02
     2d8:	f9 01       	movw	r30, r18
     2da:	22 81       	ldd	r18, Z+2	; 0x02
     2dc:	42 2f       	mov	r20, r18
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	21 e0       	ldi	r18, 0x01	; 1
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <gpio_set_pin_level+0x84>
     2e6:	22 0f       	add	r18, r18
     2e8:	33 1f       	adc	r19, r19
     2ea:	4a 95       	dec	r20
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <gpio_set_pin_level+0x80>
     2ee:	20 95       	com	r18
     2f0:	26 23       	and	r18, r22
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
	}
}
     2f6:	00 00       	nop
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <gpio_set_pin_direction>:

void gpio_set_pin_direction(gpio *GPIOx, const enum port_dir direction)
{
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	00 d0       	rcall	.+0      	; 0x30a <gpio_set_pin_direction+0x6>
     30a:	00 d0       	rcall	.+0      	; 0x30c <gpio_set_pin_direction+0x8>
     30c:	1f 92       	push	r1
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	9c 83       	std	Y+4, r25	; 0x04
     314:	8b 83       	std	Y+3, r24	; 0x03
     316:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t *tmp_port = GPIOx->port-1;
     318:	8b 81       	ldd	r24, Y+3	; 0x03
     31a:	9c 81       	ldd	r25, Y+4	; 0x04
     31c:	fc 01       	movw	r30, r24
     31e:	80 81       	ld	r24, Z
     320:	91 81       	ldd	r25, Z+1	; 0x01
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	9a 83       	std	Y+2, r25	; 0x02
     326:	89 83       	std	Y+1, r24	; 0x01
	switch (direction) {
     328:	8d 81       	ldd	r24, Y+5	; 0x05
     32a:	88 2f       	mov	r24, r24
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	91 05       	cpc	r25, r1
     332:	01 f1       	breq	.+64     	; 0x374 <gpio_set_pin_direction+0x70>
     334:	82 30       	cpi	r24, 0x02	; 2
     336:	91 05       	cpc	r25, r1
     338:	b1 f1       	breq	.+108    	; 0x3a6 <gpio_set_pin_direction+0xa2>
     33a:	89 2b       	or	r24, r25
     33c:	09 f0       	breq	.+2      	; 0x340 <gpio_set_pin_direction+0x3c>
		case PORT_DIR_OFF:
		*tmp_port &= ~(1 << GPIOx->pin);
		*GPIOx->port &= ~(1 << GPIOx->pin);
		break;
		default:
		break;
     33e:	6b c0       	rjmp	.+214    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
void gpio_set_pin_direction(gpio *GPIOx, const enum port_dir direction)
{
	uint8_t *tmp_port = GPIOx->port-1;
	switch (direction) {
		case PORT_DIR_IN:
		*tmp_port &= ~(1 << GPIOx->pin);
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	9a 81       	ldd	r25, Y+2	; 0x02
     344:	fc 01       	movw	r30, r24
     346:	80 81       	ld	r24, Z
     348:	48 2f       	mov	r20, r24
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	9c 81       	ldd	r25, Y+4	; 0x04
     34e:	fc 01       	movw	r30, r24
     350:	82 81       	ldd	r24, Z+2	; 0x02
     352:	28 2f       	mov	r18, r24
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	02 c0       	rjmp	.+4      	; 0x360 <gpio_set_pin_direction+0x5c>
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	2a 95       	dec	r18
     362:	e2 f7       	brpl	.-8      	; 0x35c <gpio_set_pin_direction+0x58>
     364:	80 95       	com	r24
     366:	84 23       	and	r24, r20
     368:	28 2f       	mov	r18, r24
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	9a 81       	ldd	r25, Y+2	; 0x02
     36e:	fc 01       	movw	r30, r24
     370:	20 83       	st	Z, r18
		break;
     372:	51 c0       	rjmp	.+162    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		case PORT_DIR_OUT:
		*tmp_port |= 1 << GPIOx->pin;
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	fc 01       	movw	r30, r24
     37a:	80 81       	ld	r24, Z
     37c:	48 2f       	mov	r20, r24
     37e:	8b 81       	ldd	r24, Y+3	; 0x03
     380:	9c 81       	ldd	r25, Y+4	; 0x04
     382:	fc 01       	movw	r30, r24
     384:	82 81       	ldd	r24, Z+2	; 0x02
     386:	28 2f       	mov	r18, r24
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	02 c0       	rjmp	.+4      	; 0x394 <gpio_set_pin_direction+0x90>
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	2a 95       	dec	r18
     396:	e2 f7       	brpl	.-8      	; 0x390 <gpio_set_pin_direction+0x8c>
     398:	84 2b       	or	r24, r20
     39a:	28 2f       	mov	r18, r24
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	9a 81       	ldd	r25, Y+2	; 0x02
     3a0:	fc 01       	movw	r30, r24
     3a2:	20 83       	st	Z, r18
		break;
     3a4:	38 c0       	rjmp	.+112    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		case PORT_DIR_OFF:
		*tmp_port &= ~(1 << GPIOx->pin);
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	9a 81       	ldd	r25, Y+2	; 0x02
     3aa:	fc 01       	movw	r30, r24
     3ac:	80 81       	ld	r24, Z
     3ae:	48 2f       	mov	r20, r24
     3b0:	8b 81       	ldd	r24, Y+3	; 0x03
     3b2:	9c 81       	ldd	r25, Y+4	; 0x04
     3b4:	fc 01       	movw	r30, r24
     3b6:	82 81       	ldd	r24, Z+2	; 0x02
     3b8:	28 2f       	mov	r18, r24
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <gpio_set_pin_direction+0xc2>
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	2a 95       	dec	r18
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <gpio_set_pin_direction+0xbe>
     3ca:	80 95       	com	r24
     3cc:	84 23       	and	r24, r20
     3ce:	28 2f       	mov	r18, r24
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	9a 81       	ldd	r25, Y+2	; 0x02
     3d4:	fc 01       	movw	r30, r24
     3d6:	20 83       	st	Z, r18
		*GPIOx->port &= ~(1 << GPIOx->pin);
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	fc 01       	movw	r30, r24
     3de:	80 81       	ld	r24, Z
     3e0:	91 81       	ldd	r25, Z+1	; 0x01
     3e2:	2b 81       	ldd	r18, Y+3	; 0x03
     3e4:	3c 81       	ldd	r19, Y+4	; 0x04
     3e6:	f9 01       	movw	r30, r18
     3e8:	20 81       	ld	r18, Z
     3ea:	31 81       	ldd	r19, Z+1	; 0x01
     3ec:	f9 01       	movw	r30, r18
     3ee:	20 81       	ld	r18, Z
     3f0:	62 2f       	mov	r22, r18
     3f2:	2b 81       	ldd	r18, Y+3	; 0x03
     3f4:	3c 81       	ldd	r19, Y+4	; 0x04
     3f6:	f9 01       	movw	r30, r18
     3f8:	22 81       	ldd	r18, Z+2	; 0x02
     3fa:	42 2f       	mov	r20, r18
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	21 e0       	ldi	r18, 0x01	; 1
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     404:	22 0f       	add	r18, r18
     406:	33 1f       	adc	r19, r19
     408:	4a 95       	dec	r20
     40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     40c:	20 95       	com	r18
     40e:	26 23       	and	r18, r22
     410:	fc 01       	movw	r30, r24
     412:	20 83       	st	Z, r18
		break;
     414:	00 00       	nop
		default:
		break;
	}
}
     416:	00 00       	nop
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <rtc_int_enable>:

// BCDtoDEC -- convert decimal to binary-coded decimal (BCD)
uint8_t DECtoBCD(uint8_t val)
{
	return ((val / 10) * 0x10) + (val % 10);
}
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	00 d0       	rcall	.+0      	; 0x42e <rtc_int_enable+0x6>
     42e:	00 d0       	rcall	.+0      	; 0x430 <rtc_int_enable+0x8>
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	9a 83       	std	Y+2, r25	; 0x02
     436:	89 83       	std	Y+1, r24	; 0x01
     438:	7c 83       	std	Y+4, r23	; 0x04
     43a:	6b 83       	std	Y+3, r22	; 0x03
     43c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <rtc_config_3>
     440:	80 61       	ori	r24, 0x10	; 16
     442:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rtc_config_3>
     446:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
     44a:	81 61       	ori	r24, 0x11	; 17
     44c:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
     450:	22 e0       	ldi	r18, 0x02	; 2
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	51 e0       	ldi	r21, 0x01	; 1
     458:	6b e0       	ldi	r22, 0x0B	; 11
     45a:	82 e3       	ldi	r24, 0x32	; 50
     45c:	0e 94 b8 05 	call	0xb70	; 0xb70 <twi_write>
     460:	21 e0       	ldi	r18, 0x01	; 1
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	4e e1       	ldi	r20, 0x1E	; 30
     466:	52 e0       	ldi	r21, 0x02	; 2
     468:	6d e0       	ldi	r22, 0x0D	; 13
     46a:	82 e3       	ldi	r24, 0x32	; 50
     46c:	0e 94 b8 05 	call	0xb70	; 0xb70 <twi_write>
     470:	21 e0       	ldi	r18, 0x01	; 1
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	4f e1       	ldi	r20, 0x1F	; 31
     476:	52 e0       	ldi	r21, 0x02	; 2
     478:	6f e0       	ldi	r22, 0x0F	; 15
     47a:	82 e3       	ldi	r24, 0x32	; 50
     47c:	0e 94 b8 05 	call	0xb70	; 0xb70 <twi_write>
     480:	00 00       	nop
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <rtc_sync>:
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	29 97       	sbiw	r28, 0x09	; 9
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	99 87       	std	Y+9, r25	; 0x09
     4a6:	88 87       	std	Y+8, r24	; 0x08
     4a8:	27 e0       	ldi	r18, 0x07	; 7
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	ce 01       	movw	r24, r28
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	ac 01       	movw	r20, r24
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	82 e3       	ldi	r24, 0x32	; 50
     4b6:	0e 94 12 05 	call	0xa24	; 0xa24 <twi_read>
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	0e 94 9e 02 	call	0x53c	; 0x53c <BCDtoDEC>
     4c0:	28 2f       	mov	r18, r24
     4c2:	88 85       	ldd	r24, Y+8	; 0x08
     4c4:	99 85       	ldd	r25, Y+9	; 0x09
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
     4ca:	8a 81       	ldd	r24, Y+2	; 0x02
     4cc:	0e 94 9e 02 	call	0x53c	; 0x53c <BCDtoDEC>
     4d0:	28 2f       	mov	r18, r24
     4d2:	88 85       	ldd	r24, Y+8	; 0x08
     4d4:	99 85       	ldd	r25, Y+9	; 0x09
     4d6:	fc 01       	movw	r30, r24
     4d8:	21 83       	std	Z+1, r18	; 0x01
     4da:	8b 81       	ldd	r24, Y+3	; 0x03
     4dc:	0e 94 9e 02 	call	0x53c	; 0x53c <BCDtoDEC>
     4e0:	28 2f       	mov	r18, r24
     4e2:	88 85       	ldd	r24, Y+8	; 0x08
     4e4:	99 85       	ldd	r25, Y+9	; 0x09
     4e6:	fc 01       	movw	r30, r24
     4e8:	22 83       	std	Z+2, r18	; 0x02
     4ea:	2c 81       	ldd	r18, Y+4	; 0x04
     4ec:	88 85       	ldd	r24, Y+8	; 0x08
     4ee:	99 85       	ldd	r25, Y+9	; 0x09
     4f0:	fc 01       	movw	r30, r24
     4f2:	27 83       	std	Z+7, r18	; 0x07
     4f4:	8d 81       	ldd	r24, Y+5	; 0x05
     4f6:	0e 94 9e 02 	call	0x53c	; 0x53c <BCDtoDEC>
     4fa:	28 2f       	mov	r18, r24
     4fc:	88 85       	ldd	r24, Y+8	; 0x08
     4fe:	99 85       	ldd	r25, Y+9	; 0x09
     500:	fc 01       	movw	r30, r24
     502:	23 83       	std	Z+3, r18	; 0x03
     504:	8e 81       	ldd	r24, Y+6	; 0x06
     506:	0e 94 9e 02 	call	0x53c	; 0x53c <BCDtoDEC>
     50a:	28 2f       	mov	r18, r24
     50c:	88 85       	ldd	r24, Y+8	; 0x08
     50e:	99 85       	ldd	r25, Y+9	; 0x09
     510:	fc 01       	movw	r30, r24
     512:	24 83       	std	Z+4, r18	; 0x04
     514:	8f 81       	ldd	r24, Y+7	; 0x07
     516:	0e 94 9e 02 	call	0x53c	; 0x53c <BCDtoDEC>
     51a:	28 2f       	mov	r18, r24
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	88 85       	ldd	r24, Y+8	; 0x08
     520:	99 85       	ldd	r25, Y+9	; 0x09
     522:	fc 01       	movw	r30, r24
     524:	36 83       	std	Z+6, r19	; 0x06
     526:	25 83       	std	Z+5, r18	; 0x05
     528:	00 00       	nop
     52a:	29 96       	adiw	r28, 0x09	; 9
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <BCDtoDEC>:
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	1f 92       	push	r1
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	89 83       	std	Y+1, r24	; 0x01
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	82 95       	swap	r24
     54c:	8f 70       	andi	r24, 0x0F	; 15
     54e:	88 0f       	add	r24, r24
     550:	98 2f       	mov	r25, r24
     552:	99 0f       	add	r25, r25
     554:	99 0f       	add	r25, r25
     556:	98 0f       	add	r25, r24
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	8f 70       	andi	r24, 0x0F	; 15
     55c:	89 0f       	add	r24, r25
     55e:	0f 90       	pop	r0
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <convert_to_timestamp>:

uint32_t convert_to_timestamp(const rtc_date *date) {
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	6a 97       	sbiw	r28, 0x1a	; 26
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	9a 8f       	std	Y+26, r25	; 0x1a
     57c:	89 8f       	std	Y+25, r24	; 0x19
	uint8_t year = date->year;
     57e:	89 8d       	ldd	r24, Y+25	; 0x19
     580:	9a 8d       	ldd	r25, Y+26	; 0x1a
     582:	fc 01       	movw	r30, r24
     584:	85 81       	ldd	r24, Z+5	; 0x05
     586:	96 81       	ldd	r25, Z+6	; 0x06
     588:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t month = date->month;
     58a:	89 8d       	ldd	r24, Y+25	; 0x19
     58c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     58e:	fc 01       	movw	r30, r24
     590:	84 81       	ldd	r24, Z+4	; 0x04
     592:	88 87       	std	Y+8, r24	; 0x08
	uint8_t day = date->date;
     594:	89 8d       	ldd	r24, Y+25	; 0x19
     596:	9a 8d       	ldd	r25, Y+26	; 0x1a
     598:	fc 01       	movw	r30, r24
     59a:	83 81       	ldd	r24, Z+3	; 0x03
     59c:	89 87       	std	Y+9, r24	; 0x09
	uint8_t hour = date->hour;
     59e:	89 8d       	ldd	r24, Y+25	; 0x19
     5a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5a2:	fc 01       	movw	r30, r24
     5a4:	82 81       	ldd	r24, Z+2	; 0x02
     5a6:	8a 87       	std	Y+10, r24	; 0x0a
	uint8_t minute = date->minute;
     5a8:	89 8d       	ldd	r24, Y+25	; 0x19
     5aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5ac:	fc 01       	movw	r30, r24
     5ae:	81 81       	ldd	r24, Z+1	; 0x01
     5b0:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t second = date->second;
     5b2:	89 8d       	ldd	r24, Y+25	; 0x19
     5b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5b6:	fc 01       	movw	r30, r24
     5b8:	80 81       	ld	r24, Z
     5ba:	8c 87       	std	Y+12, r24	; 0x0c

	uint8_t days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
     5bc:	8c e0       	ldi	r24, 0x0C	; 12
     5be:	e4 e4       	ldi	r30, 0x44	; 68
     5c0:	f1 e0       	ldi	r31, 0x01	; 1
     5c2:	de 01       	movw	r26, r28
     5c4:	1d 96       	adiw	r26, 0x0d	; 13
     5c6:	01 90       	ld	r0, Z+
     5c8:	0d 92       	st	X+, r0
     5ca:	8a 95       	dec	r24
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <convert_to_timestamp+0x60>
	if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
     5ce:	8f 81       	ldd	r24, Y+7	; 0x07
     5d0:	83 70       	andi	r24, 0x03	; 3
     5d2:	88 23       	and	r24, r24
     5d4:	81 f4       	brne	.+32     	; 0x5f6 <convert_to_timestamp+0x90>
     5d6:	9f 81       	ldd	r25, Y+7	; 0x07
     5d8:	89 e2       	ldi	r24, 0x29	; 41
     5da:	98 9f       	mul	r25, r24
     5dc:	81 2d       	mov	r24, r1
     5de:	11 24       	eor	r1, r1
     5e0:	82 95       	swap	r24
     5e2:	8f 70       	andi	r24, 0x0F	; 15
     5e4:	24 e6       	ldi	r18, 0x64	; 100
     5e6:	82 9f       	mul	r24, r18
     5e8:	80 2d       	mov	r24, r0
     5ea:	11 24       	eor	r1, r1
     5ec:	f9 2f       	mov	r31, r25
     5ee:	f8 1b       	sub	r31, r24
     5f0:	8f 2f       	mov	r24, r31
     5f2:	88 23       	and	r24, r24
     5f4:	51 f4       	brne	.+20     	; 0x60a <convert_to_timestamp+0xa4>
     5f6:	8f 81       	ldd	r24, Y+7	; 0x07
     5f8:	88 2f       	mov	r24, r24
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	20 e9       	ldi	r18, 0x90	; 144
     5fe:	31 e0       	ldi	r19, 0x01	; 1
     600:	b9 01       	movw	r22, r18
     602:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__divmodhi4>
     606:	89 2b       	or	r24, r25
     608:	11 f4       	brne	.+4      	; 0x60e <convert_to_timestamp+0xa8>
		days_in_month[1] = 29;
     60a:	8d e1       	ldi	r24, 0x1D	; 29
     60c:	8e 87       	std	Y+14, r24	; 0x0e
	}

	uint32_t timestamp = 0;
     60e:	19 82       	std	Y+1, r1	; 0x01
     610:	1a 82       	std	Y+2, r1	; 0x02
     612:	1b 82       	std	Y+3, r1	; 0x03
     614:	1c 82       	std	Y+4, r1	; 0x04
	timestamp += second;
     616:	8c 85       	ldd	r24, Y+12	; 0x0c
     618:	88 2f       	mov	r24, r24
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	29 81       	ldd	r18, Y+1	; 0x01
     622:	3a 81       	ldd	r19, Y+2	; 0x02
     624:	4b 81       	ldd	r20, Y+3	; 0x03
     626:	5c 81       	ldd	r21, Y+4	; 0x04
     628:	82 0f       	add	r24, r18
     62a:	93 1f       	adc	r25, r19
     62c:	a4 1f       	adc	r26, r20
     62e:	b5 1f       	adc	r27, r21
     630:	89 83       	std	Y+1, r24	; 0x01
     632:	9a 83       	std	Y+2, r25	; 0x02
     634:	ab 83       	std	Y+3, r26	; 0x03
     636:	bc 83       	std	Y+4, r27	; 0x04
	timestamp += minute * 60;
     638:	8b 85       	ldd	r24, Y+11	; 0x0b
     63a:	28 2f       	mov	r18, r24
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	4c e3       	ldi	r20, 0x3C	; 60
     640:	42 9f       	mul	r20, r18
     642:	c0 01       	movw	r24, r0
     644:	43 9f       	mul	r20, r19
     646:	90 0d       	add	r25, r0
     648:	11 24       	eor	r1, r1
     64a:	09 2e       	mov	r0, r25
     64c:	00 0c       	add	r0, r0
     64e:	aa 0b       	sbc	r26, r26
     650:	bb 0b       	sbc	r27, r27
     652:	29 81       	ldd	r18, Y+1	; 0x01
     654:	3a 81       	ldd	r19, Y+2	; 0x02
     656:	4b 81       	ldd	r20, Y+3	; 0x03
     658:	5c 81       	ldd	r21, Y+4	; 0x04
     65a:	82 0f       	add	r24, r18
     65c:	93 1f       	adc	r25, r19
     65e:	a4 1f       	adc	r26, r20
     660:	b5 1f       	adc	r27, r21
     662:	89 83       	std	Y+1, r24	; 0x01
     664:	9a 83       	std	Y+2, r25	; 0x02
     666:	ab 83       	std	Y+3, r26	; 0x03
     668:	bc 83       	std	Y+4, r27	; 0x04
	timestamp += hour * 3600;
     66a:	8a 85       	ldd	r24, Y+10	; 0x0a
     66c:	48 2f       	mov	r20, r24
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	20 e1       	ldi	r18, 0x10	; 16
     672:	3e e0       	ldi	r19, 0x0E	; 14
     674:	42 9f       	mul	r20, r18
     676:	c0 01       	movw	r24, r0
     678:	43 9f       	mul	r20, r19
     67a:	90 0d       	add	r25, r0
     67c:	52 9f       	mul	r21, r18
     67e:	90 0d       	add	r25, r0
     680:	11 24       	eor	r1, r1
     682:	09 2e       	mov	r0, r25
     684:	00 0c       	add	r0, r0
     686:	aa 0b       	sbc	r26, r26
     688:	bb 0b       	sbc	r27, r27
     68a:	29 81       	ldd	r18, Y+1	; 0x01
     68c:	3a 81       	ldd	r19, Y+2	; 0x02
     68e:	4b 81       	ldd	r20, Y+3	; 0x03
     690:	5c 81       	ldd	r21, Y+4	; 0x04
     692:	82 0f       	add	r24, r18
     694:	93 1f       	adc	r25, r19
     696:	a4 1f       	adc	r26, r20
     698:	b5 1f       	adc	r27, r21
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	9a 83       	std	Y+2, r25	; 0x02
     69e:	ab 83       	std	Y+3, r26	; 0x03
     6a0:	bc 83       	std	Y+4, r27	; 0x04
	for (uint8_t i = 0; i < month - 1; i++) {
     6a2:	1d 82       	std	Y+5, r1	; 0x05
     6a4:	29 c0       	rjmp	.+82     	; 0x6f8 <convert_to_timestamp+0x192>
		timestamp += days_in_month[i] * 86400;
     6a6:	8d 81       	ldd	r24, Y+5	; 0x05
     6a8:	88 2f       	mov	r24, r24
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	9e 01       	movw	r18, r28
     6ae:	23 5f       	subi	r18, 0xF3	; 243
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	82 0f       	add	r24, r18
     6b4:	93 1f       	adc	r25, r19
     6b6:	fc 01       	movw	r30, r24
     6b8:	80 81       	ld	r24, Z
     6ba:	88 2f       	mov	r24, r24
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	a0 e0       	ldi	r26, 0x00	; 0
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	9c 01       	movw	r18, r24
     6c4:	ad 01       	movw	r20, r26
     6c6:	60 e8       	ldi	r22, 0x80	; 128
     6c8:	71 e5       	ldi	r23, 0x51	; 81
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsi3>
     6d2:	dc 01       	movw	r26, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	9c 01       	movw	r18, r24
     6d8:	ad 01       	movw	r20, r26
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	9a 81       	ldd	r25, Y+2	; 0x02
     6de:	ab 81       	ldd	r26, Y+3	; 0x03
     6e0:	bc 81       	ldd	r27, Y+4	; 0x04
     6e2:	82 0f       	add	r24, r18
     6e4:	93 1f       	adc	r25, r19
     6e6:	a4 1f       	adc	r26, r20
     6e8:	b5 1f       	adc	r27, r21
     6ea:	89 83       	std	Y+1, r24	; 0x01
     6ec:	9a 83       	std	Y+2, r25	; 0x02
     6ee:	ab 83       	std	Y+3, r26	; 0x03
     6f0:	bc 83       	std	Y+4, r27	; 0x04

	uint32_t timestamp = 0;
	timestamp += second;
	timestamp += minute * 60;
	timestamp += hour * 3600;
	for (uint8_t i = 0; i < month - 1; i++) {
     6f2:	8d 81       	ldd	r24, Y+5	; 0x05
     6f4:	8f 5f       	subi	r24, 0xFF	; 255
     6f6:	8d 83       	std	Y+5, r24	; 0x05
     6f8:	8d 81       	ldd	r24, Y+5	; 0x05
     6fa:	28 2f       	mov	r18, r24
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	88 85       	ldd	r24, Y+8	; 0x08
     700:	88 2f       	mov	r24, r24
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	28 17       	cp	r18, r24
     708:	39 07       	cpc	r19, r25
     70a:	6c f2       	brlt	.-102    	; 0x6a6 <convert_to_timestamp+0x140>
		timestamp += days_in_month[i] * 86400;
	}

	for (uint8_t i = 0; i < year; i++) {
     70c:	1e 82       	std	Y+6, r1	; 0x06
     70e:	39 c0       	rjmp	.+114    	; 0x782 <convert_to_timestamp+0x21c>
		if ((i % 4 == 0 && i % 100 != 0) || (i % 400 == 0)) {
     710:	8e 81       	ldd	r24, Y+6	; 0x06
     712:	83 70       	andi	r24, 0x03	; 3
     714:	88 23       	and	r24, r24
     716:	81 f4       	brne	.+32     	; 0x738 <convert_to_timestamp+0x1d2>
     718:	9e 81       	ldd	r25, Y+6	; 0x06
     71a:	89 e2       	ldi	r24, 0x29	; 41
     71c:	98 9f       	mul	r25, r24
     71e:	81 2d       	mov	r24, r1
     720:	11 24       	eor	r1, r1
     722:	82 95       	swap	r24
     724:	8f 70       	andi	r24, 0x0F	; 15
     726:	24 e6       	ldi	r18, 0x64	; 100
     728:	82 9f       	mul	r24, r18
     72a:	80 2d       	mov	r24, r0
     72c:	11 24       	eor	r1, r1
     72e:	f9 2f       	mov	r31, r25
     730:	f8 1b       	sub	r31, r24
     732:	8f 2f       	mov	r24, r31
     734:	88 23       	and	r24, r24
     736:	51 f4       	brne	.+20     	; 0x74c <convert_to_timestamp+0x1e6>
     738:	8e 81       	ldd	r24, Y+6	; 0x06
     73a:	88 2f       	mov	r24, r24
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	20 e9       	ldi	r18, 0x90	; 144
     740:	31 e0       	ldi	r19, 0x01	; 1
     742:	b9 01       	movw	r22, r18
     744:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__divmodhi4>
     748:	89 2b       	or	r24, r25
     74a:	61 f4       	brne	.+24     	; 0x764 <convert_to_timestamp+0x1fe>
			timestamp += 31622400; 
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	9a 81       	ldd	r25, Y+2	; 0x02
     750:	ab 81       	ldd	r26, Y+3	; 0x03
     752:	bc 81       	ldd	r27, Y+4	; 0x04
     754:	9b 57       	subi	r25, 0x7B	; 123
     756:	ad 41       	sbci	r26, 0x1D	; 29
     758:	be 4f       	sbci	r27, 0xFE	; 254
     75a:	89 83       	std	Y+1, r24	; 0x01
     75c:	9a 83       	std	Y+2, r25	; 0x02
     75e:	ab 83       	std	Y+3, r26	; 0x03
     760:	bc 83       	std	Y+4, r27	; 0x04
     762:	0c c0       	rjmp	.+24     	; 0x77c <convert_to_timestamp+0x216>
			} else {
			timestamp += 31536000; 
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	9a 81       	ldd	r25, Y+2	; 0x02
     768:	ab 81       	ldd	r26, Y+3	; 0x03
     76a:	bc 81       	ldd	r27, Y+4	; 0x04
     76c:	80 58       	subi	r24, 0x80	; 128
     76e:	9c 4c       	sbci	r25, 0xCC	; 204
     770:	ae 41       	sbci	r26, 0x1E	; 30
     772:	be 4f       	sbci	r27, 0xFE	; 254
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	9a 83       	std	Y+2, r25	; 0x02
     778:	ab 83       	std	Y+3, r26	; 0x03
     77a:	bc 83       	std	Y+4, r27	; 0x04
	timestamp += hour * 3600;
	for (uint8_t i = 0; i < month - 1; i++) {
		timestamp += days_in_month[i] * 86400;
	}

	for (uint8_t i = 0; i < year; i++) {
     77c:	8e 81       	ldd	r24, Y+6	; 0x06
     77e:	8f 5f       	subi	r24, 0xFF	; 255
     780:	8e 83       	std	Y+6, r24	; 0x06
     782:	9e 81       	ldd	r25, Y+6	; 0x06
     784:	8f 81       	ldd	r24, Y+7	; 0x07
     786:	98 17       	cp	r25, r24
     788:	18 f2       	brcs	.-122    	; 0x710 <convert_to_timestamp+0x1aa>
			timestamp += 31622400; 
			} else {
			timestamp += 31536000; 
		}
	}
	timestamp += (day - 1) * 86400;
     78a:	89 85       	ldd	r24, Y+9	; 0x09
     78c:	88 2f       	mov	r24, r24
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	09 2e       	mov	r0, r25
     794:	00 0c       	add	r0, r0
     796:	aa 0b       	sbc	r26, r26
     798:	bb 0b       	sbc	r27, r27
     79a:	9c 01       	movw	r18, r24
     79c:	ad 01       	movw	r20, r26
     79e:	60 e8       	ldi	r22, 0x80	; 128
     7a0:	71 e5       	ldi	r23, 0x51	; 81
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsi3>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	9c 01       	movw	r18, r24
     7b0:	ad 01       	movw	r20, r26
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
     7b4:	9a 81       	ldd	r25, Y+2	; 0x02
     7b6:	ab 81       	ldd	r26, Y+3	; 0x03
     7b8:	bc 81       	ldd	r27, Y+4	; 0x04
     7ba:	82 0f       	add	r24, r18
     7bc:	93 1f       	adc	r25, r19
     7be:	a4 1f       	adc	r26, r20
     7c0:	b5 1f       	adc	r27, r21
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	9a 83       	std	Y+2, r25	; 0x02
     7c6:	ab 83       	std	Y+3, r26	; 0x03
     7c8:	bc 83       	std	Y+4, r27	; 0x04

	return timestamp;
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	9a 81       	ldd	r25, Y+2	; 0x02
     7ce:	ab 81       	ldd	r26, Y+3	; 0x03
     7d0:	bc 81       	ldd	r27, Y+4	; 0x04
     7d2:	bc 01       	movw	r22, r24
     7d4:	cd 01       	movw	r24, r26
     7d6:	6a 96       	adiw	r28, 0x1a	; 26
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <__vector_40>:

#include "twi_hal1.h"

volatile uint8_t status = 0xF8;

ISR(TWI1_vect){
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     7f0:	0f 92       	push	r0
     7f2:	11 24       	eor	r1, r1
     7f4:	8f 93       	push	r24
     7f6:	9f 93       	push	r25
     7f8:	ef 93       	push	r30
     7fa:	ff 93       	push	r31
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
	status = (TWSR1 & 0xF8);
     804:	89 ed       	ldi	r24, 0xD9	; 217
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	80 81       	ld	r24, Z
     80c:	88 7f       	andi	r24, 0xF8	; 248
     80e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <status>
}
     812:	00 00       	nop
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	ff 91       	pop	r31
     81a:	ef 91       	pop	r30
     81c:	9f 91       	pop	r25
     81e:	8f 91       	pop	r24
     820:	0f 90       	pop	r0
     822:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <twi_start>:

static uint8_t twi_start(void){
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <twi_start+0x6>
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
	uint16_t i = 0;
     836:	1a 82       	std	Y+2, r1	; 0x02
     838:	19 82       	std	Y+1, r1	; 0x01
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     83a:	8c ed       	ldi	r24, 0xDC	; 220
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	25 ea       	ldi	r18, 0xA5	; 165
     840:	fc 01       	movw	r30, r24
     842:	20 83       	st	Z, r18
	
	while(status != TWI_START){
     844:	0c c0       	rjmp	.+24     	; 0x85e <twi_start+0x32>
		i++;
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	9a 81       	ldd	r25, Y+2	; 0x02
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	9a 83       	std	Y+2, r25	; 0x02
     84e:	89 83       	std	Y+1, r24	; 0x01
		if(i >= TWI_TIMEOUT){
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	9a 81       	ldd	r25, Y+2	; 0x02
     854:	80 34       	cpi	r24, 0x40	; 64
     856:	96 40       	sbci	r25, 0x06	; 6
     858:	10 f0       	brcs	.+4      	; 0x85e <twi_start+0x32>
			return TWI_ERROR_START;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	05 c0       	rjmp	.+10     	; 0x868 <twi_start+0x3c>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     85e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <status>
     862:	88 30       	cpi	r24, 0x08	; 8
     864:	81 f7       	brne	.-32     	; 0x846 <twi_start+0x1a>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     866:	80 e0       	ldi	r24, 0x00	; 0
}
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <twi_stop>:

static void twi_stop(void){
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     87a:	8c ed       	ldi	r24, 0xDC	; 220
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	25 e9       	ldi	r18, 0x95	; 149
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
}
     884:	00 00       	nop
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	08 95       	ret

0000088c <twi_restart>:

static uint8_t twi_restart(void){
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	00 d0       	rcall	.+0      	; 0x892 <twi_restart+0x6>
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
	uint16_t i = 0;
     896:	1a 82       	std	Y+2, r1	; 0x02
     898:	19 82       	std	Y+1, r1	; 0x01
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     89a:	8c ed       	ldi	r24, 0xDC	; 220
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	25 ea       	ldi	r18, 0xA5	; 165
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 83       	st	Z, r18
	
	while(status != TWI_RSTART){
     8a4:	0c c0       	rjmp	.+24     	; 0x8be <twi_restart+0x32>
		i++;
     8a6:	89 81       	ldd	r24, Y+1	; 0x01
     8a8:	9a 81       	ldd	r25, Y+2	; 0x02
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	9a 83       	std	Y+2, r25	; 0x02
     8ae:	89 83       	std	Y+1, r24	; 0x01
		if(i >= TWI_TIMEOUT){
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	9a 81       	ldd	r25, Y+2	; 0x02
     8b4:	80 34       	cpi	r24, 0x40	; 64
     8b6:	96 40       	sbci	r25, 0x06	; 6
     8b8:	10 f0       	brcs	.+4      	; 0x8be <twi_restart+0x32>
			return TWI_ERROR_START;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <twi_restart+0x3c>

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     8be:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <status>
     8c2:	80 31       	cpi	r24, 0x10	; 16
     8c4:	81 f7       	brne	.-32     	; 0x8a6 <twi_restart+0x1a>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     8c6:	80 e0       	ldi	r24, 0x00	; 0
}
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <twi_addr_write_ack>:

static uint8_t twi_addr_write_ack(void){
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <twi_addr_write_ack+0x6>
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
	uint16_t i = 0;
     8dc:	1a 82       	std	Y+2, r1	; 0x02
     8de:	19 82       	std	Y+1, r1	; 0x01
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     8e0:	8c ed       	ldi	r24, 0xDC	; 220
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	25 e8       	ldi	r18, 0x85	; 133
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18
	while(status != TWIT_ADDR_ACK){
     8ea:	0c c0       	rjmp	.+24     	; 0x904 <__stack+0x5>
		i++;
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	9a 83       	std	Y+2, r25	; 0x02
     8f4:	89 83       	std	Y+1, r24	; 0x01
		if(i >= TWI_TIMEOUT){
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	9a 81       	ldd	r25, Y+2	; 0x02
     8fa:	80 34       	cpi	r24, 0x40	; 64
     8fc:	96 40       	sbci	r25, 0x06	; 6
     8fe:	10 f0       	brcs	.+4      	; 0x904 <__stack+0x5>
			return TWI_ERROR_START;
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	05 c0       	rjmp	.+10     	; 0x90e <__stack+0xf>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     904:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <status>
     908:	88 31       	cpi	r24, 0x18	; 24
     90a:	81 f7       	brne	.-32     	; 0x8ec <twi_addr_write_ack+0x1a>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     90c:	80 e0       	ldi	r24, 0x00	; 0
}
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <twi_data_write_ack>:


static uint8_t twi_data_write_ack(void){
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	00 d0       	rcall	.+0      	; 0x91e <twi_data_write_ack+0x6>
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
	uint16_t i = 0;
     922:	1a 82       	std	Y+2, r1	; 0x02
     924:	19 82       	std	Y+1, r1	; 0x01
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     926:	8c ed       	ldi	r24, 0xDC	; 220
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	25 e8       	ldi	r18, 0x85	; 133
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18
	while(status != TWIT_DATA_ACK){
     930:	0c c0       	rjmp	.+24     	; 0x94a <twi_data_write_ack+0x32>
		i++;
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	9a 81       	ldd	r25, Y+2	; 0x02
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	9a 83       	std	Y+2, r25	; 0x02
     93a:	89 83       	std	Y+1, r24	; 0x01
		if(i >= TWI_TIMEOUT){
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	9a 81       	ldd	r25, Y+2	; 0x02
     940:	80 34       	cpi	r24, 0x40	; 64
     942:	96 40       	sbci	r25, 0x06	; 6
     944:	10 f0       	brcs	.+4      	; 0x94a <twi_data_write_ack+0x32>
			return TWI_ERROR_START;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	05 c0       	rjmp	.+10     	; 0x954 <twi_data_write_ack+0x3c>

static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     94a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <status>
     94e:	88 32       	cpi	r24, 0x28	; 40
     950:	81 f7       	brne	.-32     	; 0x932 <twi_data_write_ack+0x1a>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     952:	80 e0       	ldi	r24, 0x00	; 0
}
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <twi_addr_read_ack>:


static uint8_t twi_addr_read_ack(void){
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	00 d0       	rcall	.+0      	; 0x964 <twi_addr_read_ack+0x6>
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	uint16_t i = 0;
     968:	1a 82       	std	Y+2, r1	; 0x02
     96a:	19 82       	std	Y+1, r1	; 0x01
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     96c:	8c ed       	ldi	r24, 0xDC	; 220
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	25 e8       	ldi	r18, 0x85	; 133
     972:	fc 01       	movw	r30, r24
     974:	20 83       	st	Z, r18
	while(status != TWIR_ADDR_ACK){
     976:	0c c0       	rjmp	.+24     	; 0x990 <twi_addr_read_ack+0x32>
		i++;
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	9a 81       	ldd	r25, Y+2	; 0x02
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	89 83       	std	Y+1, r24	; 0x01
		if(i >= TWI_TIMEOUT){
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	9a 81       	ldd	r25, Y+2	; 0x02
     986:	80 34       	cpi	r24, 0x40	; 64
     988:	96 40       	sbci	r25, 0x06	; 6
     98a:	10 f0       	brcs	.+4      	; 0x990 <twi_addr_read_ack+0x32>
			return TWI_ERROR_START;
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	05 c0       	rjmp	.+10     	; 0x99a <twi_addr_read_ack+0x3c>

static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     990:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <status>
     994:	80 34       	cpi	r24, 0x40	; 64
     996:	81 f7       	brne	.-32     	; 0x978 <twi_addr_read_ack+0x1a>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     998:	80 e0       	ldi	r24, 0x00	; 0
}
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <twi_data_read_ack>:


static uint8_t twi_data_read_ack(uint8_t ack){
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <twi_data_read_ack+0x6>
     9aa:	1f 92       	push	r1
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i = 0;
     9b2:	1a 82       	std	Y+2, r1	; 0x02
     9b4:	19 82       	std	Y+1, r1	; 0x01
	if(ack != 0){
     9b6:	8b 81       	ldd	r24, Y+3	; 0x03
     9b8:	88 23       	and	r24, r24
     9ba:	b9 f0       	breq	.+46     	; 0x9ea <twi_data_read_ack+0x46>
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     9bc:	8c ed       	ldi	r24, 0xDC	; 220
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	25 ec       	ldi	r18, 0xC5	; 197
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 83       	st	Z, r18
		while(status != TWIR_DATA_ACK){
     9c6:	0c c0       	rjmp	.+24     	; 0x9e0 <twi_data_read_ack+0x3c>
			i++;
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	9a 81       	ldd	r25, Y+2	; 0x02
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	9a 83       	std	Y+2, r25	; 0x02
     9d0:	89 83       	std	Y+1, r24	; 0x01
			if(i >= TWI_TIMEOUT){
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	9a 81       	ldd	r25, Y+2	; 0x02
     9d6:	80 34       	cpi	r24, 0x40	; 64
     9d8:	96 40       	sbci	r25, 0x06	; 6
     9da:	10 f0       	brcs	.+4      	; 0x9e0 <twi_data_read_ack+0x3c>
				return TWI_ERROR_START;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	1c c0       	rjmp	.+56     	; 0xa18 <twi_data_read_ack+0x74>

static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     9e0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <status>
     9e4:	80 35       	cpi	r24, 0x50	; 80
     9e6:	81 f7       	brne	.-32     	; 0x9c8 <twi_data_read_ack+0x24>
     9e8:	16 c0       	rjmp	.+44     	; 0xa16 <twi_data_read_ack+0x72>
				return TWI_ERROR_START;
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     9ea:	8c ed       	ldi	r24, 0xDC	; 220
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	25 e8       	ldi	r18, 0x85	; 133
     9f0:	fc 01       	movw	r30, r24
     9f2:	20 83       	st	Z, r18
		while(status != TWIR_DATA_NACK){
     9f4:	0c c0       	rjmp	.+24     	; 0xa0e <twi_data_read_ack+0x6a>
			i++;
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	9a 83       	std	Y+2, r25	; 0x02
     9fe:	89 83       	std	Y+1, r24	; 0x01
			if(i >= TWI_TIMEOUT){
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	9a 81       	ldd	r25, Y+2	; 0x02
     a04:	80 34       	cpi	r24, 0x40	; 64
     a06:	96 40       	sbci	r25, 0x06	; 6
     a08:	10 f0       	brcs	.+4      	; 0xa0e <twi_data_read_ack+0x6a>
				return TWI_ERROR_START;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <twi_data_read_ack+0x74>
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     a0e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <status>
     a12:	88 35       	cpi	r24, 0x58	; 88
     a14:	81 f7       	brne	.-32     	; 0x9f6 <twi_data_read_ack+0x52>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
     a16:	80 e0       	ldi	r24, 0x00	; 0
}
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <twi_read>:

uint8_t twi_read(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	29 97       	sbiw	r28, 0x09	; 9
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	8c 83       	std	Y+4, r24	; 0x04
     a3a:	6d 83       	std	Y+5, r22	; 0x05
     a3c:	5f 83       	std	Y+7, r21	; 0x07
     a3e:	4e 83       	std	Y+6, r20	; 0x06
     a40:	39 87       	std	Y+9, r19	; 0x09
     a42:	28 87       	std	Y+8, r18	; 0x08
	
	uint16_t i = 0;
     a44:	1a 82       	std	Y+2, r1	; 0x02
     a46:	19 82       	std	Y+1, r1	; 0x01
	uint8_t err = TWI_OK;
     a48:	1b 82       	std	Y+3, r1	; 0x03
	
	err = twi_start();
     a4a:	0e 94 16 04 	call	0x82c	; 0x82c <twi_start>
     a4e:	8b 83       	std	Y+3, r24	; 0x03
	if(err != TWI_OK){
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	88 23       	and	r24, r24
     a54:	21 f0       	breq	.+8      	; 0xa5e <twi_read+0x3a>
		twi_stop();
     a56:	0e 94 39 04 	call	0x872	; 0x872 <twi_stop>
		return err;
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	80 c0       	rjmp	.+256    	; 0xb5e <twi_read+0x13a>
	}
	TWDR1 = (addr << 1) | 0;
     a5e:	8b ed       	ldi	r24, 0xDB	; 219
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	2c 81       	ldd	r18, Y+4	; 0x04
     a64:	22 0f       	add	r18, r18
     a66:	fc 01       	movw	r30, r24
     a68:	20 83       	st	Z, r18
	
	
	err = twi_addr_write_ack();
     a6a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_addr_write_ack>
     a6e:	8b 83       	std	Y+3, r24	; 0x03
	if(err != TWI_OK){
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	88 23       	and	r24, r24
     a74:	21 f0       	breq	.+8      	; 0xa7e <twi_read+0x5a>
		twi_stop();
     a76:	0e 94 39 04 	call	0x872	; 0x872 <twi_stop>
		return err;
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	70 c0       	rjmp	.+224    	; 0xb5e <twi_read+0x13a>
	}
	
	TWDR1 = reg;
     a7e:	8b ed       	ldi	r24, 0xDB	; 219
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	2d 81       	ldd	r18, Y+5	; 0x05
     a84:	fc 01       	movw	r30, r24
     a86:	20 83       	st	Z, r18
	err = twi_data_write_ack();
     a88:	0e 94 8c 04 	call	0x918	; 0x918 <twi_data_write_ack>
     a8c:	8b 83       	std	Y+3, r24	; 0x03
	if(err != TWI_OK){
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	88 23       	and	r24, r24
     a92:	21 f0       	breq	.+8      	; 0xa9c <twi_read+0x78>
		twi_stop();
     a94:	0e 94 39 04 	call	0x872	; 0x872 <twi_stop>
		return err;
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	61 c0       	rjmp	.+194    	; 0xb5e <twi_read+0x13a>
	}
	
	err = twi_restart();
     a9c:	0e 94 46 04 	call	0x88c	; 0x88c <twi_restart>
     aa0:	8b 83       	std	Y+3, r24	; 0x03
	if(err != TWI_OK){
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	88 23       	and	r24, r24
     aa6:	21 f0       	breq	.+8      	; 0xab0 <twi_read+0x8c>
		twi_stop();
     aa8:	0e 94 39 04 	call	0x872	; 0x872 <twi_stop>
		return err;
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	57 c0       	rjmp	.+174    	; 0xb5e <twi_read+0x13a>
	}
	
	TWDR1 = (addr << 1) | 1;
     ab0:	8b ed       	ldi	r24, 0xDB	; 219
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	2c 81       	ldd	r18, Y+4	; 0x04
     ab6:	22 2f       	mov	r18, r18
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	22 0f       	add	r18, r18
     abc:	33 1f       	adc	r19, r19
     abe:	21 60       	ori	r18, 0x01	; 1
     ac0:	fc 01       	movw	r30, r24
     ac2:	20 83       	st	Z, r18

	err = twi_addr_read_ack();
     ac4:	0e 94 af 04 	call	0x95e	; 0x95e <twi_addr_read_ack>
     ac8:	8b 83       	std	Y+3, r24	; 0x03
	if(err != TWI_OK){
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	88 23       	and	r24, r24
     ace:	21 f0       	breq	.+8      	; 0xad8 <twi_read+0xb4>
		twi_stop();
     ad0:	0e 94 39 04 	call	0x872	; 0x872 <twi_stop>
		return err;
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	43 c0       	rjmp	.+134    	; 0xb5e <twi_read+0x13a>
	}
	
	for(i = 0; i < (len - 1);i++){
     ad8:	1a 82       	std	Y+2, r1	; 0x02
     ada:	19 82       	std	Y+1, r1	; 0x01
     adc:	1c c0       	rjmp	.+56     	; 0xb16 <twi_read+0xf2>
		err = twi_data_read_ack(1);
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <twi_data_read_ack>
     ae4:	8b 83       	std	Y+3, r24	; 0x03
		if(err != TWI_OK){
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	88 23       	and	r24, r24
     aea:	21 f0       	breq	.+8      	; 0xaf4 <twi_read+0xd0>
			twi_stop();
     aec:	0e 94 39 04 	call	0x872	; 0x872 <twi_stop>
			return err;
     af0:	8b 81       	ldd	r24, Y+3	; 0x03
     af2:	35 c0       	rjmp	.+106    	; 0xb5e <twi_read+0x13a>
		}
		data[i] = TWDR1;
     af4:	2e 81       	ldd	r18, Y+6	; 0x06
     af6:	3f 81       	ldd	r19, Y+7	; 0x07
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	82 0f       	add	r24, r18
     afe:	93 1f       	adc	r25, r19
     b00:	2b ed       	ldi	r18, 0xDB	; 219
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	f9 01       	movw	r30, r18
     b06:	20 81       	ld	r18, Z
     b08:	fc 01       	movw	r30, r24
     b0a:	20 83       	st	Z, r18
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	9a 81       	ldd	r25, Y+2	; 0x02
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	9a 83       	std	Y+2, r25	; 0x02
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	88 85       	ldd	r24, Y+8	; 0x08
     b18:	99 85       	ldd	r25, Y+9	; 0x09
     b1a:	9c 01       	movw	r18, r24
     b1c:	21 50       	subi	r18, 0x01	; 1
     b1e:	31 09       	sbc	r19, r1
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	82 17       	cp	r24, r18
     b26:	93 07       	cpc	r25, r19
     b28:	d0 f2       	brcs	.-76     	; 0xade <twi_read+0xba>
			return err;
		}
		data[i] = TWDR1;
	}
	
	err = twi_data_read_ack(0);
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <twi_data_read_ack>
     b30:	8b 83       	std	Y+3, r24	; 0x03
	if(err != TWI_OK){
     b32:	8b 81       	ldd	r24, Y+3	; 0x03
     b34:	88 23       	and	r24, r24
     b36:	21 f0       	breq	.+8      	; 0xb40 <twi_read+0x11c>
		twi_stop();
     b38:	0e 94 39 04 	call	0x872	; 0x872 <twi_stop>
		return err;
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	0f c0       	rjmp	.+30     	; 0xb5e <twi_read+0x13a>
	}
	data[i] = TWDR1;
     b40:	2e 81       	ldd	r18, Y+6	; 0x06
     b42:	3f 81       	ldd	r19, Y+7	; 0x07
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	9a 81       	ldd	r25, Y+2	; 0x02
     b48:	82 0f       	add	r24, r18
     b4a:	93 1f       	adc	r25, r19
     b4c:	2b ed       	ldi	r18, 0xDB	; 219
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	f9 01       	movw	r30, r18
     b52:	20 81       	ld	r18, Z
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18
	
	twi_stop();
     b58:	0e 94 39 04 	call	0x872	; 0x872 <twi_stop>
	
	return err;
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     b5e:	29 96       	adiw	r28, 0x09	; 9
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <twi_write>:


uint8_t twi_write(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	29 97       	sbiw	r28, 0x09	; 9
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	8c 83       	std	Y+4, r24	; 0x04
     b86:	6d 83       	std	Y+5, r22	; 0x05
     b88:	5f 83       	std	Y+7, r21	; 0x07
     b8a:	4e 83       	std	Y+6, r20	; 0x06
     b8c:	39 87       	std	Y+9, r19	; 0x09
     b8e:	28 87       	std	Y+8, r18	; 0x08
	
	uint16_t i = 0;
     b90:	1a 82       	std	Y+2, r1	; 0x02
     b92:	19 82       	std	Y+1, r1	; 0x01
	uint8_t err = TWI_OK;
     b94:	1b 82       	std	Y+3, r1	; 0x03
	
	err = twi_start();
     b96:	0e 94 16 04 	call	0x82c	; 0x82c <twi_start>
     b9a:	8b 83       	std	Y+3, r24	; 0x03
	if(err != TWI_OK){
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	88 23       	and	r24, r24
     ba0:	21 f0       	breq	.+8      	; 0xbaa <twi_write+0x3a>
		twi_stop();
     ba2:	0e 94 39 04 	call	0x872	; 0x872 <twi_stop>
		return err;
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	47 c0       	rjmp	.+142    	; 0xc38 <twi_write+0xc8>
	}
	TWDR1 = (addr << 1) | 0;
     baa:	8b ed       	ldi	r24, 0xDB	; 219
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	2c 81       	ldd	r18, Y+4	; 0x04
     bb0:	22 0f       	add	r18, r18
     bb2:	fc 01       	movw	r30, r24
     bb4:	20 83       	st	Z, r18
	
	
	err = twi_addr_write_ack();
     bb6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_addr_write_ack>
     bba:	8b 83       	std	Y+3, r24	; 0x03
	if(err != TWI_OK){
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	88 23       	and	r24, r24
     bc0:	21 f0       	breq	.+8      	; 0xbca <twi_write+0x5a>
		twi_stop();
     bc2:	0e 94 39 04 	call	0x872	; 0x872 <twi_stop>
		return err;
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	37 c0       	rjmp	.+110    	; 0xc38 <twi_write+0xc8>
	}
	
	TWDR1 = reg;
     bca:	8b ed       	ldi	r24, 0xDB	; 219
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	2d 81       	ldd	r18, Y+5	; 0x05
     bd0:	fc 01       	movw	r30, r24
     bd2:	20 83       	st	Z, r18
	err = twi_data_write_ack();
     bd4:	0e 94 8c 04 	call	0x918	; 0x918 <twi_data_write_ack>
     bd8:	8b 83       	std	Y+3, r24	; 0x03
	if(err != TWI_OK){
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	88 23       	and	r24, r24
     bde:	21 f0       	breq	.+8      	; 0xbe8 <twi_write+0x78>
		twi_stop();
     be0:	0e 94 39 04 	call	0x872	; 0x872 <twi_stop>
		return err;
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	28 c0       	rjmp	.+80     	; 0xc38 <twi_write+0xc8>
	}
	
	for(i = 0; i < len;i++){
     be8:	1a 82       	std	Y+2, r1	; 0x02
     bea:	19 82       	std	Y+1, r1	; 0x01
     bec:	1b c0       	rjmp	.+54     	; 0xc24 <twi_write+0xb4>
		TWDR1 = data[i];
     bee:	8b ed       	ldi	r24, 0xDB	; 219
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	4e 81       	ldd	r20, Y+6	; 0x06
     bf4:	5f 81       	ldd	r21, Y+7	; 0x07
     bf6:	29 81       	ldd	r18, Y+1	; 0x01
     bf8:	3a 81       	ldd	r19, Y+2	; 0x02
     bfa:	24 0f       	add	r18, r20
     bfc:	35 1f       	adc	r19, r21
     bfe:	f9 01       	movw	r30, r18
     c00:	20 81       	ld	r18, Z
     c02:	fc 01       	movw	r30, r24
     c04:	20 83       	st	Z, r18
		err = twi_data_write_ack();
     c06:	0e 94 8c 04 	call	0x918	; 0x918 <twi_data_write_ack>
     c0a:	8b 83       	std	Y+3, r24	; 0x03
		if(err != TWI_OK){
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	88 23       	and	r24, r24
     c10:	21 f0       	breq	.+8      	; 0xc1a <twi_write+0xaa>
			twi_stop();
     c12:	0e 94 39 04 	call	0x872	; 0x872 <twi_stop>
			return err;
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	0f c0       	rjmp	.+30     	; 0xc38 <twi_write+0xc8>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	9a 81       	ldd	r25, Y+2	; 0x02
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	29 81       	ldd	r18, Y+1	; 0x01
     c26:	3a 81       	ldd	r19, Y+2	; 0x02
     c28:	88 85       	ldd	r24, Y+8	; 0x08
     c2a:	99 85       	ldd	r25, Y+9	; 0x09
     c2c:	28 17       	cp	r18, r24
     c2e:	39 07       	cpc	r19, r25
     c30:	f0 f2       	brcs	.-68     	; 0xbee <twi_write+0x7e>
			return err;
		}
	}
	
	
	twi_stop();
     c32:	0e 94 39 04 	call	0x872	; 0x872 <twi_stop>
	
	return err;
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
}
     c38:	29 96       	adiw	r28, 0x09	; 9
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <twi_init>:





void twi_init(uint32_t speed){
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	28 97       	sbiw	r28, 0x08	; 8
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	6d 83       	std	Y+5, r22	; 0x05
     c60:	7e 83       	std	Y+6, r23	; 0x06
     c62:	8f 83       	std	Y+7, r24	; 0x07
     c64:	98 87       	std	Y+8, r25	; 0x08
	
	uint32_t gen_t = 0;
     c66:	19 82       	std	Y+1, r1	; 0x01
     c68:	1a 82       	std	Y+2, r1	; 0x02
     c6a:	1b 82       	std	Y+3, r1	; 0x03
     c6c:	1c 82       	std	Y+4, r1	; 0x04
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	92 e1       	ldi	r25, 0x12	; 18
     c72:	aa e7       	ldi	r26, 0x7A	; 122
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	2d 81       	ldd	r18, Y+5	; 0x05
     c78:	3e 81       	ldd	r19, Y+6	; 0x06
     c7a:	4f 81       	ldd	r20, Y+7	; 0x07
     c7c:	58 85       	ldd	r21, Y+8	; 0x08
     c7e:	bc 01       	movw	r22, r24
     c80:	cd 01       	movw	r24, r26
     c82:	0e 94 85 0a 	call	0x150a	; 0x150a <__udivmodsi4>
     c86:	da 01       	movw	r26, r20
     c88:	c9 01       	movw	r24, r18
     c8a:	40 97       	sbiw	r24, 0x10	; 16
     c8c:	a1 09       	sbc	r26, r1
     c8e:	b1 09       	sbc	r27, r1
     c90:	b6 95       	lsr	r27
     c92:	a7 95       	ror	r26
     c94:	97 95       	ror	r25
     c96:	87 95       	ror	r24
     c98:	99 27       	eor	r25, r25
     c9a:	aa 27       	eor	r26, r26
     c9c:	bb 27       	eor	r27, r27
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	ab 83       	std	Y+3, r26	; 0x03
     ca4:	bc 83       	std	Y+4, r27	; 0x04
	TWBR1 = gen_t & 0xFF;
     ca6:	88 ed       	ldi	r24, 0xD8	; 216
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	29 81       	ldd	r18, Y+1	; 0x01
     cac:	fc 01       	movw	r30, r24
     cae:	20 83       	st	Z, r18
	TWCR1 = (1 << TWEN) | (1 << TWIE);
     cb0:	8c ed       	ldi	r24, 0xDC	; 220
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	25 e0       	ldi	r18, 0x05	; 5
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18
	//PORTC |= (1 << PORTC5 | 1 << PORTC4);
	
}
     cba:	00 00       	nop
     cbc:	28 96       	adiw	r28, 0x08	; 8
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	08 95       	ret

00000cce <__vector_18>:

void uart_send_array(uint8_t *c,uint16_t len){
	for(uint16_t i = 0; i < len;i++){
		uart_send_byte(c[i]);
	}
}
     cce:	1f 92       	push	r1
     cd0:	0f 92       	push	r0
     cd2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     cd6:	0f 92       	push	r0
     cd8:	11 24       	eor	r1, r1
     cda:	2f 93       	push	r18
     cdc:	3f 93       	push	r19
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <rx_count>
     cf2:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <rx_count+0x1>
     cf6:	26 ec       	ldi	r18, 0xC6	; 198
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	f9 01       	movw	r30, r18
     cfc:	20 81       	ld	r18, Z
     cfe:	8e 5d       	subi	r24, 0xDE	; 222
     d00:	9d 4f       	sbci	r25, 0xFD	; 253
     d02:	fc 01       	movw	r30, r24
     d04:	20 83       	st	Z, r18
     d06:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <rx_count>
     d0a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <rx_count+0x1>
     d0e:	8e 5d       	subi	r24, 0xDE	; 222
     d10:	9d 4f       	sbci	r25, 0xFD	; 253
     d12:	fc 01       	movw	r30, r24
     d14:	80 81       	ld	r24, Z
     d16:	8d 30       	cpi	r24, 0x0D	; 13
     d18:	61 f4       	brne	.+24     	; 0xd32 <__vector_18+0x64>
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <read_complete>
     d20:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <rx_count>
     d24:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <rx_count+0x1>
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	8e 5d       	subi	r24, 0xDE	; 222
     d2c:	9d 4f       	sbci	r25, 0xFD	; 253
     d2e:	fc 01       	movw	r30, r24
     d30:	10 82       	st	Z, r1
     d32:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <rx_count>
     d36:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <rx_count+0x1>
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <rx_count+0x1>
     d40:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <rx_count>
     d44:	00 00       	nop
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	3f 91       	pop	r19
     d54:	2f 91       	pop	r18
     d56:	0f 90       	pop	r0
     d58:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     d5c:	0f 90       	pop	r0
     d5e:	1f 90       	pop	r1
     d60:	18 95       	reti

00000d62 <__vector_20>:
     d62:	1f 92       	push	r1
     d64:	0f 92       	push	r0
     d66:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     d6a:	0f 92       	push	r0
     d6c:	11 24       	eor	r1, r1
     d6e:	8f 93       	push	r24
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <uart_tx_busy>
     d7e:	00 00       	nop
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	8f 91       	pop	r24
     d86:	0f 90       	pop	r0
     d88:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     d8c:	0f 90       	pop	r0
     d8e:	1f 90       	pop	r1
     d90:	18 95       	reti

00000d92 <uart_init>:
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	00 d0       	rcall	.+0      	; 0xd98 <uart_init+0x6>
     d98:	00 d0       	rcall	.+0      	; 0xd9a <uart_init+0x8>
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <uart_init+0xa>
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	6a 83       	std	Y+2, r22	; 0x02
     da2:	7b 83       	std	Y+3, r23	; 0x03
     da4:	8c 83       	std	Y+4, r24	; 0x04
     da6:	9d 83       	std	Y+5, r25	; 0x05
     da8:	4e 83       	std	Y+6, r20	; 0x06
     daa:	80 e1       	ldi	r24, 0x10	; 16
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	8e 81       	ldd	r24, Y+6	; 0x06
     db0:	88 23       	and	r24, r24
     db2:	59 f0       	breq	.+22     	; 0xdca <uart_init+0x38>
     db4:	88 e0       	ldi	r24, 0x08	; 8
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	80 ec       	ldi	r24, 0xC0	; 192
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	20 ec       	ldi	r18, 0xC0	; 192
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	f9 01       	movw	r30, r18
     dc2:	20 81       	ld	r18, Z
     dc4:	22 60       	ori	r18, 0x02	; 2
     dc6:	fc 01       	movw	r30, r24
     dc8:	20 83       	st	Z, r18
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	9b 81       	ldd	r25, Y+3	; 0x03
     dd8:	ac 81       	ldd	r26, Y+4	; 0x04
     dda:	bd 81       	ldd	r27, Y+5	; 0x05
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsi3>
     de4:	9b 01       	movw	r18, r22
     de6:	ac 01       	movw	r20, r24
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	92 e1       	ldi	r25, 0x12	; 18
     dec:	aa e7       	ldi	r26, 0x7A	; 122
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	bc 01       	movw	r22, r24
     df2:	cd 01       	movw	r24, r26
     df4:	0e 94 85 0a 	call	0x150a	; 0x150a <__udivmodsi4>
     df8:	da 01       	movw	r26, r20
     dfa:	c9 01       	movw	r24, r18
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	a1 09       	sbc	r26, r1
     e00:	b1 09       	sbc	r27, r1
     e02:	8a 83       	std	Y+2, r24	; 0x02
     e04:	9b 83       	std	Y+3, r25	; 0x03
     e06:	ac 83       	std	Y+4, r26	; 0x04
     e08:	bd 83       	std	Y+5, r27	; 0x05
     e0a:	25 ec       	ldi	r18, 0xC5	; 197
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	9b 81       	ldd	r25, Y+3	; 0x03
     e12:	ac 81       	ldd	r26, Y+4	; 0x04
     e14:	bd 81       	ldd	r27, Y+5	; 0x05
     e16:	88 27       	eor	r24, r24
     e18:	9f 70       	andi	r25, 0x0F	; 15
     e1a:	aa 27       	eor	r26, r26
     e1c:	bb 27       	eor	r27, r27
     e1e:	89 2f       	mov	r24, r25
     e20:	9a 2f       	mov	r25, r26
     e22:	ab 2f       	mov	r26, r27
     e24:	bb 27       	eor	r27, r27
     e26:	f9 01       	movw	r30, r18
     e28:	80 83       	st	Z, r24
     e2a:	84 ec       	ldi	r24, 0xC4	; 196
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	2a 81       	ldd	r18, Y+2	; 0x02
     e30:	fc 01       	movw	r30, r24
     e32:	20 83       	st	Z, r18
     e34:	81 ec       	ldi	r24, 0xC1	; 193
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	21 ec       	ldi	r18, 0xC1	; 193
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	f9 01       	movw	r30, r18
     e3e:	20 81       	ld	r18, Z
     e40:	28 6d       	ori	r18, 0xD8	; 216
     e42:	fc 01       	movw	r30, r24
     e44:	20 83       	st	Z, r18
     e46:	82 ec       	ldi	r24, 0xC2	; 194
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	26 e8       	ldi	r18, 0x86	; 134
     e4c:	fc 01       	movw	r30, r24
     e4e:	20 83       	st	Z, r18
     e50:	00 00       	nop
     e52:	26 96       	adiw	r28, 0x06	; 6
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <uart_send_byte>:
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	1f 92       	push	r1
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	00 00       	nop
     e72:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <uart_tx_busy>
     e76:	88 23       	and	r24, r24
     e78:	e1 f3       	breq	.-8      	; 0xe72 <uart_send_byte+0xe>
     e7a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <uart_tx_busy>
     e7e:	86 ec       	ldi	r24, 0xC6	; 198
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	29 81       	ldd	r18, Y+1	; 0x01
     e84:	fc 01       	movw	r30, r24
     e86:	20 83       	st	Z, r18
     e88:	00 00       	nop
     e8a:	0f 90       	pop	r0
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <uart_send_string>:

void uart_send_string(uint8_t *c){
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	00 d0       	rcall	.+0      	; 0xe98 <uart_send_string+0x6>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <uart_send_string+0x8>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i = 0;
     ea2:	1a 82       	std	Y+2, r1	; 0x02
     ea4:	19 82       	std	Y+1, r1	; 0x01
	do{
		uart_send_byte(c[i]);
     ea6:	2b 81       	ldd	r18, Y+3	; 0x03
     ea8:	3c 81       	ldd	r19, Y+4	; 0x04
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	82 0f       	add	r24, r18
     eb0:	93 1f       	adc	r25, r19
     eb2:	fc 01       	movw	r30, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	0e 94 32 07 	call	0xe64	; 0xe64 <uart_send_byte>
		i++;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	9a 83       	std	Y+2, r25	; 0x02
     ec2:	89 83       	std	Y+1, r24	; 0x01
		
	}while(c[i] != '\0');
     ec4:	2b 81       	ldd	r18, Y+3	; 0x03
     ec6:	3c 81       	ldd	r19, Y+4	; 0x04
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	9a 81       	ldd	r25, Y+2	; 0x02
     ecc:	82 0f       	add	r24, r18
     ece:	93 1f       	adc	r25, r19
     ed0:	fc 01       	movw	r30, r24
     ed2:	80 81       	ld	r24, Z
     ed4:	88 23       	and	r24, r24
     ed6:	39 f7       	brne	.-50     	; 0xea6 <uart_send_string+0x14>
	//uart_send_byte(c[i]);
}
     ed8:	00 00       	nop
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	08 95       	ret

00000ee8 <__vector_1>:
uint8_t rtc_int_request = 0;
uint16_t BAT_VOLT = 0;



ISR(INT0_vect){
     ee8:	1f 92       	push	r1
     eea:	0f 92       	push	r0
     eec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	8f 93       	push	r24
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	rtc_int_request=1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <rtc_int_request>
}
     f04:	00 00       	nop
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	8f 91       	pop	r24
     f0c:	0f 90       	pop	r0
     f0e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <main>:



int main(void)
{
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	c2 59       	subi	r28, 0x92	; 146
     f28:	d1 09       	sbc	r29, r1
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
    char char_array[128]="\0";
     f34:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <sys_rtc+0x7d>
     f38:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <sys_rtc+0x7e>
     f3c:	9c 8b       	std	Y+20, r25	; 0x14
     f3e:	8b 8b       	std	Y+19, r24	; 0x13
     f40:	2e e7       	ldi	r18, 0x7E	; 126
     f42:	ce 01       	movw	r24, r28
     f44:	45 96       	adiw	r24, 0x15	; 21
     f46:	fc 01       	movw	r30, r24
     f48:	32 2f       	mov	r19, r18
     f4a:	11 92       	st	Z+, r1
     f4c:	3a 95       	dec	r19
     f4e:	e9 f7       	brne	.-6      	; 0xf4a <main+0x32>

    
    uart_init(250000,1);
     f50:	41 e0       	ldi	r20, 0x01	; 1
     f52:	60 e9       	ldi	r22, 0x90	; 144
     f54:	70 ed       	ldi	r23, 0xD0	; 208
     f56:	83 e0       	ldi	r24, 0x03	; 3
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 c9 06 	call	0xd92	; 0xd92 <uart_init>
    twi_init(400000);
     f5e:	60 e8       	ldi	r22, 0x80	; 128
     f60:	7a e1       	ldi	r23, 0x1A	; 26
     f62:	86 e0       	ldi	r24, 0x06	; 6
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 25 06 	call	0xc4a	; 0xc4a <twi_init>
    gpio_set_pin_direction(&lcd_blk , PORT_DIR_OUT); gpio_set_pin_level(&lcd_blk, false);
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	87 e1       	ldi	r24, 0x17	; 23
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	0e 94 82 01 	call	0x304	; 0x304 <gpio_set_pin_direction>
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	87 e1       	ldi	r24, 0x17	; 23
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	0e 94 33 01 	call	0x266	; 0x266 <gpio_set_pin_level>
	gpio_set_pin_direction(&ext_led , PORT_DIR_OUT); gpio_set_pin_level(&ext_led, false);
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	8a e1       	ldi	r24, 0x1A	; 26
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	0e 94 82 01 	call	0x304	; 0x304 <gpio_set_pin_direction>
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	8a e1       	ldi	r24, 0x1A	; 26
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 33 01 	call	0x266	; 0x266 <gpio_set_pin_level>
	gpio_set_pin_direction(&deb_led , PORT_DIR_OUT); gpio_set_pin_level(&deb_led, false);
     f92:	61 e0       	ldi	r22, 0x01	; 1
     f94:	8d e1       	ldi	r24, 0x1D	; 29
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	0e 94 82 01 	call	0x304	; 0x304 <gpio_set_pin_direction>
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	8d e1       	ldi	r24, 0x1D	; 29
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	0e 94 33 01 	call	0x266	; 0x266 <gpio_set_pin_level>
    gpio_set_pin_direction(&rtc_int, PORT_DIR_IN);
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	84 e1       	ldi	r24, 0x14	; 20
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	0e 94 82 01 	call	0x304	; 0x304 <gpio_set_pin_direction>
    EICRA |= (0b10 << ISC00);
     fb0:	89 e6       	ldi	r24, 0x69	; 105
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	29 e6       	ldi	r18, 0x69	; 105
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	f9 01       	movw	r30, r18
     fba:	20 81       	ld	r18, Z
     fbc:	22 60       	ori	r18, 0x02	; 2
     fbe:	fc 01       	movw	r30, r24
     fc0:	20 83       	st	Z, r18
    EIMSK = 0x01; //0b00000001
     fc2:	8d e3       	ldi	r24, 0x3D	; 61
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	fc 01       	movw	r30, r24
     fca:	20 83       	st	Z, r18
	
	sei();
     fcc:	78 94       	sei
	stdout = &mystdout;
     fce:	86 e0       	ldi	r24, 0x06	; 6
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <__iob+0x3>
     fd6:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <__iob+0x2>
	//rtc_set(&sys_rtc);
	rtc_int_enable(&sys_rtc ,0);
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	80 e2       	ldi	r24, 0x20	; 32
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	0e 94 14 02 	call	0x428	; 0x428 <rtc_int_enable>
	adc_init();
     fe6:	0e 94 91 00 	call	0x122	; 0x122 <adc_init>
	
	sleep_enable();
     fea:	83 e5       	ldi	r24, 0x53	; 83
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	23 e5       	ldi	r18, 0x53	; 83
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	f9 01       	movw	r30, r18
     ff4:	20 81       	ld	r18, Z
     ff6:	21 60       	ori	r18, 0x01	; 1
     ff8:	fc 01       	movw	r30, r24
     ffa:	20 83       	st	Z, r18
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     ffc:	83 e5       	ldi	r24, 0x53	; 83
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	23 e5       	ldi	r18, 0x53	; 83
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	f9 01       	movw	r30, r18
    1006:	20 81       	ld	r18, Z
    1008:	21 7f       	andi	r18, 0xF1	; 241
    100a:	24 60       	ori	r18, 0x04	; 4
    100c:	fc 01       	movw	r30, r24
    100e:	20 83       	st	Z, r18
	uart_send_string((uint8_t *)"\rReady\n\r");
    1010:	80 e5       	ldi	r24, 0x50	; 80
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	0e 94 49 07 	call	0xe92	; 0xe92 <uart_send_string>
    while (1) 
    {
		if (rtc_int_request != 0){
    1018:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <rtc_int_request>
    101c:	88 23       	and	r24, r24
    101e:	09 f4       	brne	.+2      	; 0x1022 <main+0x10a>
    1020:	f6 c0       	rjmp	.+492    	; 0x120e <main+0x2f6>
			
			rtc_sync(&sys_rtc);
    1022:	80 e2       	ldi	r24, 0x20	; 32
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	0e 94 48 02 	call	0x490	; 0x490 <rtc_sync>
			BAT_VOLT = get_mVolt(ADC5_PIN);
    102a:	85 e0       	ldi	r24, 0x05	; 5
    102c:	0e 94 0b 01 	call	0x216	; 0x216 <get_mVolt>
    1030:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <BAT_VOLT+0x1>
    1034:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <BAT_VOLT>
			rtc_int_request = 0;
    1038:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <rtc_int_request>
			printf("Time: %02d-%02d-20%02d; %02d:%02d:%02d; BAT: %03d\r\n", sys_rtc.date, sys_rtc.month, sys_rtc.year, sys_rtc.hour, sys_rtc.minute, sys_rtc.second, BAT_VOLT);
    103c:	00 91 a3 02 	lds	r16, 0x02A3	; 0x8002a3 <BAT_VOLT>
    1040:	10 91 a4 02 	lds	r17, 0x02A4	; 0x8002a4 <BAT_VOLT+0x1>
    1044:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <sys_rtc>
    1048:	a8 2f       	mov	r26, r24
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sys_rtc+0x1>
    1050:	e8 2f       	mov	r30, r24
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <sys_rtc+0x2>
    1058:	68 2f       	mov	r22, r24
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <sys_rtc+0x5>
    1060:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <sys_rtc+0x6>
    1064:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <sys_rtc+0x4>
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sys_rtc+0x3>
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	f1 2e       	mov	r15, r17
    1076:	ff 92       	push	r15
    1078:	10 2f       	mov	r17, r16
    107a:	1f 93       	push	r17
    107c:	1b 2f       	mov	r17, r27
    107e:	1f 93       	push	r17
    1080:	af 93       	push	r26
    1082:	af 2f       	mov	r26, r31
    1084:	af 93       	push	r26
    1086:	ef 93       	push	r30
    1088:	e7 2f       	mov	r30, r23
    108a:	ef 93       	push	r30
    108c:	6f 93       	push	r22
    108e:	65 2f       	mov	r22, r21
    1090:	6f 93       	push	r22
    1092:	4f 93       	push	r20
    1094:	43 2f       	mov	r20, r19
    1096:	4f 93       	push	r20
    1098:	2f 93       	push	r18
    109a:	29 2f       	mov	r18, r25
    109c:	2f 93       	push	r18
    109e:	8f 93       	push	r24
    10a0:	89 e5       	ldi	r24, 0x59	; 89
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	89 2f       	mov	r24, r25
    10a6:	8f 93       	push	r24
    10a8:	89 e5       	ldi	r24, 0x59	; 89
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	8f 93       	push	r24
    10ae:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <printf>
    10b2:	2d b7       	in	r18, 0x3d	; 61
    10b4:	3e b7       	in	r19, 0x3e	; 62
    10b6:	20 5f       	subi	r18, 0xF0	; 240
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
			uint32_t UNIXtime =  convert_to_timestamp(&sys_rtc);
    10c4:	80 e2       	ldi	r24, 0x20	; 32
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	0e 94 b3 02 	call	0x566	; 0x566 <convert_to_timestamp>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	ab 83       	std	Y+3, r26	; 0x03
    10d6:	bc 83       	std	Y+4, r27	; 0x04
			printf("UNIX time %lu\r\n", UNIXtime);
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	8f 93       	push	r24
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	8f 93       	push	r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	8f 93       	push	r24
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	8f 93       	push	r24
    10e8:	8d e8       	ldi	r24, 0x8D	; 141
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	89 2f       	mov	r24, r25
    10ee:	8f 93       	push	r24
    10f0:	8d e8       	ldi	r24, 0x8D	; 141
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	8f 93       	push	r24
    10f6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <printf>
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
			gpio_set_pin_level(&ext_led , true);
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	8a e1       	ldi	r24, 0x1A	; 26
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	0e 94 33 01 	call	0x266	; 0x266 <gpio_set_pin_level>
			if(BAT_VOLT > BAT_LOW_LEVEL){
    1110:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <BAT_VOLT>
    1114:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <BAT_VOLT+0x1>
    1118:	83 37       	cpi	r24, 0x73	; 115
    111a:	91 40       	sbci	r25, 0x01	; 1
    111c:	08 f4       	brcc	.+2      	; 0x1120 <main+0x208>
    111e:	72 c0       	rjmp	.+228    	; 0x1204 <main+0x2ec>
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	a0 e4       	ldi	r26, 0x40	; 64
    1126:	b0 e4       	ldi	r27, 0x40	; 64
    1128:	8d 83       	std	Y+5, r24	; 0x05
    112a:	9e 83       	std	Y+6, r25	; 0x06
    112c:	af 83       	std	Y+7, r26	; 0x07
    112e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	4a ef       	ldi	r20, 0xFA	; 250
    1136:	54 e4       	ldi	r21, 0x44	; 68
    1138:	6d 81       	ldd	r22, Y+5	; 0x05
    113a:	7e 81       	ldd	r23, Y+6	; 0x06
    113c:	8f 81       	ldd	r24, Y+7	; 0x07
    113e:	98 85       	ldd	r25, Y+8	; 0x08
    1140:	0e 94 cc 09 	call	0x1398	; 0x1398 <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	89 87       	std	Y+9, r24	; 0x09
    114a:	9a 87       	std	Y+10, r25	; 0x0a
    114c:	ab 87       	std	Y+11, r26	; 0x0b
    114e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e8       	ldi	r20, 0x80	; 128
    1156:	5f e3       	ldi	r21, 0x3F	; 63
    1158:	69 85       	ldd	r22, Y+9	; 0x09
    115a:	7a 85       	ldd	r23, Y+10	; 0x0a
    115c:	8b 85       	ldd	r24, Y+11	; 0x0b
    115e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1160:	0e 94 09 09 	call	0x1212	; 0x1212 <__cmpsf2>
    1164:	88 23       	and	r24, r24
    1166:	2c f4       	brge	.+10     	; 0x1172 <main+0x25a>
		__ticks = 1;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9e 87       	std	Y+14, r25	; 0x0e
    116e:	8d 87       	std	Y+13, r24	; 0x0d
    1170:	3f c0       	rjmp	.+126    	; 0x11f0 <main+0x2d8>
	else if (__tmp > 65535)
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	3f ef       	ldi	r19, 0xFF	; 255
    1176:	4f e7       	ldi	r20, 0x7F	; 127
    1178:	57 e4       	ldi	r21, 0x47	; 71
    117a:	69 85       	ldd	r22, Y+9	; 0x09
    117c:	7a 85       	ldd	r23, Y+10	; 0x0a
    117e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1180:	9c 85       	ldd	r25, Y+12	; 0x0c
    1182:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
    1186:	18 16       	cp	r1, r24
    1188:	4c f5       	brge	.+82     	; 0x11dc <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e2       	ldi	r20, 0x20	; 32
    1190:	51 e4       	ldi	r21, 0x41	; 65
    1192:	6d 81       	ldd	r22, Y+5	; 0x05
    1194:	7e 81       	ldd	r23, Y+6	; 0x06
    1196:	8f 81       	ldd	r24, Y+7	; 0x07
    1198:	98 85       	ldd	r25, Y+8	; 0x08
    119a:	0e 94 cc 09 	call	0x1398	; 0x1398 <__mulsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	bc 01       	movw	r22, r24
    11a4:	cd 01       	movw	r24, r26
    11a6:	0e 94 0e 09 	call	0x121c	; 0x121c <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	9e 87       	std	Y+14, r25	; 0x0e
    11b0:	8d 87       	std	Y+13, r24	; 0x0d
    11b2:	0f c0       	rjmp	.+30     	; 0x11d2 <main+0x2ba>
    11b4:	88 ec       	ldi	r24, 0xC8	; 200
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	98 8b       	std	Y+16, r25	; 0x10
    11ba:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11be:	98 89       	ldd	r25, Y+16	; 0x10
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <main+0x2a8>
    11c4:	98 8b       	std	Y+16, r25	; 0x10
    11c6:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	9e 87       	std	Y+14, r25	; 0x0e
    11d0:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d6:	89 2b       	or	r24, r25
    11d8:	69 f7       	brne	.-38     	; 0x11b4 <main+0x29c>
    11da:	14 c0       	rjmp	.+40     	; 0x1204 <main+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11dc:	69 85       	ldd	r22, Y+9	; 0x09
    11de:	7a 85       	ldd	r23, Y+10	; 0x0a
    11e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11e4:	0e 94 0e 09 	call	0x121c	; 0x121c <__fixunssfsi>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	9e 87       	std	Y+14, r25	; 0x0e
    11ee:	8d 87       	std	Y+13, r24	; 0x0d
    11f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f4:	9a 8b       	std	Y+18, r25	; 0x12
    11f6:	89 8b       	std	Y+17, r24	; 0x11
    11f8:	89 89       	ldd	r24, Y+17	; 0x11
    11fa:	9a 89       	ldd	r25, Y+18	; 0x12
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <main+0x2e4>
    1200:	9a 8b       	std	Y+18, r25	; 0x12
    1202:	89 8b       	std	Y+17, r24	; 0x11
				_delay_ms(3);	
			}
			gpio_set_pin_level(&ext_led , false);
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	8a e1       	ldi	r24, 0x1A	; 26
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	0e 94 33 01 	call	0x266	; 0x266 <gpio_set_pin_level>
		}
		
		sleep_cpu();	
    120e:	88 95       	sleep
    }
    1210:	03 cf       	rjmp	.-506    	; 0x1018 <main+0x100>

00001212 <__cmpsf2>:
    1212:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__fp_cmp>
    1216:	08 f4       	brcc	.+2      	; 0x121a <__cmpsf2+0x8>
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	08 95       	ret

0000121c <__fixunssfsi>:
    121c:	0e 94 a6 09 	call	0x134c	; 0x134c <__fp_splitA>
    1220:	88 f0       	brcs	.+34     	; 0x1244 <__fixunssfsi+0x28>
    1222:	9f 57       	subi	r25, 0x7F	; 127
    1224:	98 f0       	brcs	.+38     	; 0x124c <__fixunssfsi+0x30>
    1226:	b9 2f       	mov	r27, r25
    1228:	99 27       	eor	r25, r25
    122a:	b7 51       	subi	r27, 0x17	; 23
    122c:	b0 f0       	brcs	.+44     	; 0x125a <__fixunssfsi+0x3e>
    122e:	e1 f0       	breq	.+56     	; 0x1268 <__fixunssfsi+0x4c>
    1230:	66 0f       	add	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	88 1f       	adc	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	1a f0       	brmi	.+6      	; 0x1240 <__fixunssfsi+0x24>
    123a:	ba 95       	dec	r27
    123c:	c9 f7       	brne	.-14     	; 0x1230 <__fixunssfsi+0x14>
    123e:	14 c0       	rjmp	.+40     	; 0x1268 <__fixunssfsi+0x4c>
    1240:	b1 30       	cpi	r27, 0x01	; 1
    1242:	91 f0       	breq	.+36     	; 0x1268 <__fixunssfsi+0x4c>
    1244:	0e 94 c0 09 	call	0x1380	; 0x1380 <__fp_zero>
    1248:	b1 e0       	ldi	r27, 0x01	; 1
    124a:	08 95       	ret
    124c:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__fp_zero>
    1250:	67 2f       	mov	r22, r23
    1252:	78 2f       	mov	r23, r24
    1254:	88 27       	eor	r24, r24
    1256:	b8 5f       	subi	r27, 0xF8	; 248
    1258:	39 f0       	breq	.+14     	; 0x1268 <__fixunssfsi+0x4c>
    125a:	b9 3f       	cpi	r27, 0xF9	; 249
    125c:	cc f3       	brlt	.-14     	; 0x1250 <__fixunssfsi+0x34>
    125e:	86 95       	lsr	r24
    1260:	77 95       	ror	r23
    1262:	67 95       	ror	r22
    1264:	b3 95       	inc	r27
    1266:	d9 f7       	brne	.-10     	; 0x125e <__fixunssfsi+0x42>
    1268:	3e f4       	brtc	.+14     	; 0x1278 <__fixunssfsi+0x5c>
    126a:	90 95       	com	r25
    126c:	80 95       	com	r24
    126e:	70 95       	com	r23
    1270:	61 95       	neg	r22
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	8f 4f       	sbci	r24, 0xFF	; 255
    1276:	9f 4f       	sbci	r25, 0xFF	; 255
    1278:	08 95       	ret

0000127a <__floatunsisf>:
    127a:	e8 94       	clt
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <__floatsisf+0x12>

0000127e <__floatsisf>:
    127e:	97 fb       	bst	r25, 7
    1280:	3e f4       	brtc	.+14     	; 0x1290 <__floatsisf+0x12>
    1282:	90 95       	com	r25
    1284:	80 95       	com	r24
    1286:	70 95       	com	r23
    1288:	61 95       	neg	r22
    128a:	7f 4f       	sbci	r23, 0xFF	; 255
    128c:	8f 4f       	sbci	r24, 0xFF	; 255
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	99 23       	and	r25, r25
    1292:	a9 f0       	breq	.+42     	; 0x12be <__floatsisf+0x40>
    1294:	f9 2f       	mov	r31, r25
    1296:	96 e9       	ldi	r25, 0x96	; 150
    1298:	bb 27       	eor	r27, r27
    129a:	93 95       	inc	r25
    129c:	f6 95       	lsr	r31
    129e:	87 95       	ror	r24
    12a0:	77 95       	ror	r23
    12a2:	67 95       	ror	r22
    12a4:	b7 95       	ror	r27
    12a6:	f1 11       	cpse	r31, r1
    12a8:	f8 cf       	rjmp	.-16     	; 0x129a <__floatsisf+0x1c>
    12aa:	fa f4       	brpl	.+62     	; 0x12ea <__floatsisf+0x6c>
    12ac:	bb 0f       	add	r27, r27
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <__floatsisf+0x36>
    12b0:	60 ff       	sbrs	r22, 0
    12b2:	1b c0       	rjmp	.+54     	; 0x12ea <__floatsisf+0x6c>
    12b4:	6f 5f       	subi	r22, 0xFF	; 255
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	16 c0       	rjmp	.+44     	; 0x12ea <__floatsisf+0x6c>
    12be:	88 23       	and	r24, r24
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <__floatsisf+0x48>
    12c2:	96 e9       	ldi	r25, 0x96	; 150
    12c4:	11 c0       	rjmp	.+34     	; 0x12e8 <__floatsisf+0x6a>
    12c6:	77 23       	and	r23, r23
    12c8:	21 f0       	breq	.+8      	; 0x12d2 <__floatsisf+0x54>
    12ca:	9e e8       	ldi	r25, 0x8E	; 142
    12cc:	87 2f       	mov	r24, r23
    12ce:	76 2f       	mov	r23, r22
    12d0:	05 c0       	rjmp	.+10     	; 0x12dc <__floatsisf+0x5e>
    12d2:	66 23       	and	r22, r22
    12d4:	71 f0       	breq	.+28     	; 0x12f2 <__floatsisf+0x74>
    12d6:	96 e8       	ldi	r25, 0x86	; 134
    12d8:	86 2f       	mov	r24, r22
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	2a f0       	brmi	.+10     	; 0x12ea <__floatsisf+0x6c>
    12e0:	9a 95       	dec	r25
    12e2:	66 0f       	add	r22, r22
    12e4:	77 1f       	adc	r23, r23
    12e6:	88 1f       	adc	r24, r24
    12e8:	da f7       	brpl	.-10     	; 0x12e0 <__floatsisf+0x62>
    12ea:	88 0f       	add	r24, r24
    12ec:	96 95       	lsr	r25
    12ee:	87 95       	ror	r24
    12f0:	97 f9       	bld	r25, 7
    12f2:	08 95       	ret

000012f4 <__fp_cmp>:
    12f4:	99 0f       	add	r25, r25
    12f6:	00 08       	sbc	r0, r0
    12f8:	55 0f       	add	r21, r21
    12fa:	aa 0b       	sbc	r26, r26
    12fc:	e0 e8       	ldi	r30, 0x80	; 128
    12fe:	fe ef       	ldi	r31, 0xFE	; 254
    1300:	16 16       	cp	r1, r22
    1302:	17 06       	cpc	r1, r23
    1304:	e8 07       	cpc	r30, r24
    1306:	f9 07       	cpc	r31, r25
    1308:	c0 f0       	brcs	.+48     	; 0x133a <__fp_cmp+0x46>
    130a:	12 16       	cp	r1, r18
    130c:	13 06       	cpc	r1, r19
    130e:	e4 07       	cpc	r30, r20
    1310:	f5 07       	cpc	r31, r21
    1312:	98 f0       	brcs	.+38     	; 0x133a <__fp_cmp+0x46>
    1314:	62 1b       	sub	r22, r18
    1316:	73 0b       	sbc	r23, r19
    1318:	84 0b       	sbc	r24, r20
    131a:	95 0b       	sbc	r25, r21
    131c:	39 f4       	brne	.+14     	; 0x132c <__fp_cmp+0x38>
    131e:	0a 26       	eor	r0, r26
    1320:	61 f0       	breq	.+24     	; 0x133a <__fp_cmp+0x46>
    1322:	23 2b       	or	r18, r19
    1324:	24 2b       	or	r18, r20
    1326:	25 2b       	or	r18, r21
    1328:	21 f4       	brne	.+8      	; 0x1332 <__fp_cmp+0x3e>
    132a:	08 95       	ret
    132c:	0a 26       	eor	r0, r26
    132e:	09 f4       	brne	.+2      	; 0x1332 <__fp_cmp+0x3e>
    1330:	a1 40       	sbci	r26, 0x01	; 1
    1332:	a6 95       	lsr	r26
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	81 1d       	adc	r24, r1
    1338:	81 1d       	adc	r24, r1
    133a:	08 95       	ret

0000133c <__fp_split3>:
    133c:	57 fd       	sbrc	r21, 7
    133e:	90 58       	subi	r25, 0x80	; 128
    1340:	44 0f       	add	r20, r20
    1342:	55 1f       	adc	r21, r21
    1344:	59 f0       	breq	.+22     	; 0x135c <__fp_splitA+0x10>
    1346:	5f 3f       	cpi	r21, 0xFF	; 255
    1348:	71 f0       	breq	.+28     	; 0x1366 <__fp_splitA+0x1a>
    134a:	47 95       	ror	r20

0000134c <__fp_splitA>:
    134c:	88 0f       	add	r24, r24
    134e:	97 fb       	bst	r25, 7
    1350:	99 1f       	adc	r25, r25
    1352:	61 f0       	breq	.+24     	; 0x136c <__fp_splitA+0x20>
    1354:	9f 3f       	cpi	r25, 0xFF	; 255
    1356:	79 f0       	breq	.+30     	; 0x1376 <__fp_splitA+0x2a>
    1358:	87 95       	ror	r24
    135a:	08 95       	ret
    135c:	12 16       	cp	r1, r18
    135e:	13 06       	cpc	r1, r19
    1360:	14 06       	cpc	r1, r20
    1362:	55 1f       	adc	r21, r21
    1364:	f2 cf       	rjmp	.-28     	; 0x134a <__fp_split3+0xe>
    1366:	46 95       	lsr	r20
    1368:	f1 df       	rcall	.-30     	; 0x134c <__fp_splitA>
    136a:	08 c0       	rjmp	.+16     	; 0x137c <__fp_splitA+0x30>
    136c:	16 16       	cp	r1, r22
    136e:	17 06       	cpc	r1, r23
    1370:	18 06       	cpc	r1, r24
    1372:	99 1f       	adc	r25, r25
    1374:	f1 cf       	rjmp	.-30     	; 0x1358 <__fp_splitA+0xc>
    1376:	86 95       	lsr	r24
    1378:	71 05       	cpc	r23, r1
    137a:	61 05       	cpc	r22, r1
    137c:	08 94       	sec
    137e:	08 95       	ret

00001380 <__fp_zero>:
    1380:	e8 94       	clt

00001382 <__fp_szero>:
    1382:	bb 27       	eor	r27, r27
    1384:	66 27       	eor	r22, r22
    1386:	77 27       	eor	r23, r23
    1388:	cb 01       	movw	r24, r22
    138a:	97 f9       	bld	r25, 7
    138c:	08 95       	ret

0000138e <__gesf2>:
    138e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__fp_cmp>
    1392:	08 f4       	brcc	.+2      	; 0x1396 <__gesf2+0x8>
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	08 95       	ret

00001398 <__mulsf3>:
    1398:	0e 94 df 09 	call	0x13be	; 0x13be <__mulsf3x>
    139c:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_round>
    13a0:	0e 94 42 0a 	call	0x1484	; 0x1484 <__fp_pscA>
    13a4:	38 f0       	brcs	.+14     	; 0x13b4 <__mulsf3+0x1c>
    13a6:	0e 94 49 0a 	call	0x1492	; 0x1492 <__fp_pscB>
    13aa:	20 f0       	brcs	.+8      	; 0x13b4 <__mulsf3+0x1c>
    13ac:	95 23       	and	r25, r21
    13ae:	11 f0       	breq	.+4      	; 0x13b4 <__mulsf3+0x1c>
    13b0:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__fp_inf>
    13b4:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__fp_nan>
    13b8:	11 24       	eor	r1, r1
    13ba:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_szero>

000013be <__mulsf3x>:
    13be:	0e 94 9e 09 	call	0x133c	; 0x133c <__fp_split3>
    13c2:	70 f3       	brcs	.-36     	; 0x13a0 <__mulsf3+0x8>

000013c4 <__mulsf3_pse>:
    13c4:	95 9f       	mul	r25, r21
    13c6:	c1 f3       	breq	.-16     	; 0x13b8 <__mulsf3+0x20>
    13c8:	95 0f       	add	r25, r21
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	55 1f       	adc	r21, r21
    13ce:	62 9f       	mul	r22, r18
    13d0:	f0 01       	movw	r30, r0
    13d2:	72 9f       	mul	r23, r18
    13d4:	bb 27       	eor	r27, r27
    13d6:	f0 0d       	add	r31, r0
    13d8:	b1 1d       	adc	r27, r1
    13da:	63 9f       	mul	r22, r19
    13dc:	aa 27       	eor	r26, r26
    13de:	f0 0d       	add	r31, r0
    13e0:	b1 1d       	adc	r27, r1
    13e2:	aa 1f       	adc	r26, r26
    13e4:	64 9f       	mul	r22, r20
    13e6:	66 27       	eor	r22, r22
    13e8:	b0 0d       	add	r27, r0
    13ea:	a1 1d       	adc	r26, r1
    13ec:	66 1f       	adc	r22, r22
    13ee:	82 9f       	mul	r24, r18
    13f0:	22 27       	eor	r18, r18
    13f2:	b0 0d       	add	r27, r0
    13f4:	a1 1d       	adc	r26, r1
    13f6:	62 1f       	adc	r22, r18
    13f8:	73 9f       	mul	r23, r19
    13fa:	b0 0d       	add	r27, r0
    13fc:	a1 1d       	adc	r26, r1
    13fe:	62 1f       	adc	r22, r18
    1400:	83 9f       	mul	r24, r19
    1402:	a0 0d       	add	r26, r0
    1404:	61 1d       	adc	r22, r1
    1406:	22 1f       	adc	r18, r18
    1408:	74 9f       	mul	r23, r20
    140a:	33 27       	eor	r19, r19
    140c:	a0 0d       	add	r26, r0
    140e:	61 1d       	adc	r22, r1
    1410:	23 1f       	adc	r18, r19
    1412:	84 9f       	mul	r24, r20
    1414:	60 0d       	add	r22, r0
    1416:	21 1d       	adc	r18, r1
    1418:	82 2f       	mov	r24, r18
    141a:	76 2f       	mov	r23, r22
    141c:	6a 2f       	mov	r22, r26
    141e:	11 24       	eor	r1, r1
    1420:	9f 57       	subi	r25, 0x7F	; 127
    1422:	50 40       	sbci	r21, 0x00	; 0
    1424:	9a f0       	brmi	.+38     	; 0x144c <__mulsf3_pse+0x88>
    1426:	f1 f0       	breq	.+60     	; 0x1464 <__mulsf3_pse+0xa0>
    1428:	88 23       	and	r24, r24
    142a:	4a f0       	brmi	.+18     	; 0x143e <__mulsf3_pse+0x7a>
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	bb 1f       	adc	r27, r27
    1432:	66 1f       	adc	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	91 50       	subi	r25, 0x01	; 1
    143a:	50 40       	sbci	r21, 0x00	; 0
    143c:	a9 f7       	brne	.-22     	; 0x1428 <__mulsf3_pse+0x64>
    143e:	9e 3f       	cpi	r25, 0xFE	; 254
    1440:	51 05       	cpc	r21, r1
    1442:	80 f0       	brcs	.+32     	; 0x1464 <__mulsf3_pse+0xa0>
    1444:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__fp_inf>
    1448:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_szero>
    144c:	5f 3f       	cpi	r21, 0xFF	; 255
    144e:	e4 f3       	brlt	.-8      	; 0x1448 <__mulsf3_pse+0x84>
    1450:	98 3e       	cpi	r25, 0xE8	; 232
    1452:	d4 f3       	brlt	.-12     	; 0x1448 <__mulsf3_pse+0x84>
    1454:	86 95       	lsr	r24
    1456:	77 95       	ror	r23
    1458:	67 95       	ror	r22
    145a:	b7 95       	ror	r27
    145c:	f7 95       	ror	r31
    145e:	e7 95       	ror	r30
    1460:	9f 5f       	subi	r25, 0xFF	; 255
    1462:	c1 f7       	brne	.-16     	; 0x1454 <__mulsf3_pse+0x90>
    1464:	fe 2b       	or	r31, r30
    1466:	88 0f       	add	r24, r24
    1468:	91 1d       	adc	r25, r1
    146a:	96 95       	lsr	r25
    146c:	87 95       	ror	r24
    146e:	97 f9       	bld	r25, 7
    1470:	08 95       	ret

00001472 <__fp_inf>:
    1472:	97 f9       	bld	r25, 7
    1474:	9f 67       	ori	r25, 0x7F	; 127
    1476:	80 e8       	ldi	r24, 0x80	; 128
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	08 95       	ret

0000147e <__fp_nan>:
    147e:	9f ef       	ldi	r25, 0xFF	; 255
    1480:	80 ec       	ldi	r24, 0xC0	; 192
    1482:	08 95       	ret

00001484 <__fp_pscA>:
    1484:	00 24       	eor	r0, r0
    1486:	0a 94       	dec	r0
    1488:	16 16       	cp	r1, r22
    148a:	17 06       	cpc	r1, r23
    148c:	18 06       	cpc	r1, r24
    148e:	09 06       	cpc	r0, r25
    1490:	08 95       	ret

00001492 <__fp_pscB>:
    1492:	00 24       	eor	r0, r0
    1494:	0a 94       	dec	r0
    1496:	12 16       	cp	r1, r18
    1498:	13 06       	cpc	r1, r19
    149a:	14 06       	cpc	r1, r20
    149c:	05 06       	cpc	r0, r21
    149e:	08 95       	ret

000014a0 <__fp_round>:
    14a0:	09 2e       	mov	r0, r25
    14a2:	03 94       	inc	r0
    14a4:	00 0c       	add	r0, r0
    14a6:	11 f4       	brne	.+4      	; 0x14ac <__fp_round+0xc>
    14a8:	88 23       	and	r24, r24
    14aa:	52 f0       	brmi	.+20     	; 0x14c0 <__fp_round+0x20>
    14ac:	bb 0f       	add	r27, r27
    14ae:	40 f4       	brcc	.+16     	; 0x14c0 <__fp_round+0x20>
    14b0:	bf 2b       	or	r27, r31
    14b2:	11 f4       	brne	.+4      	; 0x14b8 <__fp_round+0x18>
    14b4:	60 ff       	sbrs	r22, 0
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <__fp_round+0x20>
    14b8:	6f 5f       	subi	r22, 0xFF	; 255
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	8f 4f       	sbci	r24, 0xFF	; 255
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	08 95       	ret

000014c2 <__mulsi3>:
    14c2:	db 01       	movw	r26, r22
    14c4:	8f 93       	push	r24
    14c6:	9f 93       	push	r25
    14c8:	0e 94 a7 0a 	call	0x154e	; 0x154e <__muluhisi3>
    14cc:	bf 91       	pop	r27
    14ce:	af 91       	pop	r26
    14d0:	a2 9f       	mul	r26, r18
    14d2:	80 0d       	add	r24, r0
    14d4:	91 1d       	adc	r25, r1
    14d6:	a3 9f       	mul	r26, r19
    14d8:	90 0d       	add	r25, r0
    14da:	b2 9f       	mul	r27, r18
    14dc:	90 0d       	add	r25, r0
    14de:	11 24       	eor	r1, r1
    14e0:	08 95       	ret

000014e2 <__divmodhi4>:
    14e2:	97 fb       	bst	r25, 7
    14e4:	07 2e       	mov	r0, r23
    14e6:	16 f4       	brtc	.+4      	; 0x14ec <__divmodhi4+0xa>
    14e8:	00 94       	com	r0
    14ea:	07 d0       	rcall	.+14     	; 0x14fa <__divmodhi4_neg1>
    14ec:	77 fd       	sbrc	r23, 7
    14ee:	09 d0       	rcall	.+18     	; 0x1502 <__divmodhi4_neg2>
    14f0:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__udivmodhi4>
    14f4:	07 fc       	sbrc	r0, 7
    14f6:	05 d0       	rcall	.+10     	; 0x1502 <__divmodhi4_neg2>
    14f8:	3e f4       	brtc	.+14     	; 0x1508 <__divmodhi4_exit>

000014fa <__divmodhi4_neg1>:
    14fa:	90 95       	com	r25
    14fc:	81 95       	neg	r24
    14fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1500:	08 95       	ret

00001502 <__divmodhi4_neg2>:
    1502:	70 95       	com	r23
    1504:	61 95       	neg	r22
    1506:	7f 4f       	sbci	r23, 0xFF	; 255

00001508 <__divmodhi4_exit>:
    1508:	08 95       	ret

0000150a <__udivmodsi4>:
    150a:	a1 e2       	ldi	r26, 0x21	; 33
    150c:	1a 2e       	mov	r1, r26
    150e:	aa 1b       	sub	r26, r26
    1510:	bb 1b       	sub	r27, r27
    1512:	fd 01       	movw	r30, r26
    1514:	0d c0       	rjmp	.+26     	; 0x1530 <__udivmodsi4_ep>

00001516 <__udivmodsi4_loop>:
    1516:	aa 1f       	adc	r26, r26
    1518:	bb 1f       	adc	r27, r27
    151a:	ee 1f       	adc	r30, r30
    151c:	ff 1f       	adc	r31, r31
    151e:	a2 17       	cp	r26, r18
    1520:	b3 07       	cpc	r27, r19
    1522:	e4 07       	cpc	r30, r20
    1524:	f5 07       	cpc	r31, r21
    1526:	20 f0       	brcs	.+8      	; 0x1530 <__udivmodsi4_ep>
    1528:	a2 1b       	sub	r26, r18
    152a:	b3 0b       	sbc	r27, r19
    152c:	e4 0b       	sbc	r30, r20
    152e:	f5 0b       	sbc	r31, r21

00001530 <__udivmodsi4_ep>:
    1530:	66 1f       	adc	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	1a 94       	dec	r1
    153a:	69 f7       	brne	.-38     	; 0x1516 <__udivmodsi4_loop>
    153c:	60 95       	com	r22
    153e:	70 95       	com	r23
    1540:	80 95       	com	r24
    1542:	90 95       	com	r25
    1544:	9b 01       	movw	r18, r22
    1546:	ac 01       	movw	r20, r24
    1548:	bd 01       	movw	r22, r26
    154a:	cf 01       	movw	r24, r30
    154c:	08 95       	ret

0000154e <__muluhisi3>:
    154e:	0e 94 c6 0a 	call	0x158c	; 0x158c <__umulhisi3>
    1552:	a5 9f       	mul	r26, r21
    1554:	90 0d       	add	r25, r0
    1556:	b4 9f       	mul	r27, r20
    1558:	90 0d       	add	r25, r0
    155a:	a4 9f       	mul	r26, r20
    155c:	80 0d       	add	r24, r0
    155e:	91 1d       	adc	r25, r1
    1560:	11 24       	eor	r1, r1
    1562:	08 95       	ret

00001564 <__udivmodhi4>:
    1564:	aa 1b       	sub	r26, r26
    1566:	bb 1b       	sub	r27, r27
    1568:	51 e1       	ldi	r21, 0x11	; 17
    156a:	07 c0       	rjmp	.+14     	; 0x157a <__udivmodhi4_ep>

0000156c <__udivmodhi4_loop>:
    156c:	aa 1f       	adc	r26, r26
    156e:	bb 1f       	adc	r27, r27
    1570:	a6 17       	cp	r26, r22
    1572:	b7 07       	cpc	r27, r23
    1574:	10 f0       	brcs	.+4      	; 0x157a <__udivmodhi4_ep>
    1576:	a6 1b       	sub	r26, r22
    1578:	b7 0b       	sbc	r27, r23

0000157a <__udivmodhi4_ep>:
    157a:	88 1f       	adc	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	5a 95       	dec	r21
    1580:	a9 f7       	brne	.-22     	; 0x156c <__udivmodhi4_loop>
    1582:	80 95       	com	r24
    1584:	90 95       	com	r25
    1586:	bc 01       	movw	r22, r24
    1588:	cd 01       	movw	r24, r26
    158a:	08 95       	ret

0000158c <__umulhisi3>:
    158c:	a2 9f       	mul	r26, r18
    158e:	b0 01       	movw	r22, r0
    1590:	b3 9f       	mul	r27, r19
    1592:	c0 01       	movw	r24, r0
    1594:	a3 9f       	mul	r26, r19
    1596:	70 0d       	add	r23, r0
    1598:	81 1d       	adc	r24, r1
    159a:	11 24       	eor	r1, r1
    159c:	91 1d       	adc	r25, r1
    159e:	b2 9f       	mul	r27, r18
    15a0:	70 0d       	add	r23, r0
    15a2:	81 1d       	adc	r24, r1
    15a4:	11 24       	eor	r1, r1
    15a6:	91 1d       	adc	r25, r1
    15a8:	08 95       	ret

000015aa <printf>:
    15aa:	a0 e0       	ldi	r26, 0x00	; 0
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	eb ed       	ldi	r30, 0xDB	; 219
    15b0:	fa e0       	ldi	r31, 0x0A	; 10
    15b2:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__prologue_saves__+0x20>
    15b6:	ae 01       	movw	r20, r28
    15b8:	4b 5f       	subi	r20, 0xFB	; 251
    15ba:	5f 4f       	sbci	r21, 0xFF	; 255
    15bc:	fa 01       	movw	r30, r20
    15be:	61 91       	ld	r22, Z+
    15c0:	71 91       	ld	r23, Z+
    15c2:	af 01       	movw	r20, r30
    15c4:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <__iob+0x2>
    15c8:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <__iob+0x3>
    15cc:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <vfprintf>
    15d0:	e2 e0       	ldi	r30, 0x02	; 2
    15d2:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__epilogue_restores__+0x20>

000015d6 <vfprintf>:
    15d6:	ab e0       	ldi	r26, 0x0B	; 11
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e1 ef       	ldi	r30, 0xF1	; 241
    15dc:	fa e0       	ldi	r31, 0x0A	; 10
    15de:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__prologue_saves__>
    15e2:	6c 01       	movw	r12, r24
    15e4:	7b 01       	movw	r14, r22
    15e6:	8a 01       	movw	r16, r20
    15e8:	fc 01       	movw	r30, r24
    15ea:	17 82       	std	Z+7, r1	; 0x07
    15ec:	16 82       	std	Z+6, r1	; 0x06
    15ee:	83 81       	ldd	r24, Z+3	; 0x03
    15f0:	81 ff       	sbrs	r24, 1
    15f2:	cc c1       	rjmp	.+920    	; 0x198c <vfprintf+0x3b6>
    15f4:	ce 01       	movw	r24, r28
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	3c 01       	movw	r6, r24
    15fa:	f6 01       	movw	r30, r12
    15fc:	93 81       	ldd	r25, Z+3	; 0x03
    15fe:	f7 01       	movw	r30, r14
    1600:	93 fd       	sbrc	r25, 3
    1602:	85 91       	lpm	r24, Z+
    1604:	93 ff       	sbrs	r25, 3
    1606:	81 91       	ld	r24, Z+
    1608:	7f 01       	movw	r14, r30
    160a:	88 23       	and	r24, r24
    160c:	09 f4       	brne	.+2      	; 0x1610 <vfprintf+0x3a>
    160e:	ba c1       	rjmp	.+884    	; 0x1984 <vfprintf+0x3ae>
    1610:	85 32       	cpi	r24, 0x25	; 37
    1612:	39 f4       	brne	.+14     	; 0x1622 <vfprintf+0x4c>
    1614:	93 fd       	sbrc	r25, 3
    1616:	85 91       	lpm	r24, Z+
    1618:	93 ff       	sbrs	r25, 3
    161a:	81 91       	ld	r24, Z+
    161c:	7f 01       	movw	r14, r30
    161e:	85 32       	cpi	r24, 0x25	; 37
    1620:	29 f4       	brne	.+10     	; 0x162c <vfprintf+0x56>
    1622:	b6 01       	movw	r22, r12
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <fputc>
    162a:	e7 cf       	rjmp	.-50     	; 0x15fa <vfprintf+0x24>
    162c:	91 2c       	mov	r9, r1
    162e:	21 2c       	mov	r2, r1
    1630:	31 2c       	mov	r3, r1
    1632:	ff e1       	ldi	r31, 0x1F	; 31
    1634:	f3 15       	cp	r31, r3
    1636:	d8 f0       	brcs	.+54     	; 0x166e <vfprintf+0x98>
    1638:	8b 32       	cpi	r24, 0x2B	; 43
    163a:	79 f0       	breq	.+30     	; 0x165a <vfprintf+0x84>
    163c:	38 f4       	brcc	.+14     	; 0x164c <vfprintf+0x76>
    163e:	80 32       	cpi	r24, 0x20	; 32
    1640:	79 f0       	breq	.+30     	; 0x1660 <vfprintf+0x8a>
    1642:	83 32       	cpi	r24, 0x23	; 35
    1644:	a1 f4       	brne	.+40     	; 0x166e <vfprintf+0x98>
    1646:	23 2d       	mov	r18, r3
    1648:	20 61       	ori	r18, 0x10	; 16
    164a:	1d c0       	rjmp	.+58     	; 0x1686 <vfprintf+0xb0>
    164c:	8d 32       	cpi	r24, 0x2D	; 45
    164e:	61 f0       	breq	.+24     	; 0x1668 <vfprintf+0x92>
    1650:	80 33       	cpi	r24, 0x30	; 48
    1652:	69 f4       	brne	.+26     	; 0x166e <vfprintf+0x98>
    1654:	23 2d       	mov	r18, r3
    1656:	21 60       	ori	r18, 0x01	; 1
    1658:	16 c0       	rjmp	.+44     	; 0x1686 <vfprintf+0xb0>
    165a:	83 2d       	mov	r24, r3
    165c:	82 60       	ori	r24, 0x02	; 2
    165e:	38 2e       	mov	r3, r24
    1660:	e3 2d       	mov	r30, r3
    1662:	e4 60       	ori	r30, 0x04	; 4
    1664:	3e 2e       	mov	r3, r30
    1666:	2a c0       	rjmp	.+84     	; 0x16bc <vfprintf+0xe6>
    1668:	f3 2d       	mov	r31, r3
    166a:	f8 60       	ori	r31, 0x08	; 8
    166c:	1d c0       	rjmp	.+58     	; 0x16a8 <vfprintf+0xd2>
    166e:	37 fc       	sbrc	r3, 7
    1670:	2d c0       	rjmp	.+90     	; 0x16cc <vfprintf+0xf6>
    1672:	20 ed       	ldi	r18, 0xD0	; 208
    1674:	28 0f       	add	r18, r24
    1676:	2a 30       	cpi	r18, 0x0A	; 10
    1678:	40 f0       	brcs	.+16     	; 0x168a <vfprintf+0xb4>
    167a:	8e 32       	cpi	r24, 0x2E	; 46
    167c:	b9 f4       	brne	.+46     	; 0x16ac <vfprintf+0xd6>
    167e:	36 fc       	sbrc	r3, 6
    1680:	81 c1       	rjmp	.+770    	; 0x1984 <vfprintf+0x3ae>
    1682:	23 2d       	mov	r18, r3
    1684:	20 64       	ori	r18, 0x40	; 64
    1686:	32 2e       	mov	r3, r18
    1688:	19 c0       	rjmp	.+50     	; 0x16bc <vfprintf+0xe6>
    168a:	36 fe       	sbrs	r3, 6
    168c:	06 c0       	rjmp	.+12     	; 0x169a <vfprintf+0xc4>
    168e:	8a e0       	ldi	r24, 0x0A	; 10
    1690:	98 9e       	mul	r9, r24
    1692:	20 0d       	add	r18, r0
    1694:	11 24       	eor	r1, r1
    1696:	92 2e       	mov	r9, r18
    1698:	11 c0       	rjmp	.+34     	; 0x16bc <vfprintf+0xe6>
    169a:	ea e0       	ldi	r30, 0x0A	; 10
    169c:	2e 9e       	mul	r2, r30
    169e:	20 0d       	add	r18, r0
    16a0:	11 24       	eor	r1, r1
    16a2:	22 2e       	mov	r2, r18
    16a4:	f3 2d       	mov	r31, r3
    16a6:	f0 62       	ori	r31, 0x20	; 32
    16a8:	3f 2e       	mov	r3, r31
    16aa:	08 c0       	rjmp	.+16     	; 0x16bc <vfprintf+0xe6>
    16ac:	8c 36       	cpi	r24, 0x6C	; 108
    16ae:	21 f4       	brne	.+8      	; 0x16b8 <vfprintf+0xe2>
    16b0:	83 2d       	mov	r24, r3
    16b2:	80 68       	ori	r24, 0x80	; 128
    16b4:	38 2e       	mov	r3, r24
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <vfprintf+0xe6>
    16b8:	88 36       	cpi	r24, 0x68	; 104
    16ba:	41 f4       	brne	.+16     	; 0x16cc <vfprintf+0xf6>
    16bc:	f7 01       	movw	r30, r14
    16be:	93 fd       	sbrc	r25, 3
    16c0:	85 91       	lpm	r24, Z+
    16c2:	93 ff       	sbrs	r25, 3
    16c4:	81 91       	ld	r24, Z+
    16c6:	7f 01       	movw	r14, r30
    16c8:	81 11       	cpse	r24, r1
    16ca:	b3 cf       	rjmp	.-154    	; 0x1632 <vfprintf+0x5c>
    16cc:	98 2f       	mov	r25, r24
    16ce:	9f 7d       	andi	r25, 0xDF	; 223
    16d0:	95 54       	subi	r25, 0x45	; 69
    16d2:	93 30       	cpi	r25, 0x03	; 3
    16d4:	28 f4       	brcc	.+10     	; 0x16e0 <vfprintf+0x10a>
    16d6:	0c 5f       	subi	r16, 0xFC	; 252
    16d8:	1f 4f       	sbci	r17, 0xFF	; 255
    16da:	9f e3       	ldi	r25, 0x3F	; 63
    16dc:	99 83       	std	Y+1, r25	; 0x01
    16de:	0d c0       	rjmp	.+26     	; 0x16fa <vfprintf+0x124>
    16e0:	83 36       	cpi	r24, 0x63	; 99
    16e2:	31 f0       	breq	.+12     	; 0x16f0 <vfprintf+0x11a>
    16e4:	83 37       	cpi	r24, 0x73	; 115
    16e6:	71 f0       	breq	.+28     	; 0x1704 <vfprintf+0x12e>
    16e8:	83 35       	cpi	r24, 0x53	; 83
    16ea:	09 f0       	breq	.+2      	; 0x16ee <vfprintf+0x118>
    16ec:	59 c0       	rjmp	.+178    	; 0x17a0 <vfprintf+0x1ca>
    16ee:	21 c0       	rjmp	.+66     	; 0x1732 <vfprintf+0x15c>
    16f0:	f8 01       	movw	r30, r16
    16f2:	80 81       	ld	r24, Z
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	0e 5f       	subi	r16, 0xFE	; 254
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
    16fa:	88 24       	eor	r8, r8
    16fc:	83 94       	inc	r8
    16fe:	91 2c       	mov	r9, r1
    1700:	53 01       	movw	r10, r6
    1702:	13 c0       	rjmp	.+38     	; 0x172a <vfprintf+0x154>
    1704:	28 01       	movw	r4, r16
    1706:	f2 e0       	ldi	r31, 0x02	; 2
    1708:	4f 0e       	add	r4, r31
    170a:	51 1c       	adc	r5, r1
    170c:	f8 01       	movw	r30, r16
    170e:	a0 80       	ld	r10, Z
    1710:	b1 80       	ldd	r11, Z+1	; 0x01
    1712:	36 fe       	sbrs	r3, 6
    1714:	03 c0       	rjmp	.+6      	; 0x171c <vfprintf+0x146>
    1716:	69 2d       	mov	r22, r9
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <vfprintf+0x14a>
    171c:	6f ef       	ldi	r22, 0xFF	; 255
    171e:	7f ef       	ldi	r23, 0xFF	; 255
    1720:	c5 01       	movw	r24, r10
    1722:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <strnlen>
    1726:	4c 01       	movw	r8, r24
    1728:	82 01       	movw	r16, r4
    172a:	f3 2d       	mov	r31, r3
    172c:	ff 77       	andi	r31, 0x7F	; 127
    172e:	3f 2e       	mov	r3, r31
    1730:	16 c0       	rjmp	.+44     	; 0x175e <vfprintf+0x188>
    1732:	28 01       	movw	r4, r16
    1734:	22 e0       	ldi	r18, 0x02	; 2
    1736:	42 0e       	add	r4, r18
    1738:	51 1c       	adc	r5, r1
    173a:	f8 01       	movw	r30, r16
    173c:	a0 80       	ld	r10, Z
    173e:	b1 80       	ldd	r11, Z+1	; 0x01
    1740:	36 fe       	sbrs	r3, 6
    1742:	03 c0       	rjmp	.+6      	; 0x174a <vfprintf+0x174>
    1744:	69 2d       	mov	r22, r9
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	02 c0       	rjmp	.+4      	; 0x174e <vfprintf+0x178>
    174a:	6f ef       	ldi	r22, 0xFF	; 255
    174c:	7f ef       	ldi	r23, 0xFF	; 255
    174e:	c5 01       	movw	r24, r10
    1750:	0e 94 cc 0c 	call	0x1998	; 0x1998 <strnlen_P>
    1754:	4c 01       	movw	r8, r24
    1756:	f3 2d       	mov	r31, r3
    1758:	f0 68       	ori	r31, 0x80	; 128
    175a:	3f 2e       	mov	r3, r31
    175c:	82 01       	movw	r16, r4
    175e:	33 fc       	sbrc	r3, 3
    1760:	1b c0       	rjmp	.+54     	; 0x1798 <vfprintf+0x1c2>
    1762:	82 2d       	mov	r24, r2
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	88 16       	cp	r8, r24
    1768:	99 06       	cpc	r9, r25
    176a:	b0 f4       	brcc	.+44     	; 0x1798 <vfprintf+0x1c2>
    176c:	b6 01       	movw	r22, r12
    176e:	80 e2       	ldi	r24, 0x20	; 32
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <fputc>
    1776:	2a 94       	dec	r2
    1778:	f4 cf       	rjmp	.-24     	; 0x1762 <vfprintf+0x18c>
    177a:	f5 01       	movw	r30, r10
    177c:	37 fc       	sbrc	r3, 7
    177e:	85 91       	lpm	r24, Z+
    1780:	37 fe       	sbrs	r3, 7
    1782:	81 91       	ld	r24, Z+
    1784:	5f 01       	movw	r10, r30
    1786:	b6 01       	movw	r22, r12
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <fputc>
    178e:	21 10       	cpse	r2, r1
    1790:	2a 94       	dec	r2
    1792:	21 e0       	ldi	r18, 0x01	; 1
    1794:	82 1a       	sub	r8, r18
    1796:	91 08       	sbc	r9, r1
    1798:	81 14       	cp	r8, r1
    179a:	91 04       	cpc	r9, r1
    179c:	71 f7       	brne	.-36     	; 0x177a <vfprintf+0x1a4>
    179e:	e8 c0       	rjmp	.+464    	; 0x1970 <vfprintf+0x39a>
    17a0:	84 36       	cpi	r24, 0x64	; 100
    17a2:	11 f0       	breq	.+4      	; 0x17a8 <vfprintf+0x1d2>
    17a4:	89 36       	cpi	r24, 0x69	; 105
    17a6:	41 f5       	brne	.+80     	; 0x17f8 <vfprintf+0x222>
    17a8:	f8 01       	movw	r30, r16
    17aa:	37 fe       	sbrs	r3, 7
    17ac:	07 c0       	rjmp	.+14     	; 0x17bc <vfprintf+0x1e6>
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	0c 5f       	subi	r16, 0xFC	; 252
    17b8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ba:	08 c0       	rjmp	.+16     	; 0x17cc <vfprintf+0x1f6>
    17bc:	60 81       	ld	r22, Z
    17be:	71 81       	ldd	r23, Z+1	; 0x01
    17c0:	07 2e       	mov	r0, r23
    17c2:	00 0c       	add	r0, r0
    17c4:	88 0b       	sbc	r24, r24
    17c6:	99 0b       	sbc	r25, r25
    17c8:	0e 5f       	subi	r16, 0xFE	; 254
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	f3 2d       	mov	r31, r3
    17ce:	ff 76       	andi	r31, 0x6F	; 111
    17d0:	3f 2e       	mov	r3, r31
    17d2:	97 ff       	sbrs	r25, 7
    17d4:	09 c0       	rjmp	.+18     	; 0x17e8 <vfprintf+0x212>
    17d6:	90 95       	com	r25
    17d8:	80 95       	com	r24
    17da:	70 95       	com	r23
    17dc:	61 95       	neg	r22
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	8f 4f       	sbci	r24, 0xFF	; 255
    17e2:	9f 4f       	sbci	r25, 0xFF	; 255
    17e4:	f0 68       	ori	r31, 0x80	; 128
    17e6:	3f 2e       	mov	r3, r31
    17e8:	2a e0       	ldi	r18, 0x0A	; 10
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	a3 01       	movw	r20, r6
    17ee:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__ultoa_invert>
    17f2:	88 2e       	mov	r8, r24
    17f4:	86 18       	sub	r8, r6
    17f6:	45 c0       	rjmp	.+138    	; 0x1882 <vfprintf+0x2ac>
    17f8:	85 37       	cpi	r24, 0x75	; 117
    17fa:	31 f4       	brne	.+12     	; 0x1808 <vfprintf+0x232>
    17fc:	23 2d       	mov	r18, r3
    17fe:	2f 7e       	andi	r18, 0xEF	; 239
    1800:	b2 2e       	mov	r11, r18
    1802:	2a e0       	ldi	r18, 0x0A	; 10
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	25 c0       	rjmp	.+74     	; 0x1852 <vfprintf+0x27c>
    1808:	93 2d       	mov	r25, r3
    180a:	99 7f       	andi	r25, 0xF9	; 249
    180c:	b9 2e       	mov	r11, r25
    180e:	8f 36       	cpi	r24, 0x6F	; 111
    1810:	c1 f0       	breq	.+48     	; 0x1842 <vfprintf+0x26c>
    1812:	18 f4       	brcc	.+6      	; 0x181a <vfprintf+0x244>
    1814:	88 35       	cpi	r24, 0x58	; 88
    1816:	79 f0       	breq	.+30     	; 0x1836 <vfprintf+0x260>
    1818:	b5 c0       	rjmp	.+362    	; 0x1984 <vfprintf+0x3ae>
    181a:	80 37       	cpi	r24, 0x70	; 112
    181c:	19 f0       	breq	.+6      	; 0x1824 <vfprintf+0x24e>
    181e:	88 37       	cpi	r24, 0x78	; 120
    1820:	21 f0       	breq	.+8      	; 0x182a <vfprintf+0x254>
    1822:	b0 c0       	rjmp	.+352    	; 0x1984 <vfprintf+0x3ae>
    1824:	e9 2f       	mov	r30, r25
    1826:	e0 61       	ori	r30, 0x10	; 16
    1828:	be 2e       	mov	r11, r30
    182a:	b4 fe       	sbrs	r11, 4
    182c:	0d c0       	rjmp	.+26     	; 0x1848 <vfprintf+0x272>
    182e:	fb 2d       	mov	r31, r11
    1830:	f4 60       	ori	r31, 0x04	; 4
    1832:	bf 2e       	mov	r11, r31
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <vfprintf+0x272>
    1836:	34 fe       	sbrs	r3, 4
    1838:	0a c0       	rjmp	.+20     	; 0x184e <vfprintf+0x278>
    183a:	29 2f       	mov	r18, r25
    183c:	26 60       	ori	r18, 0x06	; 6
    183e:	b2 2e       	mov	r11, r18
    1840:	06 c0       	rjmp	.+12     	; 0x184e <vfprintf+0x278>
    1842:	28 e0       	ldi	r18, 0x08	; 8
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	05 c0       	rjmp	.+10     	; 0x1852 <vfprintf+0x27c>
    1848:	20 e1       	ldi	r18, 0x10	; 16
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <vfprintf+0x27c>
    184e:	20 e1       	ldi	r18, 0x10	; 16
    1850:	32 e0       	ldi	r19, 0x02	; 2
    1852:	f8 01       	movw	r30, r16
    1854:	b7 fe       	sbrs	r11, 7
    1856:	07 c0       	rjmp	.+14     	; 0x1866 <vfprintf+0x290>
    1858:	60 81       	ld	r22, Z
    185a:	71 81       	ldd	r23, Z+1	; 0x01
    185c:	82 81       	ldd	r24, Z+2	; 0x02
    185e:	93 81       	ldd	r25, Z+3	; 0x03
    1860:	0c 5f       	subi	r16, 0xFC	; 252
    1862:	1f 4f       	sbci	r17, 0xFF	; 255
    1864:	06 c0       	rjmp	.+12     	; 0x1872 <vfprintf+0x29c>
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 5f       	subi	r16, 0xFE	; 254
    1870:	1f 4f       	sbci	r17, 0xFF	; 255
    1872:	a3 01       	movw	r20, r6
    1874:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__ultoa_invert>
    1878:	88 2e       	mov	r8, r24
    187a:	86 18       	sub	r8, r6
    187c:	fb 2d       	mov	r31, r11
    187e:	ff 77       	andi	r31, 0x7F	; 127
    1880:	3f 2e       	mov	r3, r31
    1882:	36 fe       	sbrs	r3, 6
    1884:	0d c0       	rjmp	.+26     	; 0x18a0 <vfprintf+0x2ca>
    1886:	23 2d       	mov	r18, r3
    1888:	2e 7f       	andi	r18, 0xFE	; 254
    188a:	a2 2e       	mov	r10, r18
    188c:	89 14       	cp	r8, r9
    188e:	58 f4       	brcc	.+22     	; 0x18a6 <vfprintf+0x2d0>
    1890:	34 fe       	sbrs	r3, 4
    1892:	0b c0       	rjmp	.+22     	; 0x18aa <vfprintf+0x2d4>
    1894:	32 fc       	sbrc	r3, 2
    1896:	09 c0       	rjmp	.+18     	; 0x18aa <vfprintf+0x2d4>
    1898:	83 2d       	mov	r24, r3
    189a:	8e 7e       	andi	r24, 0xEE	; 238
    189c:	a8 2e       	mov	r10, r24
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <vfprintf+0x2d4>
    18a0:	b8 2c       	mov	r11, r8
    18a2:	a3 2c       	mov	r10, r3
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <vfprintf+0x2d6>
    18a6:	b8 2c       	mov	r11, r8
    18a8:	01 c0       	rjmp	.+2      	; 0x18ac <vfprintf+0x2d6>
    18aa:	b9 2c       	mov	r11, r9
    18ac:	a4 fe       	sbrs	r10, 4
    18ae:	0f c0       	rjmp	.+30     	; 0x18ce <vfprintf+0x2f8>
    18b0:	fe 01       	movw	r30, r28
    18b2:	e8 0d       	add	r30, r8
    18b4:	f1 1d       	adc	r31, r1
    18b6:	80 81       	ld	r24, Z
    18b8:	80 33       	cpi	r24, 0x30	; 48
    18ba:	21 f4       	brne	.+8      	; 0x18c4 <vfprintf+0x2ee>
    18bc:	9a 2d       	mov	r25, r10
    18be:	99 7e       	andi	r25, 0xE9	; 233
    18c0:	a9 2e       	mov	r10, r25
    18c2:	09 c0       	rjmp	.+18     	; 0x18d6 <vfprintf+0x300>
    18c4:	a2 fe       	sbrs	r10, 2
    18c6:	06 c0       	rjmp	.+12     	; 0x18d4 <vfprintf+0x2fe>
    18c8:	b3 94       	inc	r11
    18ca:	b3 94       	inc	r11
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <vfprintf+0x300>
    18ce:	8a 2d       	mov	r24, r10
    18d0:	86 78       	andi	r24, 0x86	; 134
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <vfprintf+0x300>
    18d4:	b3 94       	inc	r11
    18d6:	a3 fc       	sbrc	r10, 3
    18d8:	11 c0       	rjmp	.+34     	; 0x18fc <vfprintf+0x326>
    18da:	a0 fe       	sbrs	r10, 0
    18dc:	06 c0       	rjmp	.+12     	; 0x18ea <vfprintf+0x314>
    18de:	b2 14       	cp	r11, r2
    18e0:	88 f4       	brcc	.+34     	; 0x1904 <vfprintf+0x32e>
    18e2:	28 0c       	add	r2, r8
    18e4:	92 2c       	mov	r9, r2
    18e6:	9b 18       	sub	r9, r11
    18e8:	0e c0       	rjmp	.+28     	; 0x1906 <vfprintf+0x330>
    18ea:	b2 14       	cp	r11, r2
    18ec:	60 f4       	brcc	.+24     	; 0x1906 <vfprintf+0x330>
    18ee:	b6 01       	movw	r22, r12
    18f0:	80 e2       	ldi	r24, 0x20	; 32
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <fputc>
    18f8:	b3 94       	inc	r11
    18fa:	f7 cf       	rjmp	.-18     	; 0x18ea <vfprintf+0x314>
    18fc:	b2 14       	cp	r11, r2
    18fe:	18 f4       	brcc	.+6      	; 0x1906 <vfprintf+0x330>
    1900:	2b 18       	sub	r2, r11
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <vfprintf+0x332>
    1904:	98 2c       	mov	r9, r8
    1906:	21 2c       	mov	r2, r1
    1908:	a4 fe       	sbrs	r10, 4
    190a:	10 c0       	rjmp	.+32     	; 0x192c <vfprintf+0x356>
    190c:	b6 01       	movw	r22, r12
    190e:	80 e3       	ldi	r24, 0x30	; 48
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <fputc>
    1916:	a2 fe       	sbrs	r10, 2
    1918:	17 c0       	rjmp	.+46     	; 0x1948 <vfprintf+0x372>
    191a:	a1 fc       	sbrc	r10, 1
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <vfprintf+0x34e>
    191e:	88 e7       	ldi	r24, 0x78	; 120
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <vfprintf+0x352>
    1924:	88 e5       	ldi	r24, 0x58	; 88
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	b6 01       	movw	r22, r12
    192a:	0c c0       	rjmp	.+24     	; 0x1944 <vfprintf+0x36e>
    192c:	8a 2d       	mov	r24, r10
    192e:	86 78       	andi	r24, 0x86	; 134
    1930:	59 f0       	breq	.+22     	; 0x1948 <vfprintf+0x372>
    1932:	a1 fe       	sbrs	r10, 1
    1934:	02 c0       	rjmp	.+4      	; 0x193a <vfprintf+0x364>
    1936:	8b e2       	ldi	r24, 0x2B	; 43
    1938:	01 c0       	rjmp	.+2      	; 0x193c <vfprintf+0x366>
    193a:	80 e2       	ldi	r24, 0x20	; 32
    193c:	a7 fc       	sbrc	r10, 7
    193e:	8d e2       	ldi	r24, 0x2D	; 45
    1940:	b6 01       	movw	r22, r12
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <fputc>
    1948:	89 14       	cp	r8, r9
    194a:	38 f4       	brcc	.+14     	; 0x195a <vfprintf+0x384>
    194c:	b6 01       	movw	r22, r12
    194e:	80 e3       	ldi	r24, 0x30	; 48
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <fputc>
    1956:	9a 94       	dec	r9
    1958:	f7 cf       	rjmp	.-18     	; 0x1948 <vfprintf+0x372>
    195a:	8a 94       	dec	r8
    195c:	f3 01       	movw	r30, r6
    195e:	e8 0d       	add	r30, r8
    1960:	f1 1d       	adc	r31, r1
    1962:	80 81       	ld	r24, Z
    1964:	b6 01       	movw	r22, r12
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <fputc>
    196c:	81 10       	cpse	r8, r1
    196e:	f5 cf       	rjmp	.-22     	; 0x195a <vfprintf+0x384>
    1970:	22 20       	and	r2, r2
    1972:	09 f4       	brne	.+2      	; 0x1976 <vfprintf+0x3a0>
    1974:	42 ce       	rjmp	.-892    	; 0x15fa <vfprintf+0x24>
    1976:	b6 01       	movw	r22, r12
    1978:	80 e2       	ldi	r24, 0x20	; 32
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <fputc>
    1980:	2a 94       	dec	r2
    1982:	f6 cf       	rjmp	.-20     	; 0x1970 <vfprintf+0x39a>
    1984:	f6 01       	movw	r30, r12
    1986:	86 81       	ldd	r24, Z+6	; 0x06
    1988:	97 81       	ldd	r25, Z+7	; 0x07
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <vfprintf+0x3ba>
    198c:	8f ef       	ldi	r24, 0xFF	; 255
    198e:	9f ef       	ldi	r25, 0xFF	; 255
    1990:	2b 96       	adiw	r28, 0x0b	; 11
    1992:	e2 e1       	ldi	r30, 0x12	; 18
    1994:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__epilogue_restores__>

00001998 <strnlen_P>:
    1998:	fc 01       	movw	r30, r24
    199a:	05 90       	lpm	r0, Z+
    199c:	61 50       	subi	r22, 0x01	; 1
    199e:	70 40       	sbci	r23, 0x00	; 0
    19a0:	01 10       	cpse	r0, r1
    19a2:	d8 f7       	brcc	.-10     	; 0x199a <strnlen_P+0x2>
    19a4:	80 95       	com	r24
    19a6:	90 95       	com	r25
    19a8:	8e 0f       	add	r24, r30
    19aa:	9f 1f       	adc	r25, r31
    19ac:	08 95       	ret

000019ae <strnlen>:
    19ae:	fc 01       	movw	r30, r24
    19b0:	61 50       	subi	r22, 0x01	; 1
    19b2:	70 40       	sbci	r23, 0x00	; 0
    19b4:	01 90       	ld	r0, Z+
    19b6:	01 10       	cpse	r0, r1
    19b8:	d8 f7       	brcc	.-10     	; 0x19b0 <strnlen+0x2>
    19ba:	80 95       	com	r24
    19bc:	90 95       	com	r25
    19be:	8e 0f       	add	r24, r30
    19c0:	9f 1f       	adc	r25, r31
    19c2:	08 95       	ret

000019c4 <fputc>:
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	fb 01       	movw	r30, r22
    19ce:	23 81       	ldd	r18, Z+3	; 0x03
    19d0:	21 fd       	sbrc	r18, 1
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <fputc+0x16>
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	9f ef       	ldi	r25, 0xFF	; 255
    19d8:	2c c0       	rjmp	.+88     	; 0x1a32 <fputc+0x6e>
    19da:	22 ff       	sbrs	r18, 2
    19dc:	16 c0       	rjmp	.+44     	; 0x1a0a <fputc+0x46>
    19de:	46 81       	ldd	r20, Z+6	; 0x06
    19e0:	57 81       	ldd	r21, Z+7	; 0x07
    19e2:	24 81       	ldd	r18, Z+4	; 0x04
    19e4:	35 81       	ldd	r19, Z+5	; 0x05
    19e6:	42 17       	cp	r20, r18
    19e8:	53 07       	cpc	r21, r19
    19ea:	44 f4       	brge	.+16     	; 0x19fc <fputc+0x38>
    19ec:	a0 81       	ld	r26, Z
    19ee:	b1 81       	ldd	r27, Z+1	; 0x01
    19f0:	9d 01       	movw	r18, r26
    19f2:	2f 5f       	subi	r18, 0xFF	; 255
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	31 83       	std	Z+1, r19	; 0x01
    19f8:	20 83       	st	Z, r18
    19fa:	8c 93       	st	X, r24
    19fc:	26 81       	ldd	r18, Z+6	; 0x06
    19fe:	37 81       	ldd	r19, Z+7	; 0x07
    1a00:	2f 5f       	subi	r18, 0xFF	; 255
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	37 83       	std	Z+7, r19	; 0x07
    1a06:	26 83       	std	Z+6, r18	; 0x06
    1a08:	14 c0       	rjmp	.+40     	; 0x1a32 <fputc+0x6e>
    1a0a:	8b 01       	movw	r16, r22
    1a0c:	ec 01       	movw	r28, r24
    1a0e:	fb 01       	movw	r30, r22
    1a10:	00 84       	ldd	r0, Z+8	; 0x08
    1a12:	f1 85       	ldd	r31, Z+9	; 0x09
    1a14:	e0 2d       	mov	r30, r0
    1a16:	09 95       	icall
    1a18:	89 2b       	or	r24, r25
    1a1a:	e1 f6       	brne	.-72     	; 0x19d4 <fputc+0x10>
    1a1c:	d8 01       	movw	r26, r16
    1a1e:	16 96       	adiw	r26, 0x06	; 6
    1a20:	8d 91       	ld	r24, X+
    1a22:	9c 91       	ld	r25, X
    1a24:	17 97       	sbiw	r26, 0x07	; 7
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	17 96       	adiw	r26, 0x07	; 7
    1a2a:	9c 93       	st	X, r25
    1a2c:	8e 93       	st	-X, r24
    1a2e:	16 97       	sbiw	r26, 0x06	; 6
    1a30:	ce 01       	movw	r24, r28
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <__ultoa_invert>:
    1a3c:	fa 01       	movw	r30, r20
    1a3e:	aa 27       	eor	r26, r26
    1a40:	28 30       	cpi	r18, 0x08	; 8
    1a42:	51 f1       	breq	.+84     	; 0x1a98 <__ultoa_invert+0x5c>
    1a44:	20 31       	cpi	r18, 0x10	; 16
    1a46:	81 f1       	breq	.+96     	; 0x1aa8 <__ultoa_invert+0x6c>
    1a48:	e8 94       	clt
    1a4a:	6f 93       	push	r22
    1a4c:	6e 7f       	andi	r22, 0xFE	; 254
    1a4e:	6e 5f       	subi	r22, 0xFE	; 254
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	8f 4f       	sbci	r24, 0xFF	; 255
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	af 4f       	sbci	r26, 0xFF	; 255
    1a58:	b1 e0       	ldi	r27, 0x01	; 1
    1a5a:	3e d0       	rcall	.+124    	; 0x1ad8 <__ultoa_invert+0x9c>
    1a5c:	b4 e0       	ldi	r27, 0x04	; 4
    1a5e:	3c d0       	rcall	.+120    	; 0x1ad8 <__ultoa_invert+0x9c>
    1a60:	67 0f       	add	r22, r23
    1a62:	78 1f       	adc	r23, r24
    1a64:	89 1f       	adc	r24, r25
    1a66:	9a 1f       	adc	r25, r26
    1a68:	a1 1d       	adc	r26, r1
    1a6a:	68 0f       	add	r22, r24
    1a6c:	79 1f       	adc	r23, r25
    1a6e:	8a 1f       	adc	r24, r26
    1a70:	91 1d       	adc	r25, r1
    1a72:	a1 1d       	adc	r26, r1
    1a74:	6a 0f       	add	r22, r26
    1a76:	71 1d       	adc	r23, r1
    1a78:	81 1d       	adc	r24, r1
    1a7a:	91 1d       	adc	r25, r1
    1a7c:	a1 1d       	adc	r26, r1
    1a7e:	20 d0       	rcall	.+64     	; 0x1ac0 <__ultoa_invert+0x84>
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <__ultoa_invert+0x48>
    1a82:	68 94       	set
    1a84:	3f 91       	pop	r19
    1a86:	2a e0       	ldi	r18, 0x0A	; 10
    1a88:	26 9f       	mul	r18, r22
    1a8a:	11 24       	eor	r1, r1
    1a8c:	30 19       	sub	r19, r0
    1a8e:	30 5d       	subi	r19, 0xD0	; 208
    1a90:	31 93       	st	Z+, r19
    1a92:	de f6       	brtc	.-74     	; 0x1a4a <__ultoa_invert+0xe>
    1a94:	cf 01       	movw	r24, r30
    1a96:	08 95       	ret
    1a98:	46 2f       	mov	r20, r22
    1a9a:	47 70       	andi	r20, 0x07	; 7
    1a9c:	40 5d       	subi	r20, 0xD0	; 208
    1a9e:	41 93       	st	Z+, r20
    1aa0:	b3 e0       	ldi	r27, 0x03	; 3
    1aa2:	0f d0       	rcall	.+30     	; 0x1ac2 <__ultoa_invert+0x86>
    1aa4:	c9 f7       	brne	.-14     	; 0x1a98 <__ultoa_invert+0x5c>
    1aa6:	f6 cf       	rjmp	.-20     	; 0x1a94 <__ultoa_invert+0x58>
    1aa8:	46 2f       	mov	r20, r22
    1aaa:	4f 70       	andi	r20, 0x0F	; 15
    1aac:	40 5d       	subi	r20, 0xD0	; 208
    1aae:	4a 33       	cpi	r20, 0x3A	; 58
    1ab0:	18 f0       	brcs	.+6      	; 0x1ab8 <__ultoa_invert+0x7c>
    1ab2:	49 5d       	subi	r20, 0xD9	; 217
    1ab4:	31 fd       	sbrc	r19, 1
    1ab6:	40 52       	subi	r20, 0x20	; 32
    1ab8:	41 93       	st	Z+, r20
    1aba:	02 d0       	rcall	.+4      	; 0x1ac0 <__ultoa_invert+0x84>
    1abc:	a9 f7       	brne	.-22     	; 0x1aa8 <__ultoa_invert+0x6c>
    1abe:	ea cf       	rjmp	.-44     	; 0x1a94 <__ultoa_invert+0x58>
    1ac0:	b4 e0       	ldi	r27, 0x04	; 4
    1ac2:	a6 95       	lsr	r26
    1ac4:	97 95       	ror	r25
    1ac6:	87 95       	ror	r24
    1ac8:	77 95       	ror	r23
    1aca:	67 95       	ror	r22
    1acc:	ba 95       	dec	r27
    1ace:	c9 f7       	brne	.-14     	; 0x1ac2 <__ultoa_invert+0x86>
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	61 05       	cpc	r22, r1
    1ad4:	71 05       	cpc	r23, r1
    1ad6:	08 95       	ret
    1ad8:	9b 01       	movw	r18, r22
    1ada:	ac 01       	movw	r20, r24
    1adc:	0a 2e       	mov	r0, r26
    1ade:	06 94       	lsr	r0
    1ae0:	57 95       	ror	r21
    1ae2:	47 95       	ror	r20
    1ae4:	37 95       	ror	r19
    1ae6:	27 95       	ror	r18
    1ae8:	ba 95       	dec	r27
    1aea:	c9 f7       	brne	.-14     	; 0x1ade <__ultoa_invert+0xa2>
    1aec:	62 0f       	add	r22, r18
    1aee:	73 1f       	adc	r23, r19
    1af0:	84 1f       	adc	r24, r20
    1af2:	95 1f       	adc	r25, r21
    1af4:	a0 1d       	adc	r26, r0
    1af6:	08 95       	ret

00001af8 <__prologue_saves__>:
    1af8:	2f 92       	push	r2
    1afa:	3f 92       	push	r3
    1afc:	4f 92       	push	r4
    1afe:	5f 92       	push	r5
    1b00:	6f 92       	push	r6
    1b02:	7f 92       	push	r7
    1b04:	8f 92       	push	r8
    1b06:	9f 92       	push	r9
    1b08:	af 92       	push	r10
    1b0a:	bf 92       	push	r11
    1b0c:	cf 92       	push	r12
    1b0e:	df 92       	push	r13
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	ca 1b       	sub	r28, r26
    1b22:	db 0b       	sbc	r29, r27
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	09 94       	ijmp

00001b30 <__epilogue_restores__>:
    1b30:	2a 88       	ldd	r2, Y+18	; 0x12
    1b32:	39 88       	ldd	r3, Y+17	; 0x11
    1b34:	48 88       	ldd	r4, Y+16	; 0x10
    1b36:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b38:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b40:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b42:	b9 84       	ldd	r11, Y+9	; 0x09
    1b44:	c8 84       	ldd	r12, Y+8	; 0x08
    1b46:	df 80       	ldd	r13, Y+7	; 0x07
    1b48:	ee 80       	ldd	r14, Y+6	; 0x06
    1b4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b4c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b4e:	1b 81       	ldd	r17, Y+3	; 0x03
    1b50:	aa 81       	ldd	r26, Y+2	; 0x02
    1b52:	b9 81       	ldd	r27, Y+1	; 0x01
    1b54:	ce 0f       	add	r28, r30
    1b56:	d1 1d       	adc	r29, r1
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	ed 01       	movw	r28, r26
    1b64:	08 95       	ret

00001b66 <_exit>:
    1b66:	f8 94       	cli

00001b68 <__stop_program>:
    1b68:	ff cf       	rjmp	.-2      	; 0x1b68 <__stop_program>

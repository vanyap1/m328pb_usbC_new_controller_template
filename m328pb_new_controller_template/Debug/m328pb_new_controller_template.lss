
m328pb_new_controller_template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001cc  00800100  00003c36  00003cca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000375  008002cc  008002cc  00003e96  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003e96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003ef4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002b88  00000000  00000000  00003f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0005925e  00000000  00000000  00006abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000344b  00000000  00000000  0005fd1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001327d  00000000  00000000  00063165  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00010ab0  00000000  00000000  000763e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00023def  00000000  00000000  00086e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00068d48  00000000  00000000  000aac83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002bd8  00000000  00000000  001139cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006566  00000000  00000000  001165a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__ctors_end>
       4:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__vector_1>
       8:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
       c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      10:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      14:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      18:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      1c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      20:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      24:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      28:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      2c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      30:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      34:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      38:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      3c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      40:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      44:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      48:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__vector_18>
      4c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      50:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_20>
      54:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__vector_21>
      58:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      5c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      60:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      64:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      68:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      6c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      70:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      74:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      78:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      7c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      80:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      84:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      88:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      8c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      90:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      94:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      98:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      9c:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__vector_39>
      a0:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__vector_40>
      a4:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      a8:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      ac:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      b0:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	6e 61       	ori	r22, 0x1E	; 30
      b6:	6e 00       	.word	0x006e	; ????

000000b8 <__c.2332>:
      b8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e8:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     108:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     118:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     128:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     138:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     148:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     158:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     168:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     178:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     188:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     198:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b6 <u8g2_font_6x10_mf>:
     1b6:	bf 02 03 02 03 04 01 02 04 06 0a 00 fe 07 fe 07     ................
     1c6:	00 01 76 02 f9 09 3c 20 07 d6 f8 f9 23 00 21 0a     ..v...< ....#.!.
     1d6:	d6 f8 91 b4 3b 98 53 00 22 0b d6 f8 93 2c c9 92     ....;.S."....,..
     1e6:	9c 37 00 23 10 d6 f8 93 2c 89 06 29 89 06 29 c9     .7.#....,..)..).
     1f6:	92 9c 00 24 0d d6 f8 91 70 4a c2 31 89 c6 9c 02     ...$....pJ.1....
     206:	25 0d d6 f8 a3 a4 29 09 2b 51 d2 94 13 26 0e d6     %.....).+Q...&..
     216:	f8 c3 24 4b c2 4a 53 a6 e4 30 00 27 09 d6 f8 91     ..$K.JS..0.'....
     226:	b4 ce 23 00 28 09 d6 f8 a1 b0 5a ae 13 29 09 d6     ..#.(.....Z..)..
     236:	f8 e3 6a b1 4e 02 2a 0e d6 f8 d1 2c 4a a2 41 4a     ..j.N.*....,J.AJ
     246:	a2 2c a7 02 2b 0a d6 f8 f1 34 1b b4 34 67 2c 09     .,..+....4..4g,.
     256:	d6 f8 79 13 eb 18 00 2d 09 d6 f8 d9 06 9d 1b 00     ..y....-........
     266:	2e 09 d6 f8 79 0b c7 1c 02 2f 0a d6 f8 b1 34 ec     ....y..../....4.
     276:	9a d3 00 30 10 d6 f8 91 30 89 b2 24 4b b2 28 09     ...0....0..$K.(.
     286:	73 0a 00 31 0c d6 f8 91 50 4b d2 b6 41 87 01 32     s..1....PK..A..2
     296:	0c d6 f8 a7 2c cd b4 30 1d 74 18 33 0c d6 b8 07     ....,..0.t.3....
     2a6:	35 0c e5 24 8b 76 02 34 0d d6 f8 a1 50 4b a2 d2     5..$.v.4....PK..
     2b6:	20 a6 39 01 35 0d d6 b8 07 25 4d 24 29 4d b2 68      .9.5....%M$)M.h
     2c6:	27 36 0d d6 f8 11 2d 4c 13 49 4a b2 68 27 37 0b     '6....-L.IJ.h'7.
     2d6:	d6 b8 07 35 4c c3 6a 4e 02 38 0d d6 f8 a7 2c c9     ...5L.jN.8....,.
     2e6:	a2 29 4b b2 68 27 39 0d d6 f8 a7 2c 89 2c 69 98     .)K.h'9....,.,i.
     2f6:	e9 14 00 3a 0c d6 f8 f1 70 cc c1 70 cc 21 00 3b     ...:....p..p.!.;
     306:	0b d6 f8 f1 70 cc 41 b1 8e 01 3c 09 d6 f8 b1 b0     ....p.A...<.....
     316:	b9 1d 06 3d 0a d6 f8 89 83 3e e8 8c 00 3e 09 d6     ...=.....>...>..
     326:	f8 e3 c6 76 12 00 3f 0b d6 f8 a7 2c ac e6 60 4e     ...v..?....,..`N
     336:	01 40 0c d6 f8 a7 2c 89 94 2e 52 bc 13 41 10 d6     .@....,...R..A..
     346:	f8 91 30 89 b2 24 4b 06 25 4b b2 1c 06 42 0c d6     ..0..$K.%K...B..
     356:	b8 87 2c 6a da a2 96 21 27 43 0b d6 f8 a7 2c 49     ..,j...!'C....,I
     366:	db a2 9d 00 44 0b d6 b8 87 2c ea 5f 86 9c 00 45     ....D....,._...E
     376:	0d d6 b8 07 25 4d 87 28 4d 07 1d 06 46 0c d6 b8     ....%M.(M...F...
     386:	07 25 4d 87 28 ad d3 00 47 0c d6 f8 a7 2c 49 4b     .%M.(...G....,IK
     396:	4a 16 ed 04 48 10 d6 b8 b3 24 4b b2 64 50 b2 24     J...H....$K.dP.$
     3a6:	4b b2 1c 06 49 08 d6 f8 c7 b4 e3 4e 4a 0b d6 f8     K...I......NJ...
     3b6:	91 31 6d aa e9 14 00 4b 0e d6 b8 b3 24 aa 64 62     .1m....K....$.db
     3c6:	92 45 b5 1c 06 4c 09 d6 b8 d3 5e 07 1d 06 4d 0e     .E...L....^...M.
     3d6:	d6 b8 b3 24 4b 2c dd 92 2c c9 72 18 4e 0f d6 b8     ...$K,..,.r.N...
     3e6:	b3 24 4b a4 a4 93 92 25 59 0e 03 4f 0e d6 f8 a7     .$K....%Y..O....
     3f6:	2c c9 92 2c c9 92 2c da 09 50 0d d6 b8 87 28 4b     ,..,..,..P....(K
     406:	b2 64 88 d2 3a 0d 51 0e d6 f8 a7 2c c9 92 2c c9     .d..:.Q....,..,.
     416:	92 a6 39 07 52 10 d6 b8 87 28 4b b2 64 88 92 2c     ..9.R....(K.d..,
     426:	aa e5 30 00 53 0c d6 f8 a7 2c 89 e7 24 8b 76 02     ..0.S....,..$.v.
     436:	54 09 d6 b8 07 2d ed 9d 02 55 0f d6 b8 b3 24 4b     T....-...U....$K
     446:	b2 24 4b b2 24 8b 76 02 56 10 d6 b8 b3 24 4b b2     .$K.$.v.V....$K.
     456:	28 c9 92 2c 09 73 0a 00 57 0e d6 b8 b3 24 4b b2     (..,.s..W....$K.
     466:	a4 2f 96 2c 87 01 58 0f d6 b8 b3 24 8b 92 b0 12     ./.,..X....$....
     476:	65 49 96 c3 00 59 0c d6 b8 b3 24 8b 92 30 6d a7     eI...Y....$..0m.
     486:	00 5a 0b d6 b8 07 35 ec 3a e8 30 00 5b 08 d6 f8     .Z....5.:.0.[...
     496:	b7 b4 eb 4e 5c 09 d6 b8 d3 b8 6b 0e 03 5d 08 d6     ...N\.....k..]..
     4a6:	f8 d7 de 76 02 5e 0b d6 f8 91 30 89 b2 9c 27 00     ...v.^....0...'.
     4b6:	5f 08 d6 f8 f9 3c e8 00 60 08 d6 b8 e2 9c 5f 00     _....<..`....._.
     4c6:	61 0d d6 f8 a9 73 34 24 59 34 e4 30 00 62 0d d6     a....s4$Y4.0.b..
     4d6:	b8 d3 8a 24 25 59 22 25 89 4e 63 0b d6 f8 a9 53     ...$%Y"%.Nc....S
     4e6:	96 a4 59 b4 13 64 0e d6 f8 b1 34 52 4a 4a 96 44     ..Y..d....4RJJ.D
     4f6:	96 1c 06 65 0b d6 f8 a9 53 96 0c 4a bc 13 66 0c     ...e....S..J..f.
     506:	d6 f8 11 2d 2a 0e 59 5a 27 01 67 0f d6 f8 a9 43     ...-*.YZ'.g....C
     516:	92 25 59 34 a4 49 16 4d 00 68 0e d6 b8 d3 8a 24     .%Y4.I.M.h.....$
     526:	25 59 92 25 59 0e 03 69 0a d6 f8 91 1c 53 1b 77     %Y.%Y..i.....S.w
     536:	02 6a 0b d6 f8 b1 1c 53 9b ba 49 00 6b 0d d6 b8     .j.....S..I.k...
     546:	d3 5a 12 45 5b 54 cb 61 00 6c 08 d6 f8 d5 1e 77     .Z.E[T.a.l.....w
     556:	02 6d 0b d6 f8 89 4a 94 f4 6f 39 0c 6e 0e d6 f8     .m....J..o9.n...
     566:	89 89 24 25 59 92 25 59 0e 03 6f 0c d6 f8 a9 53     ..$%Y.%Y..o....S
     576:	96 64 49 16 ed 04 70 0f d6 f8 89 89 24 25 59 22     .dI...p.....$%Y"
     586:	25 89 94 a6 00 71 0d d6 f8 a9 4a 49 c9 92 c8 92     %....q....JI....
     596:	56 00 72 0b d6 f8 89 89 24 25 69 9d 06 73 0a d6     V.r.....$%i..s..
     5a6:	f8 a9 53 3c 27 43 4e 74 0b d6 f8 d3 70 c8 d2 52     ..S<'CNt....p..R
     5b6:	a6 13 75 0d d6 f8 89 59 92 25 59 12 59 72 18 76     ..u....Y.%Y.Yr.v
     5c6:	0d d6 f8 89 59 92 45 49 96 84 39 05 77 0c d6 f8     ....Y.EI..9.w...
     5d6:	89 59 92 25 7d 4a 72 02 78 0d d6 f8 89 59 94 84     .Y.%}Jr.x....Y..
     5e6:	95 28 cb 61 00 79 0e d6 f8 89 59 92 25 91 25 4d     .(.a.y....Y.%.%M
     5f6:	b2 68 02 7a 0b d6 f8 89 83 d8 38 e8 30 00 7b 0c     .h.z......8.0.{.
     606:	d6 f8 21 2d ce e4 30 d6 61 00 7c 09 d6 f8 91 b4     ..!-..0.a.|.....
     616:	ef 14 00 7d 0b d6 f8 e5 30 d6 e2 4c a7 00 7e 0a     ...}....0..L..~.
     626:	d6 f8 a3 a4 53 ce 1b 00 a0 07 d6 f8 f9 23 00 a1     ....S........#..
     636:	0a d6 f8 91 1c 4c bb 53 00 a2 0f d6 f8 f1 70 48     .....L.S......pH
     646:	6a 49 96 84 43 96 43 00 a3 0d d6 f8 11 2d 2a 8e     jI..C.C......-*.
     656:	69 94 24 3a 01 a4 0d d6 f8 89 59 b4 25 d9 94 e5     i.$:......Y.%...
     666:	30 00 a5 0e d6 b8 b3 24 8b 92 30 1b b4 b4 0e 01     0......$..0.....
     676:	a6 0b d6 f8 91 b4 0e a6 75 0a 00 a7 0d d6 f8 a7     ........u.......
     686:	74 8b b2 28 5b a3 1d 01 a8 07 d6 78 ea fc 01 a9     t..([......x....
     696:	0c d6 f8 a7 2c 69 91 92 6e d1 4e aa 0d d6 f8 91     ....,i..n.N.....
     6a6:	a9 45 4b 72 64 c8 a9 00 ab 0e d6 f8 c9 51 12 25     .EKrd........Q.%
     6b6:	51 16 65 51 8e 02 ac 09 d6 f8 19 87 34 67 04 ad     Q.eQ........4g..
     6c6:	09 d6 f8 19 87 9c 1b 00 ae 0e d6 f8 a7 2c 59 12     .............,Y.
     6d6:	29 91 92 2c da 09 af 08 d6 38 06 9d 9f 01 b0 0a     )..,.....8......
     6e6:	d6 f8 91 30 09 73 1e 01 b1 0c d6 f8 f1 34 1b b4     ...0.s.......4..
     6f6:	34 1b 74 18 b2 0b d6 b8 b4 28 2c 0e 39 37 00 b3     4.t......(,.97..
     706:	0a d6 78 e6 4c 8e 76 8e 00 b4 08 d6 f8 c2 9c 9f     ..x.L.v.........
     716:	00 b5 0f d6 f8 89 59 92 25 59 22 25 89 94 83 00     ......Y.%Y"%....
     726:	b6 10 d6 f8 87 64 49 96 48 c9 92 2c c9 92 1c 06     .....dI.H..,....
     736:	b7 08 d6 f8 59 73 ae 00 b8 08 d6 f8 f9 29 cc 00     ....Ys.......)..
     746:	b9 09 d6 b8 42 b5 b8 73 04 ba 0c d6 f8 11 2d 6a     ....B..s......-j
     756:	d3 a1 21 a7 02 bb 0d d6 f8 89 51 16 65 51 12 25     ..!.......Q.eQ.%
     766:	51 4e bc 0d d6 78 42 b5 38 85 5a 12 0d 69 0c bd     QN...xB.8.Z..i..
     776:	0d d6 78 42 b5 b8 84 49 1a 86 33 00 be 0e d6 38     ..xB...I..3....8
     786:	e4 30 ce a4 50 4b a2 21 cd 01 bf 0b d6 f8 91 1c     .0..PK.!........
     796:	4c c3 5a b4 13 c0 0f d6 78 e2 70 ca 92 2c 19 94     L.Z.....x.p..,..
     7a6:	2c c9 72 18 c1 0f d6 f8 c2 70 ca 92 2c 19 94 2c     ,.r......p..,..,
     7b6:	c9 72 18 c2 10 d6 b8 c2 24 9b b2 24 4b 06 25 4b     .r......$..$K.%K
     7c6:	b2 1c 06 c3 11 d6 78 a2 24 d1 a6 2c c9 92 41 c9     ......x.$..,..A.
     7d6:	92 2c 87 01 c4 10 d6 78 ea d0 94 25 59 32 28 59     .,.....x...%Y2(Y
     7e6:	92 e5 30 00 c5 10 d6 b8 c2 24 9b b2 24 4b 06 25     ..0......$..$K.%
     7f6:	4b b2 1c 06 c6 0e d6 f8 91 21 29 35 0d 43 d4 b4     K........!)5.C..
     806:	a3 00 c7 0b d6 f8 a7 2c 49 db a2 b1 08 c8 0e d6     .......,I.......
     816:	78 c2 41 49 d3 21 4a d3 41 87 01 c9 0e d6 f8 a2     x.AI.!J.A.......
     826:	41 49 d3 21 4a d3 41 87 01 ca 0e d6 b8 b2 41 49     AI.!J.A.......AI
     836:	d3 21 4a d3 41 87 01 cb 0e d6 78 4a 83 92 a6 43     .!J.A.....xJ...C
     846:	94 a6 83 0e 03 cc 0a d6 78 e2 70 4c 1b 77 02 cd     ........x.pL.w..
     856:	0a d6 f8 c2 70 4c 1b 77 02 ce 0b d6 b8 c2 24 1b     ....pL.w......$.
     866:	d3 c6 9d 00 cf 0a d6 78 ea d0 98 36 ee 04 d0 0c     .......x...6....
     876:	d6 b8 87 2c 6a 59 a2 2e 43 4e d1 11 d6 b8 92 28     ...,jY..CN.....(
     886:	89 b2 44 4a 3a 29 59 92 e5 30 00 d2 0e d6 78 e2     ..DJ:)Y..0....x.
     896:	70 ca 92 2c c9 92 2c da 09 d3 0e d6 f8 c2 70 ca     p..,..,.......p.
     8a6:	92 2c c9 92 2c da 09 d4 0f d6 b8 c2 24 9b b2 24     .,..,.......$..$
     8b6:	4b b2 24 8b 76 02 d5 10 d6 b8 92 28 c9 a6 2c c9     K.$.v......(..,.
     8c6:	92 2c c9 a2 9d 00 d6 0e d6 78 ea d0 94 25 59 92     .,.......x...%Y.
     8d6:	25 59 b4 13 d7 0d d6 f8 89 59 94 84 95 28 cb 61     %Y.......Y...(.a
     8e6:	00 d8 0e d6 f8 a7 48 89 94 16 29 91 a2 9d 00 d9     ......H...).....
     8f6:	0e d6 78 e2 ac 92 25 59 92 25 59 b4 13 da 0e d6     ..x...%Y.%Y.....
     906:	f8 c2 ac 92 25 59 92 25 59 b4 13 db 0f d6 b8 c2     ....%Y.%Y.......
     916:	24 47 b2 24 4b b2 24 8b 76 02 dc 0f d6 78 ea 48     $G.$K.$.v....x.H
     926:	96 64 49 96 64 49 16 ed 04 dd 0d d6 f8 c2 ac 92     .dI.dI..........
     936:	45 49 98 d6 29 00 de 0d d6 b8 d3 21 ca 92 21 4a     EI..)......!..!J
     946:	eb 34 00 df 0e d6 f8 a7 2c 89 2a 59 54 4b 12 9d     .4......,.*YTK..
     956:	00 e0 0e d6 78 e2 1c 9b a3 21 c9 a2 21 87 01 e1     ....x....!..!...
     966:	0e d6 f8 c2 1c 9b a3 21 c9 a2 21 87 01 e2 0f d6     .......!..!.....
     976:	b8 c2 24 87 e6 68 48 b2 68 c8 61 00 e3 0f d6 b8     ..$..hH.h.a.....
     986:	92 28 c9 a1 39 1a 92 2c 1a 72 18 e4 0e d6 f8 93     .(..9..,.r......
     996:	1c 9a a3 21 c9 a2 21 87 01 e5 0f d6 b8 c2 24 0c     ...!..!.......$.
     9a6:	e7 68 48 b2 68 c8 61 00 e6 0d d6 f8 a9 43 98 24     .hH.h.a......C.$
     9b6:	c3 94 0d 3a 0a e7 0c d6 f8 a9 53 96 a4 59 34 16     ...:......S..Y4.
     9c6:	01 e8 0d d6 78 e2 1c 9b b2 64 50 e2 9d 00 e9 0d     ....x....dP.....
     9d6:	d6 f8 c2 1c 9b b2 64 50 e2 9d 00 ea 0d d6 b8 c2     ......dP........
     9e6:	24 87 a6 2c 19 94 78 27 eb 0d d6 f8 93 1c 9a b2     $..,..x'........
     9f6:	64 50 e2 9d 00 ec 0a d6 78 e2 1c 53 1b 77 02 ed     dP......x..S.w..
     a06:	0a d6 b8 c2 1c 54 1b 77 02 ee 0b d6 b8 c2 24 87     .....T.w......$.
     a16:	d4 c6 9d 00 ef 0a d6 f8 93 1c 52 1b 77 02 f0 0c     ..........R.w...
     a26:	d6 b8 6d 53 96 64 49 16 ed 04 f1 11 d6 b8 92 28     ..mS.dI........(
     a36:	c9 91 44 92 92 2c c9 92 2c 87 01 f2 0d d6 78 e2     ..D..,..,.....x.
     a46:	1c 9b b2 24 4b b2 68 27 f3 0d d6 f8 c2 1c 9b b2     ...$K.h'........
     a56:	24 4b b2 68 27 f4 0e d6 b8 c2 24 87 a6 2c c9 92     $K.h'.....$..,..
     a66:	2c da 09 f5 0f d6 b8 92 28 c9 a1 29 4b b2 24 8b     ,.......(..)K.$.
     a76:	76 02 f6 0d d6 f8 93 1c 9a b2 24 4b b2 68 27 f7     v.........$K.h'.
     a86:	0a d6 f8 f1 1c 1a 74 28 67 f8 0d d6 f8 a9 43 12     ......t(g.....C.
     a96:	29 2d 52 32 e4 04 f9 0f d6 78 e2 1c ca 92 2c c9     )-R2.....x....,.
     aa6:	92 c8 92 c3 00 fa 0f d6 f8 c2 1c ca 92 2c c9 92     .............,..
     ab6:	c8 92 c3 00 fb 10 d6 b8 c2 24 47 b2 24 4b b2 24     .........$G.$K.$
     ac6:	b2 e4 30 00 fc 0f d6 f8 93 1c c9 92 2c c9 92 c8     ..0.........,...
     ad6:	92 c3 00 fd 0f d6 f8 a1 30 ab 64 49 64 49 93 2c     ........0.dIdI.,
     ae6:	9a 00 fe 0f d6 f8 d1 74 88 b2 24 4b b2 64 88 d2     .......t..$K.d..
     af6:	14 ff 10 d6 f8 93 1c c9 92 2c 89 2c 69 92 45 13     .........,.,i.E.
     b06:	00 00 00 00 04 ff ff 00 00 00                       ..........

00000b10 <__ctors_end>:
     b10:	11 24       	eor	r1, r1
     b12:	1f be       	out	0x3f, r1	; 63
     b14:	cf ef       	ldi	r28, 0xFF	; 255
     b16:	d8 e0       	ldi	r29, 0x08	; 8
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	cd bf       	out	0x3d, r28	; 61

00000b1c <__do_copy_data>:
     b1c:	12 e0       	ldi	r17, 0x02	; 2
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	b1 e0       	ldi	r27, 0x01	; 1
     b22:	e6 e3       	ldi	r30, 0x36	; 54
     b24:	fc e3       	ldi	r31, 0x3C	; 60
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <__do_copy_data+0x10>
     b28:	05 90       	lpm	r0, Z+
     b2a:	0d 92       	st	X+, r0
     b2c:	ac 3c       	cpi	r26, 0xCC	; 204
     b2e:	b1 07       	cpc	r27, r17
     b30:	d9 f7       	brne	.-10     	; 0xb28 <__do_copy_data+0xc>

00000b32 <__do_clear_bss>:
     b32:	26 e0       	ldi	r18, 0x06	; 6
     b34:	ac ec       	ldi	r26, 0xCC	; 204
     b36:	b2 e0       	ldi	r27, 0x02	; 2
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <.do_clear_bss_start>

00000b3a <.do_clear_bss_loop>:
     b3a:	1d 92       	st	X+, r1

00000b3c <.do_clear_bss_start>:
     b3c:	a1 34       	cpi	r26, 0x41	; 65
     b3e:	b2 07       	cpc	r27, r18
     b40:	e1 f7       	brne	.-8      	; 0xb3a <.do_clear_bss_loop>
     b42:	0e 94 4e 0a 	call	0x149c	; 0x149c <main>
     b46:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <_exit>

00000b4a <__bad_interrupt>:
     b4a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b4e <__vector_21>:

uint16_t get_adc(uint8_t source){
	adc_pin_select(source);
	//uint16_t adc_tmp_data = adc_convert();
	return adc_convert();
}
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	11 24       	eor	r1, r1
     b58:	8f 93       	push	r24
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     b60:	8f 91       	pop	r24
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	0f 90       	pop	r0
     b68:	1f 90       	pop	r1
     b6a:	18 95       	reti

00000b6c <adc_init>:
     b6c:	ec e7       	ldi	r30, 0x7C	; 124
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	80 6c       	ori	r24, 0xC0	; 192
     b74:	80 83       	st	Z, r24
     b76:	ea e7       	ldi	r30, 0x7A	; 122
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	8f 68       	ori	r24, 0x8F	; 143
     b7e:	80 83       	st	Z, r24
     b80:	08 95       	ret

00000b82 <adc_pin_select>:
     b82:	ec e7       	ldi	r30, 0x7C	; 124
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	90 81       	ld	r25, Z
     b88:	90 7f       	andi	r25, 0xF0	; 240
     b8a:	90 83       	st	Z, r25
     b8c:	90 81       	ld	r25, Z
     b8e:	89 2b       	or	r24, r25
     b90:	80 83       	st	Z, r24
     b92:	08 95       	ret

00000b94 <adc_convert>:
     b94:	ea e7       	ldi	r30, 0x7A	; 122
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	80 68       	ori	r24, 0x80	; 128
     b9c:	80 83       	st	Z, r24
     b9e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     ba2:	80 81       	ld	r24, Z
     ba4:	80 64       	ori	r24, 0x40	; 64
     ba6:	80 83       	st	Z, r24
     ba8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bac:	88 23       	and	r24, r24
     bae:	e1 f3       	breq	.-8      	; 0xba8 <adc_convert+0x14>
     bb0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     bb4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     bb8:	ea e7       	ldi	r30, 0x7A	; 122
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	90 81       	ld	r25, Z
     bbe:	9f 77       	andi	r25, 0x7F	; 127
     bc0:	90 83       	st	Z, r25
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	92 2b       	or	r25, r18
     bc6:	08 95       	ret

00000bc8 <get_mVolt>:

uint16_t get_mVolt(uint8_t source){
	adc_pin_select(source);
     bc8:	0e 94 c1 05 	call	0xb82	; 0xb82 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_VOLT(adc_convert());
     bcc:	0e 94 ca 05 	call	0xb94	; 0xb94 <adc_convert>
     bd0:	bc 01       	movw	r22, r24
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__floatunsisf>
     bda:	2d ec       	ldi	r18, 0xCD	; 205
     bdc:	3e e1       	ldi	r19, 0x1E	; 30
     bde:	48 e9       	ldi	r20, 0x98	; 152
     be0:	5f e3       	ldi	r21, 0x3F	; 63
     be2:	0e 94 0b 18 	call	0x3016	; 0x3016 <__mulsf3>
     be6:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__fixunssfsi>
}
     bea:	cb 01       	movw	r24, r22
     bec:	08 95       	ret

00000bee <PowerMeterInit>:


uint16_t PowerMeterGetId(){
	
	return PowerMeterGetReg(MANUFACTURER_ID_REG);
}
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <PowerMeterInit+0x6>
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <__data_end>
     bfc:	93 e0       	ldi	r25, 0x03	; 3
     bfe:	99 83       	std	Y+1, r25	; 0x01
     c00:	9f ef       	ldi	r25, 0xFF	; 255
     c02:	9a 83       	std	Y+2, r25	; 0x02
     c04:	22 e0       	ldi	r18, 0x02	; 2
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	ae 01       	movw	r20, r28
     c0a:	4f 5f       	subi	r20, 0xFF	; 255
     c0c:	5f 4f       	sbci	r21, 0xFF	; 255
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	0e 94 0c 09 	call	0x1218	; 0x1218 <twi_write>
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <PowerMeterGetReg>:
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	00 d0       	rcall	.+0      	; 0xc24 <PowerMeterGetReg+0x6>
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	19 82       	std	Y+1, r1	; 0x01
     c2a:	1a 82       	std	Y+2, r1	; 0x02
     c2c:	22 e0       	ldi	r18, 0x02	; 2
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	ae 01       	movw	r20, r28
     c32:	4f 5f       	subi	r20, 0xFF	; 255
     c34:	5f 4f       	sbci	r21, 0xFF	; 255
     c36:	68 2f       	mov	r22, r24
     c38:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
     c3c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <twi_read>
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	98 2f       	mov	r25, r24
     c46:	88 27       	eor	r24, r24
     c48:	2a 81       	ldd	r18, Y+2	; 0x02
     c4a:	82 2b       	or	r24, r18
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <PowerMeterMeasure>:
	uint8_t reg_raw[2] = {0, 0};	//Read one 16 bit word
	twi_read(INA_ADDR, reg_addr, reg_raw, sizeof(reg_raw));
	return (reg_raw[0] << 8) | reg_raw[1];
}

uint8_t PowerMeterMeasure(powerData * pmStruc){
     c56:	8f 92       	push	r8
     c58:	9f 92       	push	r9
     c5a:	af 92       	push	r10
     c5c:	bf 92       	push	r11
     c5e:	cf 92       	push	r12
     c60:	df 92       	push	r13
     c62:	ef 92       	push	r14
     c64:	ff 92       	push	r15
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	ec 01       	movw	r28, r24
	float milliAmptVal = (PowerMeterGetReg(SHUNT_VOLTAGE_REG)*CURRENT_MULTIPLIER)+CURRENT_OFFSET;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <PowerMeterGetReg>
     c72:	bc 01       	movw	r22, r24
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__floatunsisf>
     c7c:	29 e6       	ldi	r18, 0x69	; 105
     c7e:	36 ef       	ldi	r19, 0xF6	; 246
     c80:	49 e5       	ldi	r20, 0x59	; 89
     c82:	5f e3       	ldi	r21, 0x3F	; 63
     c84:	0e 94 0b 18 	call	0x3016	; 0x3016 <__mulsf3>
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	a9 01       	movw	r20, r18
     c8e:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__addsf3>
     c92:	6b 01       	movw	r12, r22
     c94:	7c 01       	movw	r14, r24
	float milliVoltVal = (PowerMeterGetReg(BUS_VOLTAGE_REG)*VOLTAGE_MULTIPLIER)+VOLTAGE_OFFSET;
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	0e 94 0f 06 	call	0xc1e	; 0xc1e <PowerMeterGetReg>
     c9c:	bc 01       	movw	r22, r24
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__floatunsisf>
     ca6:	2c e6       	ldi	r18, 0x6C	; 108
     ca8:	39 e4       	ldi	r19, 0x49	; 73
     caa:	4d e9       	ldi	r20, 0x9D	; 157
     cac:	5f e3       	ldi	r21, 0x3F	; 63
     cae:	0e 94 0b 18 	call	0x3016	; 0x3016 <__mulsf3>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	a9 01       	movw	r20, r18
     cb8:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__addsf3>
     cbc:	4b 01       	movw	r8, r22
     cbe:	5c 01       	movw	r10, r24
	pmStruc->voltage = (uint16_t)milliVoltVal;
     cc0:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__fixunssfsi>
     cc4:	7d 83       	std	Y+5, r23	; 0x05
     cc6:	6c 83       	std	Y+4, r22	; 0x04
	pmStruc->current = (int16_t)milliAmptVal;
     cc8:	c7 01       	movw	r24, r14
     cca:	b6 01       	movw	r22, r12
     ccc:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__fixsfsi>
     cd0:	7b 83       	std	Y+3, r23	; 0x03
     cd2:	6a 83       	std	Y+2, r22	; 0x02
	pmStruc->power = (milliAmptVal*milliVoltVal)/1000000;
     cd4:	a5 01       	movw	r20, r10
     cd6:	94 01       	movw	r18, r8
     cd8:	c7 01       	movw	r24, r14
     cda:	b6 01       	movw	r22, r12
     cdc:	0e 94 0b 18 	call	0x3016	; 0x3016 <__mulsf3>
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	34 e2       	ldi	r19, 0x24	; 36
     ce4:	44 e7       	ldi	r20, 0x74	; 116
     ce6:	59 e4       	ldi	r21, 0x49	; 73
     ce8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__divsf3>
     cec:	6e 83       	std	Y+6, r22	; 0x06
     cee:	7f 83       	std	Y+7, r23	; 0x07
     cf0:	88 87       	std	Y+8, r24	; 0x08
     cf2:	99 87       	std	Y+9, r25	; 0x09
	pmStruc->energy=pmStruc->energy+pmStruc->power/3600;
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	41 e6       	ldi	r20, 0x61	; 97
     cfa:	55 e4       	ldi	r21, 0x45	; 69
     cfc:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__divsf3>
     d00:	9b 01       	movw	r18, r22
     d02:	ac 01       	movw	r20, r24
     d04:	6a 85       	ldd	r22, Y+10	; 0x0a
     d06:	7b 85       	ldd	r23, Y+11	; 0x0b
     d08:	8c 85       	ldd	r24, Y+12	; 0x0c
     d0a:	9d 85       	ldd	r25, Y+13	; 0x0d
     d0c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__addsf3>
     d10:	6a 87       	std	Y+10, r22	; 0x0a
     d12:	7b 87       	std	Y+11, r23	; 0x0b
     d14:	8c 87       	std	Y+12, r24	; 0x0c
     d16:	9d 87       	std	Y+13, r25	; 0x0d
	return 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	08 95       	ret

00000d30 <lcd_gpio_init>:
		break;
		default:
		return 0;
	}
	return 1;
}
     d30:	61 e0       	ldi	r22, 0x01	; 1
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gpio_set_pin_direction>
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	87 e0       	ldi	r24, 0x07	; 7
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gpio_set_pin_direction>
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	84 e0       	ldi	r24, 0x04	; 4
     d48:	91 e0       	ldi	r25, 0x01	; 1
     d4a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gpio_set_pin_direction>
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 b9 06 	call	0xd72	; 0xd72 <gpio_set_pin_level>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	87 e0       	ldi	r24, 0x07	; 7
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	0e 94 b9 06 	call	0xd72	; 0xd72 <gpio_set_pin_level>
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	0e 94 b9 06 	call	0xd72	; 0xd72 <gpio_set_pin_level>
     d6c:	08 95       	ret

00000d6e <fake_delay_fn>:
	gpio_set_pin_level(&lcd_cs_pin, value);
}

uint8_t fake_delay_fn(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr){
	return 0;
}
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	08 95       	ret

00000d72 <gpio_set_pin_level>:
*/


void gpio_set_pin_level(gpio *GPIOx , const bool level)
{
	if (level) {
     d72:	66 23       	and	r22, r22
     d74:	99 f0       	breq	.+38     	; 0xd9c <gpio_set_pin_level+0x2a>
		*GPIOx->port |= 1 << GPIOx->pin;
     d76:	dc 01       	movw	r26, r24
     d78:	ed 91       	ld	r30, X+
     d7a:	fc 91       	ld	r31, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	21 e0       	ldi	r18, 0x01	; 1
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	a9 01       	movw	r20, r18
     d84:	12 96       	adiw	r26, 0x02	; 2
     d86:	0c 90       	ld	r0, X
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <gpio_set_pin_level+0x1c>
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <gpio_set_pin_level+0x18>
     d92:	ca 01       	movw	r24, r20
     d94:	90 81       	ld	r25, Z
     d96:	89 2b       	or	r24, r25
     d98:	80 83       	st	Z, r24
     d9a:	08 95       	ret
		} else {
		*GPIOx->port &= ~(1 << GPIOx->pin);
     d9c:	dc 01       	movw	r26, r24
     d9e:	ed 91       	ld	r30, X+
     da0:	fc 91       	ld	r31, X
     da2:	11 97       	sbiw	r26, 0x01	; 1
     da4:	21 e0       	ldi	r18, 0x01	; 1
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	a9 01       	movw	r20, r18
     daa:	12 96       	adiw	r26, 0x02	; 2
     dac:	0c 90       	ld	r0, X
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <gpio_set_pin_level+0x42>
     db0:	44 0f       	add	r20, r20
     db2:	55 1f       	adc	r21, r21
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <gpio_set_pin_level+0x3e>
     db8:	ca 01       	movw	r24, r20
     dba:	80 95       	com	r24
     dbc:	90 81       	ld	r25, Z
     dbe:	89 23       	and	r24, r25
     dc0:	80 83       	st	Z, r24
     dc2:	08 95       	ret

00000dc4 <gpio_set_pin_direction>:
	}
}

void gpio_set_pin_direction(gpio *GPIOx, const enum port_dir direction)
{
     dc4:	fc 01       	movw	r30, r24
	uint8_t *tmp_port = GPIOx->port-1;
     dc6:	90 81       	ld	r25, Z
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
	switch (direction) {
     dca:	61 30       	cpi	r22, 0x01	; 1
     dcc:	99 f0       	breq	.+38     	; 0xdf4 <gpio_set_pin_direction+0x30>
     dce:	18 f0       	brcs	.+6      	; 0xdd6 <gpio_set_pin_direction+0x12>
     dd0:	62 30       	cpi	r22, 0x02	; 2
     dd2:	f1 f0       	breq	.+60     	; 0xe10 <gpio_set_pin_direction+0x4c>
     dd4:	08 95       	ret
		case PORT_DIR_IN:
		*tmp_port &= ~(1 << GPIOx->pin);
     dd6:	a9 2f       	mov	r26, r25
     dd8:	b8 2f       	mov	r27, r24
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 80       	ldd	r0, Z+2	; 0x02
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <gpio_set_pin_direction+0x22>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <gpio_set_pin_direction+0x1e>
     dea:	80 95       	com	r24
     dec:	9e 91       	ld	r25, -X
     dee:	89 23       	and	r24, r25
     df0:	8c 93       	st	X, r24
		break;
     df2:	08 95       	ret
		case PORT_DIR_OUT:
		*tmp_port |= 1 << GPIOx->pin;
     df4:	a9 2f       	mov	r26, r25
     df6:	b8 2f       	mov	r27, r24
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 80       	ldd	r0, Z+2	; 0x02
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <gpio_set_pin_direction+0x40>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <gpio_set_pin_direction+0x3c>
     e08:	9e 91       	ld	r25, -X
     e0a:	89 2b       	or	r24, r25
     e0c:	8c 93       	st	X, r24
		break;
     e0e:	08 95       	ret
		case PORT_DIR_OFF:
		*tmp_port &= ~(1 << GPIOx->pin);
     e10:	a9 2f       	mov	r26, r25
     e12:	b8 2f       	mov	r27, r24
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9c 01       	movw	r18, r24
     e1a:	02 80       	ldd	r0, Z+2	; 0x02
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <gpio_set_pin_direction+0x5e>
     e1e:	22 0f       	add	r18, r18
     e20:	33 1f       	adc	r19, r19
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <gpio_set_pin_direction+0x5a>
     e26:	20 95       	com	r18
     e28:	3e 91       	ld	r19, -X
     e2a:	23 23       	and	r18, r19
     e2c:	2c 93       	st	X, r18
		*GPIOx->port &= ~(1 << GPIOx->pin);
     e2e:	a0 81       	ld	r26, Z
     e30:	b1 81       	ldd	r27, Z+1	; 0x01
     e32:	02 80       	ldd	r0, Z+2	; 0x02
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <gpio_set_pin_direction+0x76>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <gpio_set_pin_direction+0x72>
     e3e:	80 95       	com	r24
     e40:	9c 91       	ld	r25, X
     e42:	89 23       	and	r24, r25
     e44:	8c 93       	st	X, r24
     e46:	08 95       	ret

00000e48 <rtc_int_enable>:
};



void rtc_int_enable(rtc_date *RTCx , const uint16_t int_time){
	rtc_config_3[0] |= (1 << TIE);
     e48:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <rtc_config_3>
     e4c:	80 61       	ori	r24, 0x10	; 16
     e4e:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <rtc_config_3>
	rtc_config_2[0] |= (1 << TD) | (1 << TE);
     e52:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <rtc_config_2>
     e56:	81 61       	ori	r24, 0x11	; 17
     e58:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <rtc_config_2>
	
	twi_write(RTC_ADDR,TIMER_COUNTER0_REG,rtc_config_1,sizeof(rtc_config_1));
     e5c:	22 e0       	ldi	r18, 0x02	; 2
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	4a e0       	ldi	r20, 0x0A	; 10
     e62:	51 e0       	ldi	r21, 0x01	; 1
     e64:	6b e0       	ldi	r22, 0x0B	; 11
     e66:	82 e3       	ldi	r24, 0x32	; 50
     e68:	0e 94 0c 09 	call	0x1218	; 0x1218 <twi_write>
	twi_write(RTC_ADDR,EXT_REG,rtc_config_2,sizeof(rtc_config_2));
     e6c:	21 e0       	ldi	r18, 0x01	; 1
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	4e ec       	ldi	r20, 0xCE	; 206
     e72:	52 e0       	ldi	r21, 0x02	; 2
     e74:	6d e0       	ldi	r22, 0x0D	; 13
     e76:	82 e3       	ldi	r24, 0x32	; 50
     e78:	0e 94 0c 09 	call	0x1218	; 0x1218 <twi_write>
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	4d ec       	ldi	r20, 0xCD	; 205
     e82:	52 e0       	ldi	r21, 0x02	; 2
     e84:	6f e0       	ldi	r22, 0x0F	; 15
     e86:	82 e3       	ldi	r24, 0x32	; 50
     e88:	0e 94 0c 09 	call	0x1218	; 0x1218 <twi_write>
     e8c:	08 95       	ret

00000e8e <BCDtoDEC>:
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
}

uint8_t BCDtoDEC(uint8_t val)
{
	return ((val / 0x10) * 10) + (val % 0x10);
     e8e:	98 2f       	mov	r25, r24
     e90:	92 95       	swap	r25
     e92:	9f 70       	andi	r25, 0x0F	; 15
     e94:	99 0f       	add	r25, r25
     e96:	29 2f       	mov	r18, r25
     e98:	22 0f       	add	r18, r18
     e9a:	22 0f       	add	r18, r18
     e9c:	92 0f       	add	r25, r18
     e9e:	8f 70       	andi	r24, 0x0F	; 15
}
     ea0:	89 0f       	add	r24, r25
     ea2:	08 95       	ret

00000ea4 <rtc_sync>:
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
	
	
}

void rtc_sync(rtc_date *RTCx){
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	27 97       	sbiw	r28, 0x07	; 7
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	twi_read(RTC_ADDR, 0x00, rtc_raw, sizeof(rtc_raw));
     ebe:	27 e0       	ldi	r18, 0x07	; 7
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	ae 01       	movw	r20, r28
     ec4:	4f 5f       	subi	r20, 0xFF	; 255
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	82 e3       	ldi	r24, 0x32	; 50
     ecc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <twi_read>
	RTCx->second=BCDtoDEC(rtc_raw[0]);
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	0e 94 47 07 	call	0xe8e	; 0xe8e <BCDtoDEC>
     ed6:	f8 01       	movw	r30, r16
     ed8:	80 83       	st	Z, r24
	RTCx->minute=BCDtoDEC(rtc_raw[1]);
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	0e 94 47 07 	call	0xe8e	; 0xe8e <BCDtoDEC>
     ee0:	f8 01       	movw	r30, r16
     ee2:	81 83       	std	Z+1, r24	; 0x01
	RTCx->hour=BCDtoDEC(rtc_raw[2]);
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	0e 94 47 07 	call	0xe8e	; 0xe8e <BCDtoDEC>
     eea:	f8 01       	movw	r30, r16
     eec:	82 83       	std	Z+2, r24	; 0x02
	RTCx->dayofweek=rtc_raw[3];
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	87 83       	std	Z+7, r24	; 0x07
	RTCx->date=BCDtoDEC(rtc_raw[4]);
     ef2:	8d 81       	ldd	r24, Y+5	; 0x05
     ef4:	0e 94 47 07 	call	0xe8e	; 0xe8e <BCDtoDEC>
     ef8:	f8 01       	movw	r30, r16
     efa:	83 83       	std	Z+3, r24	; 0x03
	RTCx->month=BCDtoDEC(rtc_raw[5]);
     efc:	8e 81       	ldd	r24, Y+6	; 0x06
     efe:	0e 94 47 07 	call	0xe8e	; 0xe8e <BCDtoDEC>
     f02:	f8 01       	movw	r30, r16
     f04:	84 83       	std	Z+4, r24	; 0x04
	RTCx->year=BCDtoDEC(rtc_raw[6]);
     f06:	8f 81       	ldd	r24, Y+7	; 0x07
     f08:	0e 94 47 07 	call	0xe8e	; 0xe8e <BCDtoDEC>
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	f8 01       	movw	r30, r16
     f10:	96 83       	std	Z+6, r25	; 0x06
     f12:	85 83       	std	Z+5, r24	; 0x05
}
     f14:	27 96       	adiw	r28, 0x07	; 7
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	08 95       	ret

00000f2a <DECtoBCD>:
}

// BCDtoDEC -- convert decimal to binary-coded decimal (BCD)
uint8_t DECtoBCD(uint8_t val)
{
	return ((val / 10) * 0x10) + (val % 10);
     f2a:	9d ec       	ldi	r25, 0xCD	; 205
     f2c:	89 9f       	mul	r24, r25
     f2e:	91 2d       	mov	r25, r1
     f30:	11 24       	eor	r1, r1
     f32:	96 95       	lsr	r25
     f34:	96 95       	lsr	r25
     f36:	96 95       	lsr	r25
     f38:	39 2f       	mov	r19, r25
     f3a:	33 0f       	add	r19, r19
     f3c:	23 2f       	mov	r18, r19
     f3e:	22 0f       	add	r18, r18
     f40:	22 0f       	add	r18, r18
     f42:	23 0f       	add	r18, r19
     f44:	82 1b       	sub	r24, r18
}
     f46:	20 e1       	ldi	r18, 0x10	; 16
     f48:	92 9f       	mul	r25, r18
     f4a:	80 0d       	add	r24, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	08 95       	ret

00000f50 <rtc_set>:
	RTCx->dayofweek=rtc_raw[3];
	RTCx->date=BCDtoDEC(rtc_raw[4]);
	RTCx->month=BCDtoDEC(rtc_raw[5]);
	RTCx->year=BCDtoDEC(rtc_raw[6]);
}
void rtc_set(rtc_date *RTCx){
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	27 97       	sbiw	r28, 0x07	; 7
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	rtc_raw[0]=DECtoBCD(RTCx->second);
     f6a:	fc 01       	movw	r30, r24
     f6c:	80 81       	ld	r24, Z
     f6e:	0e 94 95 07 	call	0xf2a	; 0xf2a <DECtoBCD>
     f72:	89 83       	std	Y+1, r24	; 0x01
	rtc_raw[1]=DECtoBCD(RTCx->minute);
     f74:	f8 01       	movw	r30, r16
     f76:	81 81       	ldd	r24, Z+1	; 0x01
     f78:	0e 94 95 07 	call	0xf2a	; 0xf2a <DECtoBCD>
     f7c:	8a 83       	std	Y+2, r24	; 0x02
	rtc_raw[2]=DECtoBCD(RTCx->hour);
     f7e:	f8 01       	movw	r30, r16
     f80:	82 81       	ldd	r24, Z+2	; 0x02
     f82:	0e 94 95 07 	call	0xf2a	; 0xf2a <DECtoBCD>
     f86:	8b 83       	std	Y+3, r24	; 0x03
	rtc_raw[3]=RTCx->dayofweek;
     f88:	f8 01       	movw	r30, r16
     f8a:	87 81       	ldd	r24, Z+7	; 0x07
     f8c:	8c 83       	std	Y+4, r24	; 0x04
	rtc_raw[4]=DECtoBCD(RTCx->date);
     f8e:	83 81       	ldd	r24, Z+3	; 0x03
     f90:	0e 94 95 07 	call	0xf2a	; 0xf2a <DECtoBCD>
     f94:	8d 83       	std	Y+5, r24	; 0x05
	rtc_raw[5]=DECtoBCD(RTCx->month);
     f96:	f8 01       	movw	r30, r16
     f98:	84 81       	ldd	r24, Z+4	; 0x04
     f9a:	0e 94 95 07 	call	0xf2a	; 0xf2a <DECtoBCD>
     f9e:	8e 83       	std	Y+6, r24	; 0x06
	rtc_raw[6]=DECtoBCD(RTCx->year);
     fa0:	f8 01       	movw	r30, r16
     fa2:	85 81       	ldd	r24, Z+5	; 0x05
     fa4:	0e 94 95 07 	call	0xf2a	; 0xf2a <DECtoBCD>
     fa8:	8f 83       	std	Y+7, r24	; 0x07
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
     faa:	27 e0       	ldi	r18, 0x07	; 7
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	ae 01       	movw	r20, r28
     fb0:	4f 5f       	subi	r20, 0xFF	; 255
     fb2:	5f 4f       	sbci	r21, 0xFF	; 255
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	82 e3       	ldi	r24, 0x32	; 50
     fb8:	0e 94 0c 09 	call	0x1218	; 0x1218 <twi_write>
}
     fbc:	27 96       	adiw	r28, 0x07	; 7
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	08 95       	ret

00000fd2 <__vector_39>:
gpio spi_ss_pin = {(uint8_t *)&PORTE , PORTE2};




ISR(SPI1_STC_vect){
     fd2:	1f 92       	push	r1
     fd4:	0f 92       	push	r0
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	0f 92       	push	r0
     fda:	11 24       	eor	r1, r1
     fdc:	8f 93       	push	r24
	if(SPSR1 & 0x40){
     fde:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
     fe2:	86 ff       	sbrs	r24, 6
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <__vector_39+0x1c>
		//spi_rx_data = 0;
		spi_txrx_done = 1;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <spi_txrx_done>
     fec:	03 c0       	rjmp	.+6      	; 0xff4 <__vector_39+0x22>
		}else{
		spi_txrx_done = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <spi_txrx_done>
	}
}
     ff4:	8f 91       	pop	r24
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <spi1_init>:
	
	
void spi1_init(){
	gpio_set_pin_direction(&spi_tx_pin , PORT_DIR_OUT);
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	82 e1       	ldi	r24, 0x12	; 18
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gpio_set_pin_direction>
	gpio_set_pin_level(&spi_tx_pin, true);
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	82 e1       	ldi	r24, 0x12	; 18
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	0e 94 b9 06 	call	0xd72	; 0xd72 <gpio_set_pin_level>
	gpio_set_pin_direction(&spi_ss_pin , PORT_DIR_OUT);
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	8c e0       	ldi	r24, 0x0C	; 12
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gpio_set_pin_direction>
	gpio_set_pin_level(&spi_ss_pin, true);
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	8c e0       	ldi	r24, 0x0C	; 12
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	0e 94 b9 06 	call	0xd72	; 0xd72 <gpio_set_pin_level>
	
	gpio_set_pin_direction(&spi_clk_pin , PORT_DIR_OUT);
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	8f e0       	ldi	r24, 0x0F	; 15
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gpio_set_pin_direction>
	gpio_set_pin_level(&spi_clk_pin, false);
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	8f e0       	ldi	r24, 0x0F	; 15
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	0e 94 b9 06 	call	0xd72	; 0xd72 <gpio_set_pin_level>
	//DDRC |= (1 << DDC1);
	//DDRE |= (1 << DDE3);	
	SPCR1 |= (1 << SPIE1) | (1 << SPE1) | (0 << DORD1) | (1 << MSTR1)  | (0 << CPOL1) | (0 << CPHA1) | (0b00 << SPR1);
    103c:	ec ea       	ldi	r30, 0xAC	; 172
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	80 6d       	ori	r24, 0xD0	; 208
    1044:	80 83       	st	Z, r24
	SPCR1 |= (0 << MSTR1);
    1046:	80 81       	ld	r24, Z
    1048:	80 83       	st	Z, r24
	//Bit 3 – CPOL1: Clock1 Polarity
	//Bit 2 – CPHA1: Clock1 Phase
	//Bits 1:0 – SPR1n: SPI1 Clock Rate Select n [n = 1:0]
	//
	
	SPSR1 |= (1 << SPI2X);
    104a:	ed ea       	ldi	r30, 0xAD	; 173
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	81 60       	ori	r24, 0x01	; 1
    1052:	80 83       	st	Z, r24
    1054:	08 95       	ret

00001056 <twi_start>:
	status = (TWSR1 & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
    1056:	85 ea       	ldi	r24, 0xA5	; 165
    1058:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	
	while(status != TWI_START){
    105c:	80 e4       	ldi	r24, 0x40	; 64
    105e:	96 e0       	ldi	r25, 0x06	; 6
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <twi_start+0x10>
    1062:	01 97       	sbiw	r24, 0x01	; 1
		i++;
		if(i >= TWI_TIMEOUT){
    1064:	31 f0       	breq	.+12     	; 0x1072 <twi_start+0x1c>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
    1066:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <status>
    106a:	28 30       	cpi	r18, 0x08	; 8
    106c:	d1 f7       	brne	.-12     	; 0x1062 <twi_start+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	08 95       	ret
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
    1072:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
    1074:	08 95       	ret

00001076 <twi_addr_write_ack>:
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
    1076:	85 e8       	ldi	r24, 0x85	; 133
    1078:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	while(status != TWIT_ADDR_ACK){
    107c:	80 e4       	ldi	r24, 0x40	; 64
    107e:	96 e0       	ldi	r25, 0x06	; 6
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <twi_addr_write_ack+0x10>
    1082:	01 97       	sbiw	r24, 0x01	; 1
		i++;
		if(i >= TWI_TIMEOUT){
    1084:	31 f0       	breq	.+12     	; 0x1092 <twi_addr_write_ack+0x1c>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
    1086:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <status>
    108a:	28 31       	cpi	r18, 0x18	; 24
    108c:	d1 f7       	brne	.-12     	; 0x1082 <twi_addr_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
    1092:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
    1094:	08 95       	ret

00001096 <twi_data_write_ack>:


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
    1096:	85 e8       	ldi	r24, 0x85	; 133
    1098:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	while(status != TWIT_DATA_ACK){
    109c:	80 e4       	ldi	r24, 0x40	; 64
    109e:	96 e0       	ldi	r25, 0x06	; 6
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <twi_data_write_ack+0x10>
    10a2:	01 97       	sbiw	r24, 0x01	; 1
		i++;
		if(i >= TWI_TIMEOUT){
    10a4:	31 f0       	breq	.+12     	; 0x10b2 <twi_data_write_ack+0x1c>

static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
    10a6:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <status>
    10aa:	28 32       	cpi	r18, 0x28	; 40
    10ac:	d1 f7       	brne	.-12     	; 0x10a2 <twi_data_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
    10b4:	08 95       	ret

000010b6 <__vector_40>:

#include "twi_hal1.h"

volatile uint8_t status = 0xF8;

ISR(TWI1_vect){
    10b6:	1f 92       	push	r1
    10b8:	0f 92       	push	r0
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	0f 92       	push	r0
    10be:	11 24       	eor	r1, r1
    10c0:	8f 93       	push	r24
	status = (TWSR1 & 0xF8);
    10c2:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
    10c6:	88 7f       	andi	r24, 0xF8	; 248
    10c8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <status>
}
    10cc:	8f 91       	pop	r24
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <twi_read>:
		
	}
	return TWI_OK;
}

uint8_t twi_read(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	f8 2e       	mov	r15, r24
    10ea:	e6 2e       	mov	r14, r22
    10ec:	6a 01       	movw	r12, r20
    10ee:	89 01       	movw	r16, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
    10f0:	0e 94 2b 08 	call	0x1056	; 0x1056 <twi_start>
	if(err != TWI_OK){
    10f4:	88 23       	and	r24, r24
    10f6:	21 f0       	breq	.+8      	; 0x1100 <twi_read+0x28>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    10f8:	95 e9       	ldi	r25, 0x95	; 149
    10fa:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    10fe:	83 c0       	rjmp	.+262    	; 0x1206 <twi_read+0x12e>
	err = twi_start();
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	TWDR1 = (addr << 1) | 0;
    1100:	8f 2d       	mov	r24, r15
    1102:	88 0f       	add	r24, r24
    1104:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
    1108:	0e 94 3b 08 	call	0x1076	; 0x1076 <twi_addr_write_ack>
	if(err != TWI_OK){
    110c:	88 23       	and	r24, r24
    110e:	21 f0       	breq	.+8      	; 0x1118 <twi_read+0x40>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    1110:	95 e9       	ldi	r25, 0x95	; 149
    1112:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1116:	77 c0       	rjmp	.+238    	; 0x1206 <twi_read+0x12e>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR1 = reg;
    1118:	e0 92 db 00 	sts	0x00DB, r14	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
    111c:	0e 94 4b 08 	call	0x1096	; 0x1096 <twi_data_write_ack>
	if(err != TWI_OK){
    1120:	88 23       	and	r24, r24
    1122:	21 f0       	breq	.+8      	; 0x112c <twi_read+0x54>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    1124:	95 e9       	ldi	r25, 0x95	; 149
    1126:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    112a:	6d c0       	rjmp	.+218    	; 0x1206 <twi_read+0x12e>
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
    112c:	85 ea       	ldi	r24, 0xA5	; 165
    112e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1132:	80 e4       	ldi	r24, 0x40	; 64
    1134:	96 e0       	ldi	r25, 0x06	; 6
    1136:	02 c0       	rjmp	.+4      	; 0x113c <twi_read+0x64>
    1138:	01 97       	sbiw	r24, 0x01	; 1
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
    113a:	69 f1       	breq	.+90     	; 0x1196 <twi_read+0xbe>

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
    113c:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <status>
    1140:	20 31       	cpi	r18, 0x10	; 16
    1142:	d1 f7       	brne	.-12     	; 0x1138 <twi_read+0x60>
    1144:	2d c0       	rjmp	.+90     	; 0x11a0 <twi_read+0xc8>
    1146:	01 97       	sbiw	r24, 0x01	; 1
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
    1148:	09 f4       	brne	.+2      	; 0x114c <twi_read+0x74>
    114a:	3b c0       	rjmp	.+118    	; 0x11c2 <twi_read+0xea>

static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
    114c:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <status>
    1150:	20 34       	cpi	r18, 0x40	; 64
    1152:	c9 f7       	brne	.-14     	; 0x1146 <twi_read+0x6e>
    1154:	30 c0       	rjmp	.+96     	; 0x11b6 <twi_read+0xde>
    1156:	f6 01       	movw	r30, r12
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	50 e0       	ldi	r21, 0x00	; 0


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
    115c:	ac ed       	ldi	r26, 0xDC	; 220
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	25 ec       	ldi	r18, 0xC5	; 197
		err = twi_data_read_ack(1);
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		data[i] = TWDR1;
    1162:	cb ed       	ldi	r28, 0xDB	; 219
    1164:	d0 e0       	ldi	r29, 0x00	; 0


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
    1166:	2c 93       	st	X, r18
    1168:	80 e4       	ldi	r24, 0x40	; 64
    116a:	96 e0       	ldi	r25, 0x06	; 6
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <twi_read+0x9a>
    116e:	01 97       	sbiw	r24, 0x01	; 1
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
    1170:	69 f1       	breq	.+90     	; 0x11cc <twi_read+0xf4>

static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
    1172:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <status>
    1176:	30 35       	cpi	r19, 0x50	; 80
    1178:	d1 f7       	brne	.-12     	; 0x116e <twi_read+0x96>
    117a:	2d c0       	rjmp	.+90     	; 0x11d6 <twi_read+0xfe>
				return TWI_ERROR_START;
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
    117c:	85 e8       	ldi	r24, 0x85	; 133
    117e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1182:	80 e4       	ldi	r24, 0x40	; 64
    1184:	96 e0       	ldi	r25, 0x06	; 6
    1186:	02 c0       	rjmp	.+4      	; 0x118c <twi_read+0xb4>
    1188:	01 97       	sbiw	r24, 0x01	; 1
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
    118a:	71 f1       	breq	.+92     	; 0x11e8 <twi_read+0x110>
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
    118c:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <status>
    1190:	28 35       	cpi	r18, 0x58	; 88
    1192:	d1 f7       	brne	.-12     	; 0x1188 <twi_read+0xb0>
    1194:	2e c0       	rjmp	.+92     	; 0x11f2 <twi_read+0x11a>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    1196:	85 e9       	ldi	r24, 0x95	; 149
    1198:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	33 c0       	rjmp	.+102    	; 0x1206 <twi_read+0x12e>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR1 = (addr << 1) | 1;
    11a0:	8f 2d       	mov	r24, r15
    11a2:	88 0f       	add	r24, r24
    11a4:	81 60       	ori	r24, 0x01	; 1
    11a6:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
    11aa:	85 e8       	ldi	r24, 0x85	; 133
    11ac:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    11b0:	80 e4       	ldi	r24, 0x40	; 64
    11b2:	96 e0       	ldi	r25, 0x06	; 6
    11b4:	cb cf       	rjmp	.-106    	; 0x114c <twi_read+0x74>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
    11b6:	01 50       	subi	r16, 0x01	; 1
    11b8:	11 09       	sbc	r17, r1
    11ba:	69 f6       	brne	.-102    	; 0x1156 <twi_read+0x7e>
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	dd cf       	rjmp	.-70     	; 0x117c <twi_read+0xa4>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    11c2:	85 e9       	ldi	r24, 0x95	; 149
    11c4:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	1d c0       	rjmp	.+58     	; 0x1206 <twi_read+0x12e>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    11cc:	85 e9       	ldi	r24, 0x95	; 149
    11ce:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	18 c0       	rjmp	.+48     	; 0x1206 <twi_read+0x12e>
		err = twi_data_read_ack(1);
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		data[i] = TWDR1;
    11d6:	88 81       	ld	r24, Y
    11d8:	81 93       	st	Z+, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
    11da:	4f 5f       	subi	r20, 0xFF	; 255
    11dc:	5f 4f       	sbci	r21, 0xFF	; 255
    11de:	40 17       	cp	r20, r16
    11e0:	51 07       	cpc	r21, r17
    11e2:	08 f4       	brcc	.+2      	; 0x11e6 <twi_read+0x10e>
    11e4:	c0 cf       	rjmp	.-128    	; 0x1166 <twi_read+0x8e>
    11e6:	ca cf       	rjmp	.-108    	; 0x117c <twi_read+0xa4>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    11e8:	85 e9       	ldi	r24, 0x95	; 149
    11ea:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	0a c0       	rjmp	.+20     	; 0x1206 <twi_read+0x12e>
	err = twi_data_read_ack(0);
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	data[i] = TWDR1;
    11f2:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    11f6:	e6 01       	movw	r28, r12
    11f8:	c4 0f       	add	r28, r20
    11fa:	d5 1f       	adc	r29, r21
    11fc:	88 83       	st	Y, r24
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    11fe:	85 e9       	ldi	r24, 0x95	; 149
    1200:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	}
	data[i] = TWDR1;
	
	twi_stop();
	
	return err;
    1204:	80 e0       	ldi	r24, 0x00	; 0
}
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	df 90       	pop	r13
    1214:	cf 90       	pop	r12
    1216:	08 95       	ret

00001218 <twi_write>:


uint8_t twi_write(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	c8 2f       	mov	r28, r24
    1226:	d6 2f       	mov	r29, r22
    1228:	7a 01       	movw	r14, r20
    122a:	89 01       	movw	r16, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
    122c:	0e 94 2b 08 	call	0x1056	; 0x1056 <twi_start>
	if(err != TWI_OK){
    1230:	88 23       	and	r24, r24
    1232:	21 f0       	breq	.+8      	; 0x123c <twi_write+0x24>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    1234:	95 e9       	ldi	r25, 0x95	; 149
    1236:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    123a:	33 c0       	rjmp	.+102    	; 0x12a2 <twi_write+0x8a>
	err = twi_start();
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	TWDR1 = (addr << 1) | 0;
    123c:	cc 0f       	add	r28, r28
    123e:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
    1242:	0e 94 3b 08 	call	0x1076	; 0x1076 <twi_addr_write_ack>
	if(err != TWI_OK){
    1246:	88 23       	and	r24, r24
    1248:	21 f0       	breq	.+8      	; 0x1252 <twi_write+0x3a>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    124a:	95 e9       	ldi	r25, 0x95	; 149
    124c:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1250:	28 c0       	rjmp	.+80     	; 0x12a2 <twi_write+0x8a>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR1 = reg;
    1252:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
    1256:	0e 94 4b 08 	call	0x1096	; 0x1096 <twi_data_write_ack>
	if(err != TWI_OK){
    125a:	81 11       	cpse	r24, r1
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <twi_write+0x4e>
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
    125e:	01 15       	cp	r16, r1
    1260:	11 05       	cpc	r17, r1
    1262:	29 f4       	brne	.+10     	; 0x126e <twi_write+0x56>
    1264:	1a c0       	rjmp	.+52     	; 0x129a <twi_write+0x82>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    1266:	95 e9       	ldi	r25, 0x95	; 149
    1268:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    126c:	1a c0       	rjmp	.+52     	; 0x12a2 <twi_write+0x8a>
    126e:	e7 01       	movw	r28, r14
    1270:	0e 0d       	add	r16, r14
    1272:	1f 1d       	adc	r17, r15
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
		TWDR1 = data[i];
    1274:	0f 2e       	mov	r0, r31
    1276:	fb ed       	ldi	r31, 0xDB	; 219
    1278:	ef 2e       	mov	r14, r31
    127a:	f1 2c       	mov	r15, r1
    127c:	f0 2d       	mov	r31, r0
    127e:	89 91       	ld	r24, Y+
    1280:	f7 01       	movw	r30, r14
    1282:	80 83       	st	Z, r24
		err = twi_data_write_ack();
    1284:	0e 94 4b 08 	call	0x1096	; 0x1096 <twi_data_write_ack>
		if(err != TWI_OK){
    1288:	88 23       	and	r24, r24
    128a:	21 f0       	breq	.+8      	; 0x1294 <twi_write+0x7c>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    128c:	95 e9       	ldi	r25, 0x95	; 149
    128e:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <twi_write+0x8a>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
    1294:	0c 17       	cp	r16, r28
    1296:	1d 07       	cpc	r17, r29
    1298:	91 f7       	brne	.-28     	; 0x127e <twi_write+0x66>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    129a:	85 e9       	ldi	r24, 0x95	; 149
    129c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
	
	
	twi_stop();
	
	return err;
}
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	ff 90       	pop	r15
    12ac:	ef 90       	pop	r14
    12ae:	08 95       	ret

000012b0 <twi_transfer>:

uint8_t twi_transfer(uint8_t addr,uint8_t *data,uint16_t len){
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	c8 2f       	mov	r28, r24
    12be:	7b 01       	movw	r14, r22
    12c0:	8a 01       	movw	r16, r20
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
    12c2:	0e 94 2b 08 	call	0x1056	; 0x1056 <twi_start>
	if(err != TWI_OK){
    12c6:	88 23       	and	r24, r24
    12c8:	21 f0       	breq	.+8      	; 0x12d2 <twi_transfer+0x22>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    12ca:	95 e9       	ldi	r25, 0x95	; 149
    12cc:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    12d0:	29 c0       	rjmp	.+82     	; 0x1324 <twi_transfer+0x74>
	err = twi_start();
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	TWDR1 = (addr << 1) | 0;
    12d2:	cc 0f       	add	r28, r28
    12d4:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
    12d8:	0e 94 3b 08 	call	0x1076	; 0x1076 <twi_addr_write_ack>
	if(err != TWI_OK){
    12dc:	81 11       	cpse	r24, r1
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <twi_transfer+0x38>
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
    12e0:	01 15       	cp	r16, r1
    12e2:	11 05       	cpc	r17, r1
    12e4:	29 f4       	brne	.+10     	; 0x12f0 <twi_transfer+0x40>
    12e6:	1a c0       	rjmp	.+52     	; 0x131c <twi_transfer+0x6c>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    12e8:	95 e9       	ldi	r25, 0x95	; 149
    12ea:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    12ee:	1a c0       	rjmp	.+52     	; 0x1324 <twi_transfer+0x74>
    12f0:	e7 01       	movw	r28, r14
    12f2:	0e 0d       	add	r16, r14
    12f4:	1f 1d       	adc	r17, r15
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
		TWDR1 = data[i];
    12f6:	0f 2e       	mov	r0, r31
    12f8:	fb ed       	ldi	r31, 0xDB	; 219
    12fa:	ef 2e       	mov	r14, r31
    12fc:	f1 2c       	mov	r15, r1
    12fe:	f0 2d       	mov	r31, r0
    1300:	89 91       	ld	r24, Y+
    1302:	f7 01       	movw	r30, r14
    1304:	80 83       	st	Z, r24
		err = twi_data_write_ack();
    1306:	0e 94 4b 08 	call	0x1096	; 0x1096 <twi_data_write_ack>
		if(err != TWI_OK){
    130a:	88 23       	and	r24, r24
    130c:	21 f0       	breq	.+8      	; 0x1316 <twi_transfer+0x66>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    130e:	95 e9       	ldi	r25, 0x95	; 149
    1310:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1314:	07 c0       	rjmp	.+14     	; 0x1324 <twi_transfer+0x74>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
    1316:	0c 17       	cp	r16, r28
    1318:	1d 07       	cpc	r17, r29
    131a:	91 f7       	brne	.-28     	; 0x1300 <twi_transfer+0x50>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    131c:	85 e9       	ldi	r24, 0x95	; 149
    131e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1322:	80 e0       	ldi	r24, 0x00	; 0
	
	
	twi_stop();
	
	return err;
}
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	08 95       	ret

00001332 <twi_init>:




void twi_init(uint32_t speed){
    1332:	9b 01       	movw	r18, r22
    1334:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
	TWBR1 = gen_t & 0xFF;
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	74 e2       	ldi	r23, 0x24	; 36
    133a:	84 ef       	ldi	r24, 0xF4	; 244
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__udivmodsi4>
    1342:	da 01       	movw	r26, r20
    1344:	c9 01       	movw	r24, r18
    1346:	40 97       	sbiw	r24, 0x10	; 16
    1348:	a1 09       	sbc	r26, r1
    134a:	b1 09       	sbc	r27, r1
    134c:	b6 95       	lsr	r27
    134e:	a7 95       	ror	r26
    1350:	97 95       	ror	r25
    1352:	87 95       	ror	r24
    1354:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	TWCR1 = (1 << TWEN) | (1 << TWIE);
    1358:	85 e0       	ldi	r24, 0x05	; 5
    135a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    135e:	08 95       	ret

00001360 <__vector_18>:

void uart_send_array(uint8_t *c,uint16_t len){
	for(uint16_t i = 0; i < len;i++){
		uart_send_byte(c[i]);
	}
}
    1360:	1f 92       	push	r1
    1362:	0f 92       	push	r0
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	0f 92       	push	r0
    1368:	11 24       	eor	r1, r1
    136a:	8f 93       	push	r24
    136c:	9f 93       	push	r25
    136e:	ef 93       	push	r30
    1370:	ff 93       	push	r31
    1372:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <rx_count>
    1376:	f0 91 51 03 	lds	r31, 0x0351	; 0x800351 <rx_count+0x1>
    137a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    137e:	e0 53       	subi	r30, 0x30	; 48
    1380:	fd 4f       	sbci	r31, 0xFD	; 253
    1382:	80 83       	st	Z, r24
    1384:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <rx_count>
    1388:	f0 91 51 03 	lds	r31, 0x0351	; 0x800351 <rx_count+0x1>
    138c:	e0 53       	subi	r30, 0x30	; 48
    138e:	fd 4f       	sbci	r31, 0xFD	; 253
    1390:	80 81       	ld	r24, Z
    1392:	8d 30       	cpi	r24, 0x0D	; 13
    1394:	51 f4       	brne	.+20     	; 0x13aa <__vector_18+0x4a>
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <read_complete>
    139c:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <rx_count>
    13a0:	f0 91 51 03 	lds	r31, 0x0351	; 0x800351 <rx_count+0x1>
    13a4:	e0 53       	subi	r30, 0x30	; 48
    13a6:	fd 4f       	sbci	r31, 0xFD	; 253
    13a8:	11 82       	std	Z+1, r1	; 0x01
    13aa:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <rx_count>
    13ae:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <rx_count+0x1>
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <rx_count+0x1>
    13b8:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <rx_count>
    13bc:	ff 91       	pop	r31
    13be:	ef 91       	pop	r30
    13c0:	9f 91       	pop	r25
    13c2:	8f 91       	pop	r24
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0
    13ca:	1f 90       	pop	r1
    13cc:	18 95       	reti

000013ce <__vector_20>:
    13ce:	1f 92       	push	r1
    13d0:	0f 92       	push	r0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	0f 92       	push	r0
    13d6:	11 24       	eor	r1, r1
    13d8:	8f 93       	push	r24
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uart_tx_busy>
    13e0:	8f 91       	pop	r24
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	0f 90       	pop	r0
    13e8:	1f 90       	pop	r1
    13ea:	18 95       	reti

000013ec <uart_init>:
    13ec:	44 23       	and	r20, r20
    13ee:	39 f0       	breq	.+14     	; 0x13fe <uart_init+0x12>
    13f0:	e0 ec       	ldi	r30, 0xC0	; 192
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	20 81       	ld	r18, Z
    13f6:	22 60       	ori	r18, 0x02	; 2
    13f8:	20 83       	st	Z, r18
    13fa:	a8 e0       	ldi	r26, 0x08	; 8
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <uart_init+0x14>
    13fe:	a0 e1       	ldi	r26, 0x10	; 16
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	9b 01       	movw	r18, r22
    1404:	ac 01       	movw	r20, r24
    1406:	0e 94 26 1c 	call	0x384c	; 0x384c <__muluhisi3>
    140a:	9b 01       	movw	r18, r22
    140c:	ac 01       	movw	r20, r24
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	74 e2       	ldi	r23, 0x24	; 36
    1412:	84 ef       	ldi	r24, 0xF4	; 244
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__udivmodsi4>
    141a:	ba 01       	movw	r22, r20
    141c:	a9 01       	movw	r20, r18
    141e:	41 50       	subi	r20, 0x01	; 1
    1420:	51 09       	sbc	r21, r1
    1422:	61 09       	sbc	r22, r1
    1424:	71 09       	sbc	r23, r1
    1426:	db 01       	movw	r26, r22
    1428:	ca 01       	movw	r24, r20
    142a:	88 27       	eor	r24, r24
    142c:	9f 70       	andi	r25, 0x0F	; 15
    142e:	aa 27       	eor	r26, r26
    1430:	bb 27       	eor	r27, r27
    1432:	89 2f       	mov	r24, r25
    1434:	9a 2f       	mov	r25, r26
    1436:	ab 2f       	mov	r26, r27
    1438:	bb 27       	eor	r27, r27
    143a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    143e:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1442:	e1 ec       	ldi	r30, 0xC1	; 193
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	88 6d       	ori	r24, 0xD8	; 216
    144a:	80 83       	st	Z, r24
    144c:	86 e8       	ldi	r24, 0x86	; 134
    144e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1452:	08 95       	ret

00001454 <uart_send_byte>:
    1454:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <uart_tx_busy>
    1458:	99 23       	and	r25, r25
    145a:	e1 f3       	breq	.-8      	; 0x1454 <uart_send_byte>
    145c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <uart_tx_busy>
    1460:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1464:	08 95       	ret

00001466 <uart_send_string>:

void uart_send_string(uint8_t *c){
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	ec 01       	movw	r28, r24
	uint16_t i = 0;
	do{
		uart_send_byte(c[i]);
    146c:	89 91       	ld	r24, Y+
    146e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <uart_send_byte>
		i++;
		
	}while(c[i] != '\0');
    1472:	88 81       	ld	r24, Y
    1474:	81 11       	cpse	r24, r1
    1476:	fa cf       	rjmp	.-12     	; 0x146c <uart_send_string+0x6>
	//uart_send_byte(c[i]);
}
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <__vector_1>:
uint16_t BAT_VOLT = 0;




ISR(INT0_vect){
    147e:	1f 92       	push	r1
    1480:	0f 92       	push	r0
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	8f 93       	push	r24
	rtc_int_request=1;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <rtc_int_request>
}
    1490:	8f 91       	pop	r24
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	0f 90       	pop	r0
    1498:	1f 90       	pop	r1
    149a:	18 95       	reti

0000149c <main>:



int main(void)
{
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	c0 58       	subi	r28, 0x80	; 128
    14a6:	d1 09       	sbc	r29, r1
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    char char_array[128]="\0";
    14b2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <mystdout+0xe>
    14b6:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <mystdout+0xf>
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	fe 01       	movw	r30, r28
    14c0:	33 96       	adiw	r30, 0x03	; 3
    14c2:	8e e7       	ldi	r24, 0x7E	; 126
    14c4:	df 01       	movw	r26, r30
    14c6:	1d 92       	st	X+, r1
    14c8:	8a 95       	dec	r24
    14ca:	e9 f7       	brne	.-6      	; 0x14c6 <main+0x2a>

    
    uart_init(250000,1);
    14cc:	41 e0       	ldi	r20, 0x01	; 1
    14ce:	60 e9       	ldi	r22, 0x90	; 144
    14d0:	70 ed       	ldi	r23, 0xD0	; 208
    14d2:	83 e0       	ldi	r24, 0x03	; 3
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 f6 09 	call	0x13ec	; 0x13ec <uart_init>
    twi_init(400000);
    14da:	60 e8       	ldi	r22, 0x80	; 128
    14dc:	7a e1       	ldi	r23, 0x1A	; 26
    14de:	86 e0       	ldi	r24, 0x06	; 6
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 99 09 	call	0x1332	; 0x1332 <twi_init>
    gpio_set_pin_direction(&lcd_blk , PORT_DIR_OUT); gpio_set_pin_level(&lcd_blk, false);
    14e6:	61 e0       	ldi	r22, 0x01	; 1
    14e8:	86 e2       	ldi	r24, 0x26	; 38
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gpio_set_pin_direction>
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	86 e2       	ldi	r24, 0x26	; 38
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	0e 94 b9 06 	call	0xd72	; 0xd72 <gpio_set_pin_level>
	gpio_set_pin_direction(&ext_led , PORT_DIR_OUT); gpio_set_pin_level(&ext_led, false);
    14fa:	61 e0       	ldi	r22, 0x01	; 1
    14fc:	83 e2       	ldi	r24, 0x23	; 35
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gpio_set_pin_direction>
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	83 e2       	ldi	r24, 0x23	; 35
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	0e 94 b9 06 	call	0xd72	; 0xd72 <gpio_set_pin_level>
	gpio_set_pin_direction(&deb_led , PORT_DIR_OUT); gpio_set_pin_level(&deb_led, false);
    150e:	61 e0       	ldi	r22, 0x01	; 1
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	91 e0       	ldi	r25, 0x01	; 1
    1514:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gpio_set_pin_direction>
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	80 e2       	ldi	r24, 0x20	; 32
    151c:	91 e0       	ldi	r25, 0x01	; 1
    151e:	0e 94 b9 06 	call	0xd72	; 0xd72 <gpio_set_pin_level>
    gpio_set_pin_direction(&rtc_int, PORT_DIR_IN);
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	89 e2       	ldi	r24, 0x29	; 41
    1526:	91 e0       	ldi	r25, 0x01	; 1
    1528:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gpio_set_pin_direction>
    EICRA |= (0b10 << ISC00);
    152c:	e9 e6       	ldi	r30, 0x69	; 105
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	82 60       	ori	r24, 0x02	; 2
    1534:	80 83       	st	Z, r24
    EIMSK = 0x01; //0b00000001
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	8d bb       	out	0x1d, r24	; 29
	
	sei();
    153a:	78 94       	sei
	stdout = &mystdout;
    153c:	8c e2       	ldi	r24, 0x2C	; 44
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	90 93 3e 06 	sts	0x063E, r25	; 0x80063e <__iob+0x3>
    1544:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <__iob+0x2>
	rtc_set(&sys_rtc);
    1548:	88 e1       	ldi	r24, 0x18	; 24
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	0e 94 a8 07 	call	0xf50	; 0xf50 <rtc_set>
	rtc_int_enable(&sys_rtc ,0);
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	88 e1       	ldi	r24, 0x18	; 24
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	0e 94 24 07 	call	0xe48	; 0xe48 <rtc_int_enable>
	adc_init();
    155c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <adc_init>
	spi1_init();
    1560:	0e 94 00 08 	call	0x1000	; 0x1000 <spi1_init>
	lcd_gpio_init();
    1564:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_gpio_init>
	
	
	
	//u8g2_Setup_st7565_zolen_128x64_f( &lcd, U8G2_MIRROR_VERTICAL, lcd_hw_spi, fake_delay_fn);					//HW SPI
	u8g2_Setup_ssd1306_i2c_128x32_univision_f(&lcd, U8G2_R0, u8x8_byte_sw_i2c, fake_delay_fn);					//0.91 OLED 128x32
    1568:	27 eb       	ldi	r18, 0xB7	; 183
    156a:	36 e0       	ldi	r19, 0x06	; 6
    156c:	48 e8       	ldi	r20, 0x88	; 136
    156e:	53 e1       	ldi	r21, 0x13	; 19
    1570:	61 e6       	ldi	r22, 0x61	; 97
    1572:	72 e0       	ldi	r23, 0x02	; 2
    1574:	87 e7       	ldi	r24, 0x77	; 119
    1576:	95 e0       	ldi	r25, 0x05	; 5
    1578:	0e 94 a8 0c 	call	0x1950	; 0x1950 <u8g2_Setup_ssd1306_i2c_128x32_univision_f>
	
	
	//OLED display
	
	//u8x8_byte_stm32hal_hw_i2c
	u8g2_SetI2CAddress(&lcd, 0x3C);
    157c:	8c e3       	ldi	r24, 0x3C	; 60
    157e:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <lcd+0x16>
	
	//End of OLED Display
	

	
	sleep_enable();
    1582:	83 b7       	in	r24, 0x33	; 51
    1584:	81 60       	ori	r24, 0x01	; 1
    1586:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1588:	83 b7       	in	r24, 0x33	; 51
    158a:	81 7f       	andi	r24, 0xF1	; 241
    158c:	84 60       	ori	r24, 0x04	; 4
    158e:	83 bf       	out	0x33, r24	; 51
	PowerMeterInit(INA226ADR);
    1590:	80 e4       	ldi	r24, 0x40	; 64
    1592:	0e 94 f7 05 	call	0xbee	; 0xbee <PowerMeterInit>
	
	uart_send_string((uint8_t *)"\rReady\n\r");
    1596:	8a eb       	ldi	r24, 0xBA	; 186
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	0e 94 33 0a 	call	0x1466	; 0x1466 <uart_send_string>
	u8g2_InitDisplay(&lcd);
    159e:	87 e7       	ldi	r24, 0x77	; 119
    15a0:	95 e0       	ldi	r25, 0x05	; 5
    15a2:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <u8x8_InitDisplay>
	u8g2_SetPowerSave(&lcd, 0);
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	87 e7       	ldi	r24, 0x77	; 119
    15aa:	95 e0       	ldi	r25, 0x05	; 5
    15ac:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <u8x8_SetPowerSave>
	//u8g2_SetContrast(&lcd, LCD_CONTRAST);
	u8g2_SetFlipMode(&lcd, 1);
    15b0:	61 e0       	ldi	r22, 0x01	; 1
    15b2:	87 e7       	ldi	r24, 0x77	; 119
    15b4:	95 e0       	ldi	r25, 0x05	; 5
    15b6:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <u8x8_SetFlipMode>
	u8g2_SetContrast(&lcd, 120);
    15ba:	68 e7       	ldi	r22, 0x78	; 120
    15bc:	87 e7       	ldi	r24, 0x77	; 119
    15be:	95 e0       	ldi	r25, 0x05	; 5
    15c0:	0e 94 6e 15 	call	0x2adc	; 0x2adc <u8x8_SetContrast>
	u8g2_ClearBuffer(&lcd);
    15c4:	87 e7       	ldi	r24, 0x77	; 119
    15c6:	95 e0       	ldi	r25, 0x05	; 5
    15c8:	0e 94 81 0c 	call	0x1902	; 0x1902 <u8g2_ClearBuffer>
	//u8g2_SetFont(&lcd, u8g2_font_5x8_t_cyrillic);
	u8g2_SetFont(&lcd, u8g2_font_6x10_mf);
    15cc:	66 eb       	ldi	r22, 0xB6	; 182
    15ce:	71 e0       	ldi	r23, 0x01	; 1
    15d0:	87 e7       	ldi	r24, 0x77	; 119
    15d2:	95 e0       	ldi	r25, 0x05	; 5
    15d4:	0e 94 df 10 	call	0x21be	; 0x21be <u8g2_SetFont>
	//u8g2_SetFont(&lcd, u8g2_font_ncenB14_tr);
	u8g2_DrawStr(&lcd, 1, 10, (void *)"RX MODULE");
    15d8:	23 ec       	ldi	r18, 0xC3	; 195
    15da:	31 e0       	ldi	r19, 0x01	; 1
    15dc:	4a e0       	ldi	r20, 0x0A	; 10
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	87 e7       	ldi	r24, 0x77	; 119
    15e6:	95 e0       	ldi	r25, 0x05	; 5
    15e8:	0e 94 89 10 	call	0x2112	; 0x2112 <u8g2_DrawStr>
	u8g2_SendBuffer(&lcd);
    15ec:	87 e7       	ldi	r24, 0x77	; 119
    15ee:	95 e0       	ldi	r25, 0x05	; 5
    15f0:	0e 94 97 0c 	call	0x192e	; 0x192e <u8g2_SendBuffer>
		if (rtc_int_request != 0){
			
			rtc_sync(&sys_rtc);
			BAT_VOLT = get_mVolt(ADC5_PIN);
			rtc_int_request = 0;
			sprintf(char_array, "Time: %02d-%02d-20%02d; %02d:%02d:%02d; BAT: %03d\r\n", sys_rtc.date, sys_rtc.month, sys_rtc.year, sys_rtc.hour, sys_rtc.minute, sys_rtc.second, BAT_VOLT);
    15f4:	0f 2e       	mov	r0, r31
    15f6:	fd ec       	ldi	r31, 0xCD	; 205
    15f8:	8f 2e       	mov	r8, r31
    15fa:	f1 e0       	ldi	r31, 0x01	; 1
    15fc:	9f 2e       	mov	r9, r31
    15fe:	f0 2d       	mov	r31, r0
    1600:	8e 01       	movw	r16, r28
    1602:	0f 5f       	subi	r16, 0xFF	; 255
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
			sprintf(char_array, "Date: %02d-%02d-20%02d", sys_rtc.date, sys_rtc.month, sys_rtc.year);
    1606:	0f 2e       	mov	r0, r31
    1608:	f1 e0       	ldi	r31, 0x01	; 1
    160a:	af 2e       	mov	r10, r31
    160c:	f2 e0       	ldi	r31, 0x02	; 2
    160e:	bf 2e       	mov	r11, r31
    1610:	f0 2d       	mov	r31, r0
			u8g2_ClearBuffer(&lcd);
			u8g2_SetFont(&lcd, u8g2_font_6x10_mf);
			u8g2_DrawStr(&lcd, 1, 8, (void *)char_array);
			
			sprintf(char_array, "Time: %02d:%02d:%02d", sys_rtc.hour, sys_rtc.minute, sys_rtc.second);
    1612:	0f 2e       	mov	r0, r31
    1614:	f8 e1       	ldi	r31, 0x18	; 24
    1616:	cf 2e       	mov	r12, r31
    1618:	f2 e0       	ldi	r31, 0x02	; 2
    161a:	df 2e       	mov	r13, r31
    161c:	f0 2d       	mov	r31, r0
			u8g2_DrawStr(&lcd, 1, 17, (void *)char_array);
			//
			sprintf(char_array, "BAT: %03d", BAT_VOLT);
    161e:	0f 2e       	mov	r0, r31
    1620:	fd e2       	ldi	r31, 0x2D	; 45
    1622:	6f 2e       	mov	r6, r31
    1624:	f2 e0       	ldi	r31, 0x02	; 2
    1626:	7f 2e       	mov	r7, r31
    1628:	f0 2d       	mov	r31, r0
			//printf("UNIX time %lu\r\n", UNIXtime);
			
			
			PowerMeterMeasure(&dc_source1);
			
			sprintf(char_array, "mV %05u  ", dc_source1.voltage);
    162a:	0f 2e       	mov	r0, r31
    162c:	f7 e3       	ldi	r31, 0x37	; 55
    162e:	4f 2e       	mov	r4, r31
    1630:	f2 e0       	ldi	r31, 0x02	; 2
    1632:	5f 2e       	mov	r5, r31
    1634:	f0 2d       	mov	r31, r0
			u8g2_DrawStr(&lcd, 1, 34, (void *)char_array);
			
			sprintf(char_array, "mA %05d  ", dc_source1.current);
    1636:	0f 2e       	mov	r0, r31
    1638:	f1 e4       	ldi	r31, 0x41	; 65
    163a:	2f 2e       	mov	r2, r31
    163c:	f2 e0       	ldi	r31, 0x02	; 2
    163e:	3f 2e       	mov	r3, r31
    1640:	f0 2d       	mov	r31, r0
	//u8g2_SetFont(&lcd, u8g2_font_ncenB14_tr);
	u8g2_DrawStr(&lcd, 1, 10, (void *)"RX MODULE");
	u8g2_SendBuffer(&lcd);
    while (1) 
    {
		if (rtc_int_request != 0){
    1642:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <rtc_int_request>
    1646:	88 23       	and	r24, r24
    1648:	09 f4       	brne	.+2      	; 0x164c <main+0x1b0>
    164a:	0d c1       	rjmp	.+538    	; 0x1866 <main+0x3ca>
			
			rtc_sync(&sys_rtc);
    164c:	88 e1       	ldi	r24, 0x18	; 24
    164e:	91 e0       	ldi	r25, 0x01	; 1
    1650:	0e 94 52 07 	call	0xea4	; 0xea4 <rtc_sync>
			BAT_VOLT = get_mVolt(ADC5_PIN);
    1654:	85 e0       	ldi	r24, 0x05	; 5
    1656:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <get_mVolt>
    165a:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <BAT_VOLT>
    165e:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <BAT_VOLT+0x1>
			rtc_int_request = 0;
    1662:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <rtc_int_request>
			sprintf(char_array, "Time: %02d-%02d-20%02d; %02d:%02d:%02d; BAT: %03d\r\n", sys_rtc.date, sys_rtc.month, sys_rtc.year, sys_rtc.hour, sys_rtc.minute, sys_rtc.second, BAT_VOLT);
    1666:	9f 93       	push	r25
    1668:	8f 93       	push	r24
    166a:	0f 2e       	mov	r0, r31
    166c:	f8 e1       	ldi	r31, 0x18	; 24
    166e:	ef 2e       	mov	r14, r31
    1670:	f1 e0       	ldi	r31, 0x01	; 1
    1672:	ff 2e       	mov	r15, r31
    1674:	f0 2d       	mov	r31, r0
    1676:	f7 01       	movw	r30, r14
    1678:	80 81       	ld	r24, Z
    167a:	1f 92       	push	r1
    167c:	8f 93       	push	r24
    167e:	81 81       	ldd	r24, Z+1	; 0x01
    1680:	1f 92       	push	r1
    1682:	8f 93       	push	r24
    1684:	82 81       	ldd	r24, Z+2	; 0x02
    1686:	1f 92       	push	r1
    1688:	8f 93       	push	r24
    168a:	86 81       	ldd	r24, Z+6	; 0x06
    168c:	8f 93       	push	r24
    168e:	85 81       	ldd	r24, Z+5	; 0x05
    1690:	8f 93       	push	r24
    1692:	84 81       	ldd	r24, Z+4	; 0x04
    1694:	1f 92       	push	r1
    1696:	8f 93       	push	r24
    1698:	83 81       	ldd	r24, Z+3	; 0x03
    169a:	1f 92       	push	r1
    169c:	8f 93       	push	r24
    169e:	9f 92       	push	r9
    16a0:	8f 92       	push	r8
    16a2:	1f 93       	push	r17
    16a4:	0f 93       	push	r16
    16a6:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <sprintf>
			sprintf(char_array, "Date: %02d-%02d-20%02d", sys_rtc.date, sys_rtc.month, sys_rtc.year);
    16aa:	d7 01       	movw	r26, r14
    16ac:	16 96       	adiw	r26, 0x06	; 6
    16ae:	8c 91       	ld	r24, X
    16b0:	16 97       	sbiw	r26, 0x06	; 6
    16b2:	8f 93       	push	r24
    16b4:	15 96       	adiw	r26, 0x05	; 5
    16b6:	8c 91       	ld	r24, X
    16b8:	15 97       	sbiw	r26, 0x05	; 5
    16ba:	8f 93       	push	r24
    16bc:	14 96       	adiw	r26, 0x04	; 4
    16be:	8c 91       	ld	r24, X
    16c0:	14 97       	sbiw	r26, 0x04	; 4
    16c2:	1f 92       	push	r1
    16c4:	8f 93       	push	r24
    16c6:	13 96       	adiw	r26, 0x03	; 3
    16c8:	8c 91       	ld	r24, X
    16ca:	1f 92       	push	r1
    16cc:	8f 93       	push	r24
    16ce:	bf 92       	push	r11
    16d0:	af 92       	push	r10
    16d2:	1f 93       	push	r17
    16d4:	0f 93       	push	r16
    16d6:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <sprintf>
			u8g2_ClearBuffer(&lcd);
    16da:	87 e7       	ldi	r24, 0x77	; 119
    16dc:	95 e0       	ldi	r25, 0x05	; 5
    16de:	0e 94 81 0c 	call	0x1902	; 0x1902 <u8g2_ClearBuffer>
			u8g2_SetFont(&lcd, u8g2_font_6x10_mf);
    16e2:	66 eb       	ldi	r22, 0xB6	; 182
    16e4:	71 e0       	ldi	r23, 0x01	; 1
    16e6:	87 e7       	ldi	r24, 0x77	; 119
    16e8:	95 e0       	ldi	r25, 0x05	; 5
    16ea:	0e 94 df 10 	call	0x21be	; 0x21be <u8g2_SetFont>
			u8g2_DrawStr(&lcd, 1, 8, (void *)char_array);
    16ee:	98 01       	movw	r18, r16
    16f0:	48 e0       	ldi	r20, 0x08	; 8
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	87 e7       	ldi	r24, 0x77	; 119
    16fa:	95 e0       	ldi	r25, 0x05	; 5
    16fc:	0e 94 89 10 	call	0x2112	; 0x2112 <u8g2_DrawStr>
			
			sprintf(char_array, "Time: %02d:%02d:%02d", sys_rtc.hour, sys_rtc.minute, sys_rtc.second);
    1700:	f7 01       	movw	r30, r14
    1702:	80 81       	ld	r24, Z
    1704:	1f 92       	push	r1
    1706:	8f 93       	push	r24
    1708:	81 81       	ldd	r24, Z+1	; 0x01
    170a:	1f 92       	push	r1
    170c:	8f 93       	push	r24
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	1f 92       	push	r1
    1712:	8f 93       	push	r24
    1714:	df 92       	push	r13
    1716:	cf 92       	push	r12
    1718:	1f 93       	push	r17
    171a:	0f 93       	push	r16
    171c:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <sprintf>
			u8g2_DrawStr(&lcd, 1, 17, (void *)char_array);
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	98 01       	movw	r18, r16
    172c:	41 e1       	ldi	r20, 0x11	; 17
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	61 e0       	ldi	r22, 0x01	; 1
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	87 e7       	ldi	r24, 0x77	; 119
    1736:	95 e0       	ldi	r25, 0x05	; 5
    1738:	0e 94 89 10 	call	0x2112	; 0x2112 <u8g2_DrawStr>
			//
			sprintf(char_array, "BAT: %03d", BAT_VOLT);
    173c:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <BAT_VOLT+0x1>
    1740:	8f 93       	push	r24
    1742:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <BAT_VOLT>
    1746:	8f 93       	push	r24
    1748:	7f 92       	push	r7
    174a:	6f 92       	push	r6
    174c:	1f 93       	push	r17
    174e:	0f 93       	push	r16
    1750:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <sprintf>
			u8g2_DrawStr(&lcd, 1, 25, (void *)char_array);
    1754:	98 01       	movw	r18, r16
    1756:	49 e1       	ldi	r20, 0x19	; 25
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	61 e0       	ldi	r22, 0x01	; 1
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	87 e7       	ldi	r24, 0x77	; 119
    1760:	95 e0       	ldi	r25, 0x05	; 5
    1762:	0e 94 89 10 	call	0x2112	; 0x2112 <u8g2_DrawStr>
			//sprintf(char_array, "UNIX time %lu", UNIXtime);
			//u8g2_DrawStr(&lcd, 1, 32, (void *)char_array);	
			//printf("UNIX time %lu\r\n", UNIXtime);
			
			
			PowerMeterMeasure(&dc_source1);
    1766:	8d e2       	ldi	r24, 0x2D	; 45
    1768:	96 e0       	ldi	r25, 0x06	; 6
    176a:	0e 94 2b 06 	call	0xc56	; 0xc56 <PowerMeterMeasure>
			
			sprintf(char_array, "mV %05u  ", dc_source1.voltage);
    176e:	0f 2e       	mov	r0, r31
    1770:	fd e2       	ldi	r31, 0x2D	; 45
    1772:	ef 2e       	mov	r14, r31
    1774:	f6 e0       	ldi	r31, 0x06	; 6
    1776:	ff 2e       	mov	r15, r31
    1778:	f0 2d       	mov	r31, r0
    177a:	d7 01       	movw	r26, r14
    177c:	15 96       	adiw	r26, 0x05	; 5
    177e:	8c 91       	ld	r24, X
    1780:	15 97       	sbiw	r26, 0x05	; 5
    1782:	8f 93       	push	r24
    1784:	14 96       	adiw	r26, 0x04	; 4
    1786:	8c 91       	ld	r24, X
    1788:	8f 93       	push	r24
    178a:	5f 92       	push	r5
    178c:	4f 92       	push	r4
    178e:	1f 93       	push	r17
    1790:	0f 93       	push	r16
    1792:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <sprintf>
			u8g2_DrawStr(&lcd, 1, 34, (void *)char_array);
    1796:	98 01       	movw	r18, r16
    1798:	42 e2       	ldi	r20, 0x22	; 34
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	61 e0       	ldi	r22, 0x01	; 1
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	87 e7       	ldi	r24, 0x77	; 119
    17a2:	95 e0       	ldi	r25, 0x05	; 5
    17a4:	0e 94 89 10 	call	0x2112	; 0x2112 <u8g2_DrawStr>
			
			sprintf(char_array, "mA %05d  ", dc_source1.current);
    17a8:	f7 01       	movw	r30, r14
    17aa:	83 81       	ldd	r24, Z+3	; 0x03
    17ac:	8f 93       	push	r24
    17ae:	82 81       	ldd	r24, Z+2	; 0x02
    17b0:	8f 93       	push	r24
    17b2:	3f 92       	push	r3
    17b4:	2f 92       	push	r2
    17b6:	1f 93       	push	r17
    17b8:	0f 93       	push	r16
    17ba:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <sprintf>
			u8g2_DrawStr(&lcd, 1, 42, (void *)char_array);
    17be:	98 01       	movw	r18, r16
    17c0:	4a e2       	ldi	r20, 0x2A	; 42
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	87 e7       	ldi	r24, 0x77	; 119
    17ca:	95 e0       	ldi	r25, 0x05	; 5
    17cc:	0e 94 89 10 	call	0x2112	; 0x2112 <u8g2_DrawStr>
			
			sprintf(char_array, "W  %3.5f  ", dc_source1.power);
    17d0:	d7 01       	movw	r26, r14
    17d2:	19 96       	adiw	r26, 0x09	; 9
    17d4:	8c 91       	ld	r24, X
    17d6:	19 97       	sbiw	r26, 0x09	; 9
    17d8:	8f 93       	push	r24
    17da:	18 96       	adiw	r26, 0x08	; 8
    17dc:	8c 91       	ld	r24, X
    17de:	18 97       	sbiw	r26, 0x08	; 8
    17e0:	8f 93       	push	r24
    17e2:	17 96       	adiw	r26, 0x07	; 7
    17e4:	8c 91       	ld	r24, X
    17e6:	17 97       	sbiw	r26, 0x07	; 7
    17e8:	8f 93       	push	r24
    17ea:	16 96       	adiw	r26, 0x06	; 6
    17ec:	8c 91       	ld	r24, X
    17ee:	8f 93       	push	r24
    17f0:	eb e4       	ldi	r30, 0x4B	; 75
    17f2:	f2 e0       	ldi	r31, 0x02	; 2
    17f4:	ff 93       	push	r31
    17f6:	ef 93       	push	r30
    17f8:	1f 93       	push	r17
    17fa:	0f 93       	push	r16
    17fc:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <sprintf>
			u8g2_DrawStr(&lcd, 1, 50, (void *)char_array);
    1800:	98 01       	movw	r18, r16
    1802:	42 e3       	ldi	r20, 0x32	; 50
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	87 e7       	ldi	r24, 0x77	; 119
    180c:	95 e0       	ldi	r25, 0x05	; 5
    180e:	0e 94 89 10 	call	0x2112	; 0x2112 <u8g2_DrawStr>
				
			sprintf(char_array, "Wh %3.5f  ", dc_source1.energy);
    1812:	d7 01       	movw	r26, r14
    1814:	1d 96       	adiw	r26, 0x0d	; 13
    1816:	8c 91       	ld	r24, X
    1818:	1d 97       	sbiw	r26, 0x0d	; 13
    181a:	8f 93       	push	r24
    181c:	1c 96       	adiw	r26, 0x0c	; 12
    181e:	8c 91       	ld	r24, X
    1820:	1c 97       	sbiw	r26, 0x0c	; 12
    1822:	8f 93       	push	r24
    1824:	1b 96       	adiw	r26, 0x0b	; 11
    1826:	8c 91       	ld	r24, X
    1828:	1b 97       	sbiw	r26, 0x0b	; 11
    182a:	8f 93       	push	r24
    182c:	1a 96       	adiw	r26, 0x0a	; 10
    182e:	8c 91       	ld	r24, X
    1830:	8f 93       	push	r24
    1832:	e6 e5       	ldi	r30, 0x56	; 86
    1834:	f2 e0       	ldi	r31, 0x02	; 2
    1836:	ff 93       	push	r31
    1838:	ef 93       	push	r30
    183a:	1f 93       	push	r17
    183c:	0f 93       	push	r16
    183e:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <sprintf>
			u8g2_DrawStr(&lcd, 1, 59, (void *)char_array);
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	98 01       	movw	r18, r16
    184e:	4b e3       	ldi	r20, 0x3B	; 59
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	87 e7       	ldi	r24, 0x77	; 119
    1858:	95 e0       	ldi	r25, 0x05	; 5
    185a:	0e 94 89 10 	call	0x2112	; 0x2112 <u8g2_DrawStr>
			
			//if(BAT_VOLT < BAT_LOW_LEVEL){
				//_delay_ms(3);	
			//}
			//gpio_set_pin_level(&ext_led , true);
			u8g2_SendBuffer(&lcd);
    185e:	87 e7       	ldi	r24, 0x77	; 119
    1860:	95 e0       	ldi	r25, 0x05	; 5
    1862:	0e 94 97 0c 	call	0x192e	; 0x192e <u8g2_SendBuffer>
			//gpio_set_pin_level(&ext_led , false);
			
		}
		
		sleep_cpu();	
    1866:	88 95       	sleep
    }
    1868:	ec ce       	rjmp	.-552    	; 0x1642 <main+0x1a6>

0000186a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
    186a:	af 92       	push	r10
    186c:	bf 92       	push	r11
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	7c 01       	movw	r14, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
    1880:	dc 01       	movw	r26, r24
    1882:	94 96       	adiw	r26, 0x24	; 36
    1884:	bc 90       	ld	r11, X
    1886:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
    1888:	95 96       	adiw	r26, 0x25	; 37
    188a:	dc 91       	ld	r29, X
    188c:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    188e:	ed 91       	ld	r30, X+
    1890:	fc 91       	ld	r31, X
    1892:	a1 88       	ldd	r10, Z+17	; 0x11
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
    1894:	cd 2f       	mov	r28, r29
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    1896:	c1 2c       	mov	r12, r1
    1898:	d1 2c       	mov	r13, r1
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    189a:	d7 01       	movw	r26, r14
    189c:	ed 91       	ld	r30, X+
    189e:	fc 91       	ld	r31, X
    18a0:	11 97       	sbiw	r26, 0x01	; 1
    18a2:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
    18a4:	92 96       	adiw	r26, 0x22	; 34
    18a6:	0d 91       	ld	r16, X+
    18a8:	1c 91       	ld	r17, X
    18aa:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    18ac:	42 2f       	mov	r20, r18
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	44 0f       	add	r20, r20
    18b2:	55 1f       	adc	r21, r21
    18b4:	44 0f       	add	r20, r20
    18b6:	55 1f       	adc	r21, r21
    18b8:	44 0f       	add	r20, r20
    18ba:	55 1f       	adc	r21, r21
    18bc:	4c 9d       	mul	r20, r12
    18be:	c0 01       	movw	r24, r0
    18c0:	4d 9d       	mul	r20, r13
    18c2:	90 0d       	add	r25, r0
    18c4:	5c 9d       	mul	r21, r12
    18c6:	90 0d       	add	r25, r0
    18c8:	11 24       	eor	r1, r1
    18ca:	08 0f       	add	r16, r24
    18cc:	19 1f       	adc	r17, r25
    18ce:	4c 2f       	mov	r20, r28
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	c7 01       	movw	r24, r14
    18d4:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <u8x8_DrawTile>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
    18d8:	cf 5f       	subi	r28, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
    18da:	8c 2f       	mov	r24, r28
    18dc:	8d 1b       	sub	r24, r29
    18de:	8b 15       	cp	r24, r11
    18e0:	28 f4       	brcc	.+10     	; 0x18ec <u8g2_send_buffer+0x82>
    18e2:	bf ef       	ldi	r27, 0xFF	; 255
    18e4:	cb 1a       	sub	r12, r27
    18e6:	db 0a       	sbc	r13, r27
    18e8:	ca 15       	cp	r28, r10
    18ea:	b8 f2       	brcs	.-82     	; 0x189a <u8g2_send_buffer+0x30>
}
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	ff 90       	pop	r15
    18f6:	ef 90       	pop	r14
    18f8:	df 90       	pop	r13
    18fa:	cf 90       	pop	r12
    18fc:	bf 90       	pop	r11
    18fe:	af 90       	pop	r10
    1900:	08 95       	ret

00001902 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
    1902:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    1904:	a0 81       	ld	r26, Z
    1906:	b1 81       	ldd	r27, Z+1	; 0x01
    1908:	50 96       	adiw	r26, 0x10	; 16
    190a:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
    190c:	44 a1       	ldd	r20, Z+36	; 0x24
    190e:	94 9f       	mul	r25, r20
    1910:	a0 01       	movw	r20, r0
    1912:	11 24       	eor	r1, r1
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    1914:	44 0f       	add	r20, r20
    1916:	55 1f       	adc	r21, r21
    1918:	44 0f       	add	r20, r20
    191a:	55 1f       	adc	r21, r21
    191c:	44 0f       	add	r20, r20
    191e:	55 1f       	adc	r21, r21
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	82 a1       	ldd	r24, Z+34	; 0x22
    1926:	93 a1       	ldd	r25, Z+35	; 0x23
    1928:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <memset>
    192c:	08 95       	ret

0000192e <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
    1934:	0e 94 35 0c 	call	0x186a	; 0x186a <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    1938:	ce 01       	movw	r24, r28
    193a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <u8x8_RefreshDisplay>
}
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	08 95       	ret

00001944 <u8g2_m_16_4_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
    1944:	24 e0       	ldi	r18, 0x04	; 4
    1946:	fc 01       	movw	r30, r24
    1948:	20 83       	st	Z, r18
  return buf;
  #endif
}
    194a:	85 e5       	ldi	r24, 0x55	; 85
    194c:	93 e0       	ldi	r25, 0x03	; 3
    194e:	08 95       	ret

00001950 <u8g2_Setup_ssd1306_i2c_128x32_univision_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x32_univision_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	1f 92       	push	r1
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	7c 01       	movw	r14, r24
    1968:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    196a:	89 01       	movw	r16, r18
    196c:	9a 01       	movw	r18, r20
    196e:	44 e6       	ldi	r20, 0x64	; 100
    1970:	54 e1       	ldi	r21, 0x14	; 20
    1972:	65 e1       	ldi	r22, 0x15	; 21
    1974:	76 e1       	ldi	r23, 0x16	; 22
    1976:	0e 94 42 16 	call	0x2c84	; 0x2c84 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
    197a:	ce 01       	movw	r24, r28
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <u8g2_m_16_4_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    1982:	86 01       	movw	r16, r12
    1984:	2b ed       	ldi	r18, 0xDB	; 219
    1986:	31 e1       	ldi	r19, 0x11	; 17
    1988:	49 81       	ldd	r20, Y+1	; 0x01
    198a:	bc 01       	movw	r22, r24
    198c:	c7 01       	movw	r24, r14
    198e:	0e 94 18 13 	call	0x2630	; 0x2630 <u8g2_SetupBuffer>
}
    1992:	0f 90       	pop	r0
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	df 90       	pop	r13
    19a2:	cf 90       	pop	r12
    19a4:	08 95       	ret

000019a6 <u8g2_font_get_word>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
    19a6:	fc 01       	movw	r30, r24
    19a8:	e6 0f       	add	r30, r22
    19aa:	f1 1d       	adc	r31, r1
    19ac:	84 91       	lpm	r24, Z
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	98 2f       	mov	r25, r24
    19b2:	88 27       	eor	r24, r24
    19b4:	31 96       	adiw	r30, 0x01	; 1
    19b6:	e4 91       	lpm	r30, Z
    19b8:	8e 0f       	add	r24, r30
    19ba:	91 1d       	adc	r25, r1
    19bc:	08 95       	ret

000019be <u8g2_font_calc_vref_font>:
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	08 95       	ret

000019c4 <u8g2_read_font_info>:
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	ec 01       	movw	r28, r24
    19ce:	8b 01       	movw	r16, r22
    19d0:	fb 01       	movw	r30, r22
    19d2:	84 91       	lpm	r24, Z
    19d4:	88 83       	st	Y, r24
    19d6:	31 96       	adiw	r30, 0x01	; 1
    19d8:	e4 91       	lpm	r30, Z
    19da:	e9 83       	std	Y+1, r30	; 0x01
    19dc:	fb 01       	movw	r30, r22
    19de:	32 96       	adiw	r30, 0x02	; 2
    19e0:	e4 91       	lpm	r30, Z
    19e2:	ea 83       	std	Y+2, r30	; 0x02
    19e4:	fb 01       	movw	r30, r22
    19e6:	33 96       	adiw	r30, 0x03	; 3
    19e8:	e4 91       	lpm	r30, Z
    19ea:	eb 83       	std	Y+3, r30	; 0x03
    19ec:	fb 01       	movw	r30, r22
    19ee:	34 96       	adiw	r30, 0x04	; 4
    19f0:	e4 91       	lpm	r30, Z
    19f2:	ec 83       	std	Y+4, r30	; 0x04
    19f4:	fb 01       	movw	r30, r22
    19f6:	35 96       	adiw	r30, 0x05	; 5
    19f8:	e4 91       	lpm	r30, Z
    19fa:	ed 83       	std	Y+5, r30	; 0x05
    19fc:	fb 01       	movw	r30, r22
    19fe:	36 96       	adiw	r30, 0x06	; 6
    1a00:	e4 91       	lpm	r30, Z
    1a02:	ee 83       	std	Y+6, r30	; 0x06
    1a04:	fb 01       	movw	r30, r22
    1a06:	37 96       	adiw	r30, 0x07	; 7
    1a08:	e4 91       	lpm	r30, Z
    1a0a:	ef 83       	std	Y+7, r30	; 0x07
    1a0c:	fb 01       	movw	r30, r22
    1a0e:	38 96       	adiw	r30, 0x08	; 8
    1a10:	e4 91       	lpm	r30, Z
    1a12:	e8 87       	std	Y+8, r30	; 0x08
    1a14:	fb 01       	movw	r30, r22
    1a16:	39 96       	adiw	r30, 0x09	; 9
    1a18:	e4 91       	lpm	r30, Z
    1a1a:	e9 87       	std	Y+9, r30	; 0x09
    1a1c:	fb 01       	movw	r30, r22
    1a1e:	3a 96       	adiw	r30, 0x0a	; 10
    1a20:	e4 91       	lpm	r30, Z
    1a22:	ea 87       	std	Y+10, r30	; 0x0a
    1a24:	fb 01       	movw	r30, r22
    1a26:	3b 96       	adiw	r30, 0x0b	; 11
    1a28:	e4 91       	lpm	r30, Z
    1a2a:	eb 87       	std	Y+11, r30	; 0x0b
    1a2c:	fb 01       	movw	r30, r22
    1a2e:	3c 96       	adiw	r30, 0x0c	; 12
    1a30:	e4 91       	lpm	r30, Z
    1a32:	ec 87       	std	Y+12, r30	; 0x0c
    1a34:	fb 01       	movw	r30, r22
    1a36:	3d 96       	adiw	r30, 0x0d	; 13
    1a38:	e4 91       	lpm	r30, Z
    1a3a:	ed 87       	std	Y+13, r30	; 0x0d
    1a3c:	fb 01       	movw	r30, r22
    1a3e:	3e 96       	adiw	r30, 0x0e	; 14
    1a40:	e4 91       	lpm	r30, Z
    1a42:	ee 87       	std	Y+14, r30	; 0x0e
    1a44:	fb 01       	movw	r30, r22
    1a46:	3f 96       	adiw	r30, 0x0f	; 15
    1a48:	e4 91       	lpm	r30, Z
    1a4a:	ef 87       	std	Y+15, r30	; 0x0f
    1a4c:	fb 01       	movw	r30, r22
    1a4e:	70 96       	adiw	r30, 0x10	; 16
    1a50:	e4 91       	lpm	r30, Z
    1a52:	e8 8b       	std	Y+16, r30	; 0x10
    1a54:	61 e1       	ldi	r22, 0x11	; 17
    1a56:	c8 01       	movw	r24, r16
    1a58:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <u8g2_font_get_word>
    1a5c:	9a 8b       	std	Y+18, r25	; 0x12
    1a5e:	89 8b       	std	Y+17, r24	; 0x11
    1a60:	63 e1       	ldi	r22, 0x13	; 19
    1a62:	c8 01       	movw	r24, r16
    1a64:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <u8g2_font_get_word>
    1a68:	9c 8b       	std	Y+20, r25	; 0x14
    1a6a:	8b 8b       	std	Y+19, r24	; 0x13
    1a6c:	65 e1       	ldi	r22, 0x15	; 21
    1a6e:	c8 01       	movw	r24, r16
    1a70:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <u8g2_font_get_word>
    1a74:	9e 8b       	std	Y+22, r25	; 0x16
    1a76:	8d 8b       	std	Y+21, r24	; 0x15
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	08 95       	ret

00001a82 <u8g2_font_decode_get_unsigned_bits>:
    1a82:	dc 01       	movw	r26, r24
    1a84:	1a 96       	adiw	r26, 0x0a	; 10
    1a86:	9c 91       	ld	r25, X
    1a88:	1a 97       	sbiw	r26, 0x0a	; 10
    1a8a:	ed 91       	ld	r30, X+
    1a8c:	fc 91       	ld	r31, X
    1a8e:	11 97       	sbiw	r26, 0x01	; 1
    1a90:	24 91       	lpm	r18, Z
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	09 2e       	mov	r0, r25
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <u8g2_font_decode_get_unsigned_bits+0x1a>
    1a98:	35 95       	asr	r19
    1a9a:	27 95       	ror	r18
    1a9c:	0a 94       	dec	r0
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <u8g2_font_decode_get_unsigned_bits+0x16>
    1aa0:	89 2f       	mov	r24, r25
    1aa2:	86 0f       	add	r24, r22
    1aa4:	88 30       	cpi	r24, 0x08	; 8
    1aa6:	10 f4       	brcc	.+4      	; 0x1aac <u8g2_font_decode_get_unsigned_bits+0x2a>
    1aa8:	e2 2f       	mov	r30, r18
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <u8g2_font_decode_get_unsigned_bits+0x48>
    1aac:	31 96       	adiw	r30, 0x01	; 1
    1aae:	11 96       	adiw	r26, 0x01	; 1
    1ab0:	fc 93       	st	X, r31
    1ab2:	ee 93       	st	-X, r30
    1ab4:	e4 91       	lpm	r30, Z
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	38 e0       	ldi	r19, 0x08	; 8
    1aba:	39 1b       	sub	r19, r25
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <u8g2_font_decode_get_unsigned_bits+0x40>
    1abe:	ee 0f       	add	r30, r30
    1ac0:	ff 1f       	adc	r31, r31
    1ac2:	3a 95       	dec	r19
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <u8g2_font_decode_get_unsigned_bits+0x3c>
    1ac6:	e2 2b       	or	r30, r18
    1ac8:	88 50       	subi	r24, 0x08	; 8
    1aca:	1a 96       	adiw	r26, 0x0a	; 10
    1acc:	8c 93       	st	X, r24
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <u8g2_font_decode_get_unsigned_bits+0x56>
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	6a 95       	dec	r22
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <u8g2_font_decode_get_unsigned_bits+0x52>
    1adc:	81 50       	subi	r24, 0x01	; 1
    1ade:	8e 23       	and	r24, r30
    1ae0:	08 95       	ret

00001ae2 <u8g2_font_setup_decode>:
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	8c 01       	movw	r16, r24
    1aec:	ec 01       	movw	r28, r24
    1aee:	c8 5b       	subi	r28, 0xB8	; 184
    1af0:	df 4f       	sbci	r29, 0xFF	; 255
    1af2:	79 83       	std	Y+1, r23	; 0x01
    1af4:	68 83       	st	Y, r22
    1af6:	1a 86       	std	Y+10, r1	; 0x0a
    1af8:	fc 01       	movw	r30, r24
    1afa:	e5 5a       	subi	r30, 0xA5	; 165
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	60 81       	ld	r22, Z
    1b00:	ce 01       	movw	r24, r28
    1b02:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <u8g2_font_decode_get_unsigned_bits>
    1b06:	88 87       	std	Y+8, r24	; 0x08
    1b08:	f8 01       	movw	r30, r16
    1b0a:	e4 5a       	subi	r30, 0xA4	; 164
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	60 81       	ld	r22, Z
    1b10:	ce 01       	movw	r24, r28
    1b12:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <u8g2_font_decode_get_unsigned_bits>
    1b16:	89 87       	std	Y+9, r24	; 0x09
    1b18:	f8 01       	movw	r30, r16
    1b1a:	ec 58       	subi	r30, 0x8C	; 140
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	80 81       	ld	r24, Z
    1b20:	8c 87       	std	Y+12, r24	; 0x0c
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	81 11       	cpse	r24, r1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9d 87       	std	Y+13, r25	; 0x0d
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	08 95       	ret

00001b34 <u8g2_font_decode_get_signed_bits>:
    1b34:	cf 93       	push	r28
    1b36:	c6 2f       	mov	r28, r22
    1b38:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <u8g2_font_decode_get_unsigned_bits>
    1b3c:	c1 50       	subi	r28, 0x01	; 1
    1b3e:	21 e0       	ldi	r18, 0x01	; 1
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <u8g2_font_decode_get_signed_bits+0x14>
    1b44:	22 0f       	add	r18, r18
    1b46:	33 1f       	adc	r19, r19
    1b48:	ca 95       	dec	r28
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <u8g2_font_decode_get_signed_bits+0x10>
    1b4c:	82 1b       	sub	r24, r18
    1b4e:	cf 91       	pop	r28
    1b50:	08 95       	ret

00001b52 <u8g2_add_vector_y>:
    1b52:	21 30       	cpi	r18, 0x01	; 1
    1b54:	49 f0       	breq	.+18     	; 0x1b68 <u8g2_add_vector_y+0x16>
    1b56:	18 f0       	brcs	.+6      	; 0x1b5e <u8g2_add_vector_y+0xc>
    1b58:	22 30       	cpi	r18, 0x02	; 2
    1b5a:	59 f0       	breq	.+22     	; 0x1b72 <u8g2_add_vector_y+0x20>
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <u8g2_add_vector_y+0x2a>
    1b5e:	84 0f       	add	r24, r20
    1b60:	91 1d       	adc	r25, r1
    1b62:	47 fd       	sbrc	r20, 7
    1b64:	9a 95       	dec	r25
    1b66:	08 95       	ret
    1b68:	86 0f       	add	r24, r22
    1b6a:	91 1d       	adc	r25, r1
    1b6c:	67 fd       	sbrc	r22, 7
    1b6e:	9a 95       	dec	r25
    1b70:	08 95       	ret
    1b72:	84 1b       	sub	r24, r20
    1b74:	91 09       	sbc	r25, r1
    1b76:	47 fd       	sbrc	r20, 7
    1b78:	93 95       	inc	r25
    1b7a:	08 95       	ret
    1b7c:	86 1b       	sub	r24, r22
    1b7e:	91 09       	sbc	r25, r1
    1b80:	67 fd       	sbrc	r22, 7
    1b82:	93 95       	inc	r25
    1b84:	08 95       	ret

00001b86 <u8g2_add_vector_x>:
    1b86:	21 30       	cpi	r18, 0x01	; 1
    1b88:	49 f0       	breq	.+18     	; 0x1b9c <u8g2_add_vector_x+0x16>
    1b8a:	18 f0       	brcs	.+6      	; 0x1b92 <u8g2_add_vector_x+0xc>
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	59 f0       	breq	.+22     	; 0x1ba6 <u8g2_add_vector_x+0x20>
    1b90:	0f c0       	rjmp	.+30     	; 0x1bb0 <u8g2_add_vector_x+0x2a>
    1b92:	86 0f       	add	r24, r22
    1b94:	91 1d       	adc	r25, r1
    1b96:	67 fd       	sbrc	r22, 7
    1b98:	9a 95       	dec	r25
    1b9a:	08 95       	ret
    1b9c:	84 1b       	sub	r24, r20
    1b9e:	91 09       	sbc	r25, r1
    1ba0:	47 fd       	sbrc	r20, 7
    1ba2:	93 95       	inc	r25
    1ba4:	08 95       	ret
    1ba6:	86 1b       	sub	r24, r22
    1ba8:	91 09       	sbc	r25, r1
    1baa:	67 fd       	sbrc	r22, 7
    1bac:	93 95       	inc	r25
    1bae:	08 95       	ret
    1bb0:	84 0f       	add	r24, r20
    1bb2:	91 1d       	adc	r25, r1
    1bb4:	47 fd       	sbrc	r20, 7
    1bb6:	9a 95       	dec	r25
    1bb8:	08 95       	ret

00001bba <u8g2_font_decode_len>:
    1bba:	2f 92       	push	r2
    1bbc:	3f 92       	push	r3
    1bbe:	4f 92       	push	r4
    1bc0:	5f 92       	push	r5
    1bc2:	6f 92       	push	r6
    1bc4:	7f 92       	push	r7
    1bc6:	8f 92       	push	r8
    1bc8:	9f 92       	push	r9
    1bca:	af 92       	push	r10
    1bcc:	bf 92       	push	r11
    1bce:	cf 92       	push	r12
    1bd0:	df 92       	push	r13
    1bd2:	ef 92       	push	r14
    1bd4:	ff 92       	push	r15
    1bd6:	0f 93       	push	r16
    1bd8:	1f 93       	push	r17
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	4c 01       	movw	r8, r24
    1be0:	d6 2f       	mov	r29, r22
    1be2:	34 2e       	mov	r3, r20
    1be4:	fc 01       	movw	r30, r24
    1be6:	e8 5b       	subi	r30, 0xB8	; 184
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	56 80       	ldd	r5, Z+6	; 0x06
    1bec:	17 81       	ldd	r17, Z+7	; 0x07
    1bee:	7f 01       	movw	r14, r30
    1bf0:	3c 01       	movw	r6, r24
    1bf2:	e4 e7       	ldi	r30, 0x74	; 116
    1bf4:	6e 0e       	add	r6, r30
    1bf6:	71 1c       	adc	r7, r1
    1bf8:	f7 01       	movw	r30, r14
    1bfa:	c0 85       	ldd	r28, Z+8	; 0x08
    1bfc:	c5 19       	sub	r28, r5
    1bfe:	2d 2e       	mov	r2, r29
    1c00:	cd 17       	cp	r28, r29
    1c02:	08 f4       	brcc	.+2      	; 0x1c06 <u8g2_font_decode_len+0x4c>
    1c04:	2c 2e       	mov	r2, r28
    1c06:	f7 01       	movw	r30, r14
    1c08:	c4 80       	ldd	r12, Z+4	; 0x04
    1c0a:	d5 80       	ldd	r13, Z+5	; 0x05
    1c0c:	06 85       	ldd	r16, Z+14	; 0x0e
    1c0e:	41 2e       	mov	r4, r17
    1c10:	20 2f       	mov	r18, r16
    1c12:	41 2f       	mov	r20, r17
    1c14:	65 2d       	mov	r22, r5
    1c16:	82 81       	ldd	r24, Z+2	; 0x02
    1c18:	93 81       	ldd	r25, Z+3	; 0x03
    1c1a:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <u8g2_add_vector_x>
    1c1e:	5c 01       	movw	r10, r24
    1c20:	20 2f       	mov	r18, r16
    1c22:	41 2f       	mov	r20, r17
    1c24:	65 2d       	mov	r22, r5
    1c26:	c6 01       	movw	r24, r12
    1c28:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <u8g2_add_vector_y>
    1c2c:	33 20       	and	r3, r3
    1c2e:	61 f0       	breq	.+24     	; 0x1c48 <u8g2_font_decode_len+0x8e>
    1c30:	f7 01       	movw	r30, r14
    1c32:	24 85       	ldd	r18, Z+12	; 0x0c
    1c34:	f3 01       	movw	r30, r6
    1c36:	20 83       	st	Z, r18
    1c38:	22 2d       	mov	r18, r2
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	ac 01       	movw	r20, r24
    1c3e:	b5 01       	movw	r22, r10
    1c40:	c4 01       	movw	r24, r8
    1c42:	0e 94 05 11 	call	0x220a	; 0x220a <u8g2_DrawHVLine>
    1c46:	0e c0       	rjmp	.+28     	; 0x1c64 <u8g2_font_decode_len+0xaa>
    1c48:	f7 01       	movw	r30, r14
    1c4a:	23 85       	ldd	r18, Z+11	; 0x0b
    1c4c:	21 11       	cpse	r18, r1
    1c4e:	0a c0       	rjmp	.+20     	; 0x1c64 <u8g2_font_decode_len+0xaa>
    1c50:	25 85       	ldd	r18, Z+13	; 0x0d
    1c52:	f3 01       	movw	r30, r6
    1c54:	20 83       	st	Z, r18
    1c56:	22 2d       	mov	r18, r2
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	ac 01       	movw	r20, r24
    1c5c:	b5 01       	movw	r22, r10
    1c5e:	c4 01       	movw	r24, r8
    1c60:	0e 94 05 11 	call	0x220a	; 0x220a <u8g2_DrawHVLine>
    1c64:	dc 17       	cp	r29, r28
    1c66:	20 f0       	brcs	.+8      	; 0x1c70 <u8g2_font_decode_len+0xb6>
    1c68:	dc 1b       	sub	r29, r28
    1c6a:	1f 5f       	subi	r17, 0xFF	; 255
    1c6c:	51 2c       	mov	r5, r1
    1c6e:	c4 cf       	rjmp	.-120    	; 0x1bf8 <u8g2_font_decode_len+0x3e>
    1c70:	f4 01       	movw	r30, r8
    1c72:	e8 5b       	subi	r30, 0xB8	; 184
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	d5 0d       	add	r29, r5
    1c78:	d6 83       	std	Z+6, r29	; 0x06
    1c7a:	47 82       	std	Z+7, r4	; 0x07
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	ff 90       	pop	r15
    1c86:	ef 90       	pop	r14
    1c88:	df 90       	pop	r13
    1c8a:	cf 90       	pop	r12
    1c8c:	bf 90       	pop	r11
    1c8e:	af 90       	pop	r10
    1c90:	9f 90       	pop	r9
    1c92:	8f 90       	pop	r8
    1c94:	7f 90       	pop	r7
    1c96:	6f 90       	pop	r6
    1c98:	5f 90       	pop	r5
    1c9a:	4f 90       	pop	r4
    1c9c:	3f 90       	pop	r3
    1c9e:	2f 90       	pop	r2
    1ca0:	08 95       	ret

00001ca2 <u8g2_font_decode_glyph>:
    1ca2:	6f 92       	push	r6
    1ca4:	7f 92       	push	r7
    1ca6:	8f 92       	push	r8
    1ca8:	9f 92       	push	r9
    1caa:	af 92       	push	r10
    1cac:	bf 92       	push	r11
    1cae:	cf 92       	push	r12
    1cb0:	df 92       	push	r13
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	ec 01       	movw	r28, r24
    1cc0:	7c 01       	movw	r14, r24
    1cc2:	88 e4       	ldi	r24, 0x48	; 72
    1cc4:	e8 0e       	add	r14, r24
    1cc6:	f1 1c       	adc	r15, r1
    1cc8:	ce 01       	movw	r24, r28
    1cca:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <u8g2_font_setup_decode>
    1cce:	fe 01       	movw	r30, r28
    1cd0:	ef 5a       	subi	r30, 0xAF	; 175
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	60 80       	ld	r6, Z
    1cd6:	3c 96       	adiw	r30, 0x0c	; 12
    1cd8:	60 81       	ld	r22, Z
    1cda:	c7 01       	movw	r24, r14
    1cdc:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <u8g2_font_decode_get_signed_bits>
    1ce0:	98 2e       	mov	r9, r24
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e2 5a       	subi	r30, 0xA2	; 162
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	60 81       	ld	r22, Z
    1cea:	c7 01       	movw	r24, r14
    1cec:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <u8g2_font_decode_get_signed_bits>
    1cf0:	18 2f       	mov	r17, r24
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e1 5a       	subi	r30, 0xA1	; 161
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	60 81       	ld	r22, Z
    1cfa:	c7 01       	movw	r24, r14
    1cfc:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <u8g2_font_decode_get_signed_bits>
    1d00:	78 2e       	mov	r7, r24
    1d02:	f7 01       	movw	r30, r14
    1d04:	80 84       	ldd	r8, Z+8	; 0x08
    1d06:	18 14       	cp	r1, r8
    1d08:	0c f0       	brlt	.+2      	; 0x1d0c <u8g2_font_decode_glyph+0x6a>
    1d0a:	a4 c0       	rjmp	.+328    	; 0x1e54 <u8g2_font_decode_glyph+0x1b2>
    1d0c:	06 85       	ldd	r16, Z+14	; 0x0e
    1d0e:	16 0d       	add	r17, r6
    1d10:	11 95       	neg	r17
    1d12:	20 2f       	mov	r18, r16
    1d14:	41 2f       	mov	r20, r17
    1d16:	69 2d       	mov	r22, r9
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	93 81       	ldd	r25, Z+3	; 0x03
    1d1c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <u8g2_add_vector_x>
    1d20:	6c 01       	movw	r12, r24
    1d22:	f7 01       	movw	r30, r14
    1d24:	93 83       	std	Z+3, r25	; 0x03
    1d26:	82 83       	std	Z+2, r24	; 0x02
    1d28:	20 2f       	mov	r18, r16
    1d2a:	41 2f       	mov	r20, r17
    1d2c:	69 2d       	mov	r22, r9
    1d2e:	84 81       	ldd	r24, Z+4	; 0x04
    1d30:	95 81       	ldd	r25, Z+5	; 0x05
    1d32:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <u8g2_add_vector_y>
    1d36:	f7 01       	movw	r30, r14
    1d38:	95 83       	std	Z+5, r25	; 0x05
    1d3a:	84 83       	std	Z+4, r24	; 0x04
    1d3c:	01 30       	cpi	r16, 0x01	; 1
    1d3e:	89 f0       	breq	.+34     	; 0x1d62 <u8g2_font_decode_glyph+0xc0>
    1d40:	28 f0       	brcs	.+10     	; 0x1d4c <u8g2_font_decode_glyph+0xaa>
    1d42:	02 30       	cpi	r16, 0x02	; 2
    1d44:	f9 f0       	breq	.+62     	; 0x1d84 <u8g2_font_decode_glyph+0xe2>
    1d46:	03 30       	cpi	r16, 0x03	; 3
    1d48:	99 f1       	breq	.+102    	; 0x1db0 <u8g2_font_decode_glyph+0x10e>
    1d4a:	43 c0       	rjmp	.+134    	; 0x1dd2 <u8g2_font_decode_glyph+0x130>
    1d4c:	96 01       	movw	r18, r12
    1d4e:	28 0d       	add	r18, r8
    1d50:	31 1d       	adc	r19, r1
    1d52:	87 fc       	sbrc	r8, 7
    1d54:	3a 95       	dec	r19
    1d56:	8c 01       	movw	r16, r24
    1d58:	06 0d       	add	r16, r6
    1d5a:	11 1d       	adc	r17, r1
    1d5c:	67 fc       	sbrc	r6, 7
    1d5e:	1a 95       	dec	r17
    1d60:	3a c0       	rjmp	.+116    	; 0x1dd6 <u8g2_font_decode_glyph+0x134>
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	46 19       	sub	r20, r6
    1d68:	51 09       	sbc	r21, r1
    1d6a:	67 fc       	sbrc	r6, 7
    1d6c:	53 95       	inc	r21
    1d6e:	96 01       	movw	r18, r12
    1d70:	2f 5f       	subi	r18, 0xFF	; 255
    1d72:	3f 4f       	sbci	r19, 0xFF	; 255
    1d74:	8c 01       	movw	r16, r24
    1d76:	08 0d       	add	r16, r8
    1d78:	11 1d       	adc	r17, r1
    1d7a:	87 fc       	sbrc	r8, 7
    1d7c:	1a 95       	dec	r17
    1d7e:	c4 0e       	add	r12, r20
    1d80:	d5 1e       	adc	r13, r21
    1d82:	29 c0       	rjmp	.+82     	; 0x1dd6 <u8g2_font_decode_glyph+0x134>
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	ba 01       	movw	r22, r20
    1d8a:	68 19       	sub	r22, r8
    1d8c:	71 09       	sbc	r23, r1
    1d8e:	87 fc       	sbrc	r8, 7
    1d90:	73 95       	inc	r23
    1d92:	96 01       	movw	r18, r12
    1d94:	2f 5f       	subi	r18, 0xFF	; 255
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	46 19       	sub	r20, r6
    1d9a:	51 09       	sbc	r21, r1
    1d9c:	67 fc       	sbrc	r6, 7
    1d9e:	53 95       	inc	r21
    1da0:	8c 01       	movw	r16, r24
    1da2:	0f 5f       	subi	r16, 0xFF	; 255
    1da4:	1f 4f       	sbci	r17, 0xFF	; 255
    1da6:	84 0f       	add	r24, r20
    1da8:	95 1f       	adc	r25, r21
    1daa:	c6 0e       	add	r12, r22
    1dac:	d7 1e       	adc	r13, r23
    1dae:	13 c0       	rjmp	.+38     	; 0x1dd6 <u8g2_font_decode_glyph+0x134>
    1db0:	96 01       	movw	r18, r12
    1db2:	26 0d       	add	r18, r6
    1db4:	31 1d       	adc	r19, r1
    1db6:	67 fc       	sbrc	r6, 7
    1db8:	3a 95       	dec	r19
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	48 19       	sub	r20, r8
    1dc0:	51 09       	sbc	r21, r1
    1dc2:	87 fc       	sbrc	r8, 7
    1dc4:	53 95       	inc	r21
    1dc6:	8c 01       	movw	r16, r24
    1dc8:	0f 5f       	subi	r16, 0xFF	; 255
    1dca:	1f 4f       	sbci	r17, 0xFF	; 255
    1dcc:	84 0f       	add	r24, r20
    1dce:	95 1f       	adc	r25, r21
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <u8g2_font_decode_glyph+0x134>
    1dd2:	8c 01       	movw	r16, r24
    1dd4:	96 01       	movw	r18, r12
    1dd6:	ac 01       	movw	r20, r24
    1dd8:	b6 01       	movw	r22, r12
    1dda:	ce 01       	movw	r24, r28
    1ddc:	0e 94 b6 11 	call	0x236c	; 0x236c <u8g2_IsIntersection>
    1de0:	88 23       	and	r24, r24
    1de2:	c1 f1       	breq	.+112    	; 0x1e54 <u8g2_font_decode_glyph+0x1b2>
    1de4:	fe 01       	movw	r30, r28
    1de6:	e8 5b       	subi	r30, 0xB8	; 184
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	16 82       	std	Z+6, r1	; 0x06
    1dec:	17 82       	std	Z+7, r1	; 0x07
    1dee:	4e 01       	movw	r8, r28
    1df0:	f9 e5       	ldi	r31, 0x59	; 89
    1df2:	8f 0e       	add	r8, r31
    1df4:	91 1c       	adc	r9, r1
    1df6:	5e 01       	movw	r10, r28
    1df8:	8a e5       	ldi	r24, 0x5A	; 90
    1dfa:	a8 0e       	add	r10, r24
    1dfc:	b1 1c       	adc	r11, r1
    1dfe:	6e 01       	movw	r12, r28
    1e00:	e8 e4       	ldi	r30, 0x48	; 72
    1e02:	ce 0e       	add	r12, r30
    1e04:	d1 1c       	adc	r13, r1
    1e06:	f4 01       	movw	r30, r8
    1e08:	60 81       	ld	r22, Z
    1e0a:	c7 01       	movw	r24, r14
    1e0c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <u8g2_font_decode_get_unsigned_bits>
    1e10:	08 2f       	mov	r16, r24
    1e12:	f5 01       	movw	r30, r10
    1e14:	60 81       	ld	r22, Z
    1e16:	c7 01       	movw	r24, r14
    1e18:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <u8g2_font_decode_get_unsigned_bits>
    1e1c:	18 2f       	mov	r17, r24
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	60 2f       	mov	r22, r16
    1e22:	ce 01       	movw	r24, r28
    1e24:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <u8g2_font_decode_len>
    1e28:	41 e0       	ldi	r20, 0x01	; 1
    1e2a:	61 2f       	mov	r22, r17
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <u8g2_font_decode_len>
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	c7 01       	movw	r24, r14
    1e36:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <u8g2_font_decode_get_unsigned_bits>
    1e3a:	81 11       	cpse	r24, r1
    1e3c:	f0 cf       	rjmp	.-32     	; 0x1e1e <u8g2_font_decode_glyph+0x17c>
    1e3e:	f6 01       	movw	r30, r12
    1e40:	87 81       	ldd	r24, Z+7	; 0x07
    1e42:	86 15       	cp	r24, r6
    1e44:	04 f3       	brlt	.-64     	; 0x1e06 <u8g2_font_decode_glyph+0x164>
    1e46:	fe 01       	movw	r30, r28
    1e48:	ec 58       	subi	r30, 0x8C	; 140
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	c8 5b       	subi	r28, 0xB8	; 184
    1e4e:	df 4f       	sbci	r29, 0xFF	; 255
    1e50:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e52:	80 83       	st	Z, r24
    1e54:	87 2d       	mov	r24, r7
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	ef 90       	pop	r14
    1e62:	df 90       	pop	r13
    1e64:	cf 90       	pop	r12
    1e66:	bf 90       	pop	r11
    1e68:	af 90       	pop	r10
    1e6a:	9f 90       	pop	r9
    1e6c:	8f 90       	pop	r8
    1e6e:	7f 90       	pop	r7
    1e70:	6f 90       	pop	r6
    1e72:	08 95       	ret

00001e74 <u8g2_font_get_glyph_data>:
    1e74:	ef 92       	push	r14
    1e76:	ff 92       	push	r15
    1e78:	0f 93       	push	r16
    1e7a:	1f 93       	push	r17
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
    1e80:	fc 01       	movw	r30, r24
    1e82:	ec 5b       	subi	r30, 0xBC	; 188
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	c0 81       	ld	r28, Z
    1e88:	d1 81       	ldd	r29, Z+1	; 0x01
    1e8a:	67 96       	adiw	r28, 0x17	; 23
    1e8c:	6f 3f       	cpi	r22, 0xFF	; 255
    1e8e:	71 05       	cpc	r23, r1
    1e90:	11 f0       	breq	.+4      	; 0x1e96 <u8g2_font_get_glyph_data+0x22>
    1e92:	08 f0       	brcs	.+2      	; 0x1e96 <u8g2_font_get_glyph_data+0x22>
    1e94:	35 c0       	rjmp	.+106    	; 0x1f00 <u8g2_font_get_glyph_data+0x8c>
    1e96:	61 36       	cpi	r22, 0x61	; 97
    1e98:	71 05       	cpc	r23, r1
    1e9a:	30 f0       	brcs	.+12     	; 0x1ea8 <u8g2_font_get_glyph_data+0x34>
    1e9c:	b6 96       	adiw	r30, 0x26	; 38
    1e9e:	80 81       	ld	r24, Z
    1ea0:	91 81       	ldd	r25, Z+1	; 0x01
    1ea2:	c8 0f       	add	r28, r24
    1ea4:	d9 1f       	adc	r29, r25
    1ea6:	0a c0       	rjmp	.+20     	; 0x1ebc <u8g2_font_get_glyph_data+0x48>
    1ea8:	61 34       	cpi	r22, 0x41	; 65
    1eaa:	71 05       	cpc	r23, r1
    1eac:	38 f0       	brcs	.+14     	; 0x1ebc <u8g2_font_get_glyph_data+0x48>
    1eae:	fc 01       	movw	r30, r24
    1eb0:	e8 59       	subi	r30, 0x98	; 152
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 81       	ld	r24, Z
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	c8 0f       	add	r28, r24
    1eba:	d9 1f       	adc	r29, r25
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	24 91       	lpm	r18, Z
    1ec4:	22 23       	and	r18, r18
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <u8g2_font_get_glyph_data+0x56>
    1ec8:	5a c0       	rjmp	.+180    	; 0x1f7e <u8g2_font_get_glyph_data+0x10a>
    1eca:	fe 01       	movw	r30, r28
    1ecc:	24 91       	lpm	r18, Z
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	62 17       	cp	r22, r18
    1ed2:	73 07       	cpc	r23, r19
    1ed4:	51 f4       	brne	.+20     	; 0x1eea <u8g2_font_get_glyph_data+0x76>
    1ed6:	06 c0       	rjmp	.+12     	; 0x1ee4 <u8g2_font_get_glyph_data+0x70>
    1ed8:	fe 01       	movw	r30, r28
    1eda:	24 91       	lpm	r18, Z
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	62 17       	cp	r22, r18
    1ee0:	73 07       	cpc	r23, r19
    1ee2:	19 f4       	brne	.+6      	; 0x1eea <u8g2_font_get_glyph_data+0x76>
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	02 96       	adiw	r24, 0x02	; 2
    1ee8:	52 c0       	rjmp	.+164    	; 0x1f8e <u8g2_font_get_glyph_data+0x11a>
    1eea:	fc 01       	movw	r30, r24
    1eec:	84 91       	lpm	r24, Z
    1eee:	c8 0f       	add	r28, r24
    1ef0:	d1 1d       	adc	r29, r1
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	24 91       	lpm	r18, Z
    1efa:	21 11       	cpse	r18, r1
    1efc:	ed cf       	rjmp	.-38     	; 0x1ed8 <u8g2_font_get_glyph_data+0x64>
    1efe:	42 c0       	rjmp	.+132    	; 0x1f84 <u8g2_font_get_glyph_data+0x110>
    1f00:	8b 01       	movw	r16, r22
    1f02:	fc 01       	movw	r30, r24
    1f04:	e4 59       	subi	r30, 0x94	; 148
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	80 81       	ld	r24, Z
    1f0a:	91 81       	ldd	r25, Z+1	; 0x01
    1f0c:	c8 0f       	add	r28, r24
    1f0e:	d9 1f       	adc	r29, r25
    1f10:	7e 01       	movw	r14, r28
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	c7 01       	movw	r24, r14
    1f16:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <u8g2_font_get_word>
    1f1a:	c8 0f       	add	r28, r24
    1f1c:	d9 1f       	adc	r29, r25
    1f1e:	62 e0       	ldi	r22, 0x02	; 2
    1f20:	c7 01       	movw	r24, r14
    1f22:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <u8g2_font_get_word>
    1f26:	f4 e0       	ldi	r31, 0x04	; 4
    1f28:	ef 0e       	add	r14, r31
    1f2a:	f1 1c       	adc	r15, r1
    1f2c:	80 17       	cp	r24, r16
    1f2e:	91 07       	cpc	r25, r17
    1f30:	80 f3       	brcs	.-32     	; 0x1f12 <u8g2_font_get_glyph_data+0x9e>
    1f32:	fe 01       	movw	r30, r28
    1f34:	84 91       	lpm	r24, Z
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	98 2f       	mov	r25, r24
    1f3a:	88 27       	eor	r24, r24
    1f3c:	31 96       	adiw	r30, 0x01	; 1
    1f3e:	e4 91       	lpm	r30, Z
    1f40:	8e 2b       	or	r24, r30
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	11 f1       	breq	.+68     	; 0x1f8a <u8g2_font_get_glyph_data+0x116>
    1f46:	08 17       	cp	r16, r24
    1f48:	19 07       	cpc	r17, r25
    1f4a:	39 f4       	brne	.+14     	; 0x1f5a <u8g2_font_get_glyph_data+0xe6>
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <u8g2_font_get_glyph_data+0xe0>
    1f4e:	08 17       	cp	r16, r24
    1f50:	19 07       	cpc	r17, r25
    1f52:	19 f4       	brne	.+6      	; 0x1f5a <u8g2_font_get_glyph_data+0xe6>
    1f54:	ce 01       	movw	r24, r28
    1f56:	03 96       	adiw	r24, 0x03	; 3
    1f58:	1a c0       	rjmp	.+52     	; 0x1f8e <u8g2_font_get_glyph_data+0x11a>
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	32 96       	adiw	r30, 0x02	; 2
    1f5e:	e4 91       	lpm	r30, Z
    1f60:	ce 0f       	add	r28, r30
    1f62:	d1 1d       	adc	r29, r1
    1f64:	fe 01       	movw	r30, r28
    1f66:	84 91       	lpm	r24, Z
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	98 2f       	mov	r25, r24
    1f6c:	88 27       	eor	r24, r24
    1f6e:	31 96       	adiw	r30, 0x01	; 1
    1f70:	e4 91       	lpm	r30, Z
    1f72:	8e 2b       	or	r24, r30
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	59 f7       	brne	.-42     	; 0x1f4e <u8g2_font_get_glyph_data+0xda>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	08 c0       	rjmp	.+16     	; 0x1f8e <u8g2_font_get_glyph_data+0x11a>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	05 c0       	rjmp	.+10     	; 0x1f8e <u8g2_font_get_glyph_data+0x11a>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <u8g2_font_get_glyph_data+0x11a>
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	1f 91       	pop	r17
    1f94:	0f 91       	pop	r16
    1f96:	ff 90       	pop	r15
    1f98:	ef 90       	pop	r14
    1f9a:	08 95       	ret

00001f9c <u8g2_DrawGlyph>:
    1f9c:	cf 92       	push	r12
    1f9e:	df 92       	push	r13
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	ec 01       	movw	r28, r24
    1fae:	7b 01       	movw	r14, r22
    1fb0:	8a 01       	movw	r16, r20
    1fb2:	69 01       	movw	r12, r18
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	ea 5a       	subi	r30, 0xAA	; 170
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	80 81       	ld	r24, Z
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	89 f0       	breq	.+34     	; 0x1fe2 <u8g2_DrawGlyph+0x46>
    1fc0:	28 f0       	brcs	.+10     	; 0x1fcc <u8g2_DrawGlyph+0x30>
    1fc2:	82 30       	cpi	r24, 0x02	; 2
    1fc4:	c9 f0       	breq	.+50     	; 0x1ff8 <u8g2_DrawGlyph+0x5c>
    1fc6:	83 30       	cpi	r24, 0x03	; 3
    1fc8:	11 f1       	breq	.+68     	; 0x200e <u8g2_DrawGlyph+0x72>
    1fca:	2b c0       	rjmp	.+86     	; 0x2022 <u8g2_DrawGlyph+0x86>
    1fcc:	fe 01       	movw	r30, r28
    1fce:	ea 5b       	subi	r30, 0xBA	; 186
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	01 90       	ld	r0, Z+
    1fd4:	f0 81       	ld	r31, Z
    1fd6:	e0 2d       	mov	r30, r0
    1fd8:	ce 01       	movw	r24, r28
    1fda:	09 95       	icall
    1fdc:	08 0f       	add	r16, r24
    1fde:	19 1f       	adc	r17, r25
    1fe0:	20 c0       	rjmp	.+64     	; 0x2022 <u8g2_DrawGlyph+0x86>
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ea 5b       	subi	r30, 0xBA	; 186
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	01 90       	ld	r0, Z+
    1fea:	f0 81       	ld	r31, Z
    1fec:	e0 2d       	mov	r30, r0
    1fee:	ce 01       	movw	r24, r28
    1ff0:	09 95       	icall
    1ff2:	e8 1a       	sub	r14, r24
    1ff4:	f9 0a       	sbc	r15, r25
    1ff6:	15 c0       	rjmp	.+42     	; 0x2022 <u8g2_DrawGlyph+0x86>
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	ea 5b       	subi	r30, 0xBA	; 186
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	01 90       	ld	r0, Z+
    2000:	f0 81       	ld	r31, Z
    2002:	e0 2d       	mov	r30, r0
    2004:	ce 01       	movw	r24, r28
    2006:	09 95       	icall
    2008:	08 1b       	sub	r16, r24
    200a:	19 0b       	sbc	r17, r25
    200c:	0a c0       	rjmp	.+20     	; 0x2022 <u8g2_DrawGlyph+0x86>
    200e:	fe 01       	movw	r30, r28
    2010:	ea 5b       	subi	r30, 0xBA	; 186
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	01 90       	ld	r0, Z+
    2016:	f0 81       	ld	r31, Z
    2018:	e0 2d       	mov	r30, r0
    201a:	ce 01       	movw	r24, r28
    201c:	09 95       	icall
    201e:	e8 0e       	add	r14, r24
    2020:	f9 1e       	adc	r15, r25
    2022:	fe 01       	movw	r30, r28
    2024:	e6 5b       	subi	r30, 0xB6	; 182
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	f1 82       	std	Z+1, r15	; 0x01
    202a:	e0 82       	st	Z, r14
    202c:	32 96       	adiw	r30, 0x02	; 2
    202e:	11 83       	std	Z+1, r17	; 0x01
    2030:	00 83       	st	Z, r16
    2032:	b6 01       	movw	r22, r12
    2034:	ce 01       	movw	r24, r28
    2036:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <u8g2_font_get_glyph_data>
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	41 f0       	breq	.+16     	; 0x204e <u8g2_DrawGlyph+0xb2>
    203e:	bc 01       	movw	r22, r24
    2040:	ce 01       	movw	r24, r28
    2042:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <u8g2_font_decode_glyph>
    2046:	08 2e       	mov	r0, r24
    2048:	00 0c       	add	r0, r0
    204a:	99 0b       	sbc	r25, r25
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <u8g2_DrawGlyph+0xb6>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	df 90       	pop	r13
    2060:	cf 90       	pop	r12
    2062:	08 95       	ret

00002064 <u8g2_draw_string>:
    2064:	8f 92       	push	r8
    2066:	9f 92       	push	r9
    2068:	af 92       	push	r10
    206a:	bf 92       	push	r11
    206c:	cf 92       	push	r12
    206e:	df 92       	push	r13
    2070:	ef 92       	push	r14
    2072:	ff 92       	push	r15
    2074:	0f 93       	push	r16
    2076:	1f 93       	push	r17
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	ec 01       	movw	r28, r24
    207e:	5b 01       	movw	r10, r22
    2080:	6a 01       	movw	r12, r20
    2082:	e2 2e       	mov	r14, r18
    2084:	f3 2e       	mov	r15, r19
    2086:	0e 94 55 13 	call	0x26aa	; 0x26aa <u8x8_utf8_init>
    208a:	0e 2d       	mov	r16, r14
    208c:	1f 2d       	mov	r17, r15
    208e:	e1 2c       	mov	r14, r1
    2090:	f1 2c       	mov	r15, r1
    2092:	4e 01       	movw	r8, r28
    2094:	26 e5       	ldi	r18, 0x56	; 86
    2096:	82 0e       	add	r8, r18
    2098:	91 1c       	adc	r9, r1
    209a:	f8 01       	movw	r30, r16
    209c:	61 91       	ld	r22, Z+
    209e:	8f 01       	movw	r16, r30
    20a0:	ea 81       	ldd	r30, Y+2	; 0x02
    20a2:	fb 81       	ldd	r31, Y+3	; 0x03
    20a4:	ce 01       	movw	r24, r28
    20a6:	09 95       	icall
    20a8:	8f 3f       	cpi	r24, 0xFF	; 255
    20aa:	ff ef       	ldi	r31, 0xFF	; 255
    20ac:	9f 07       	cpc	r25, r31
    20ae:	19 f1       	breq	.+70     	; 0x20f6 <u8g2_draw_string+0x92>
    20b0:	8e 3f       	cpi	r24, 0xFE	; 254
    20b2:	2f ef       	ldi	r18, 0xFF	; 255
    20b4:	92 07       	cpc	r25, r18
    20b6:	89 f3       	breq	.-30     	; 0x209a <u8g2_draw_string+0x36>
    20b8:	9c 01       	movw	r18, r24
    20ba:	a6 01       	movw	r20, r12
    20bc:	b5 01       	movw	r22, r10
    20be:	ce 01       	movw	r24, r28
    20c0:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <u8g2_DrawGlyph>
    20c4:	9c 01       	movw	r18, r24
    20c6:	f4 01       	movw	r30, r8
    20c8:	90 81       	ld	r25, Z
    20ca:	91 30       	cpi	r25, 0x01	; 1
    20cc:	49 f0       	breq	.+18     	; 0x20e0 <u8g2_draw_string+0x7c>
    20ce:	28 f0       	brcs	.+10     	; 0x20da <u8g2_draw_string+0x76>
    20d0:	92 30       	cpi	r25, 0x02	; 2
    20d2:	49 f0       	breq	.+18     	; 0x20e6 <u8g2_draw_string+0x82>
    20d4:	93 30       	cpi	r25, 0x03	; 3
    20d6:	51 f0       	breq	.+20     	; 0x20ec <u8g2_draw_string+0x88>
    20d8:	0b c0       	rjmp	.+22     	; 0x20f0 <u8g2_draw_string+0x8c>
    20da:	a2 0e       	add	r10, r18
    20dc:	b3 1e       	adc	r11, r19
    20de:	08 c0       	rjmp	.+16     	; 0x20f0 <u8g2_draw_string+0x8c>
    20e0:	c2 0e       	add	r12, r18
    20e2:	d3 1e       	adc	r13, r19
    20e4:	05 c0       	rjmp	.+10     	; 0x20f0 <u8g2_draw_string+0x8c>
    20e6:	a2 1a       	sub	r10, r18
    20e8:	b3 0a       	sbc	r11, r19
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <u8g2_draw_string+0x8c>
    20ec:	c2 1a       	sub	r12, r18
    20ee:	d3 0a       	sbc	r13, r19
    20f0:	e2 0e       	add	r14, r18
    20f2:	f3 1e       	adc	r15, r19
    20f4:	d2 cf       	rjmp	.-92     	; 0x209a <u8g2_draw_string+0x36>
    20f6:	c7 01       	movw	r24, r14
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	ff 90       	pop	r15
    2102:	ef 90       	pop	r14
    2104:	df 90       	pop	r13
    2106:	cf 90       	pop	r12
    2108:	bf 90       	pop	r11
    210a:	af 90       	pop	r10
    210c:	9f 90       	pop	r9
    210e:	8f 90       	pop	r8
    2110:	08 95       	ret

00002112 <u8g2_DrawStr>:
    2112:	e8 e4       	ldi	r30, 0x48	; 72
    2114:	f3 e1       	ldi	r31, 0x13	; 19
    2116:	dc 01       	movw	r26, r24
    2118:	13 96       	adiw	r26, 0x03	; 3
    211a:	fc 93       	st	X, r31
    211c:	ee 93       	st	-X, r30
    211e:	12 97       	sbiw	r26, 0x02	; 2
    2120:	0e 94 32 10 	call	0x2064	; 0x2064 <u8g2_draw_string>
    2124:	08 95       	ret

00002126 <u8g2_UpdateRefHeight>:
    2126:	fc 01       	movw	r30, r24
    2128:	ec 5b       	subi	r30, 0xBC	; 188
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	20 81       	ld	r18, Z
    212e:	31 81       	ldd	r19, Z+1	; 0x01
    2130:	23 2b       	or	r18, r19
    2132:	e1 f1       	breq	.+120    	; 0x21ac <u8g2_UpdateRefHeight+0x86>
    2134:	b0 96       	adiw	r30, 0x20	; 32
    2136:	20 81       	ld	r18, Z
    2138:	3c 96       	adiw	r30, 0x0c	; 12
    213a:	20 83       	st	Z, r18
    213c:	3b 97       	sbiw	r30, 0x0b	; 11
    213e:	40 81       	ld	r20, Z
    2140:	3c 96       	adiw	r30, 0x0c	; 12
    2142:	40 83       	st	Z, r20
    2144:	32 97       	sbiw	r30, 0x02	; 2
    2146:	30 81       	ld	r19, Z
    2148:	33 23       	and	r19, r19
    214a:	81 f1       	breq	.+96     	; 0x21ac <u8g2_UpdateRefHeight+0x86>
    214c:	31 30       	cpi	r19, 0x01	; 1
    214e:	79 f4       	brne	.+30     	; 0x216e <u8g2_UpdateRefHeight+0x48>
    2150:	39 97       	sbiw	r30, 0x09	; 9
    2152:	30 81       	ld	r19, Z
    2154:	23 17       	cp	r18, r19
    2156:	14 f4       	brge	.+4      	; 0x215c <u8g2_UpdateRefHeight+0x36>
    2158:	3a 96       	adiw	r30, 0x0a	; 10
    215a:	30 83       	st	Z, r19
    215c:	fc 01       	movw	r30, r24
    215e:	e9 59       	subi	r30, 0x99	; 153
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	20 81       	ld	r18, Z
    2164:	24 17       	cp	r18, r20
    2166:	14 f5       	brge	.+68     	; 0x21ac <u8g2_UpdateRefHeight+0x86>
    2168:	3a 96       	adiw	r30, 0x0a	; 10
    216a:	20 83       	st	Z, r18
    216c:	08 95       	ret
    216e:	fc 01       	movw	r30, r24
    2170:	ef 59       	subi	r30, 0x9F	; 159
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	e0 81       	ld	r30, Z
    2176:	dc 01       	movw	r26, r24
    2178:	ad 59       	subi	r26, 0x9D	; 157
    217a:	bf 4f       	sbci	r27, 0xFF	; 255
    217c:	5c 91       	ld	r21, X
    217e:	02 2e       	mov	r0, r18
    2180:	00 0c       	add	r0, r0
    2182:	33 0b       	sbc	r19, r19
    2184:	65 2f       	mov	r22, r21
    2186:	05 2e       	mov	r0, r21
    2188:	00 0c       	add	r0, r0
    218a:	77 0b       	sbc	r23, r23
    218c:	6e 0f       	add	r22, r30
    218e:	71 1d       	adc	r23, r1
    2190:	e7 fd       	sbrc	r30, 7
    2192:	7a 95       	dec	r23
    2194:	26 17       	cp	r18, r22
    2196:	37 07       	cpc	r19, r23
    2198:	1c f4       	brge	.+6      	; 0x21a0 <u8g2_UpdateRefHeight+0x7a>
    219a:	1d 96       	adiw	r26, 0x0d	; 13
    219c:	e5 0f       	add	r30, r21
    219e:	ec 93       	st	X, r30
    21a0:	54 17       	cp	r21, r20
    21a2:	24 f4       	brge	.+8      	; 0x21ac <u8g2_UpdateRefHeight+0x86>
    21a4:	fc 01       	movw	r30, r24
    21a6:	ef 58       	subi	r30, 0x8F	; 143
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	50 83       	st	Z, r21
    21ac:	08 95       	ret

000021ae <u8g2_SetFontPosBaseline>:
    21ae:	8a 5b       	subi	r24, 0xBA	; 186
    21b0:	9f 4f       	sbci	r25, 0xFF	; 255
    21b2:	2f ed       	ldi	r18, 0xDF	; 223
    21b4:	3c e0       	ldi	r19, 0x0C	; 12
    21b6:	fc 01       	movw	r30, r24
    21b8:	31 83       	std	Z+1, r19	; 0x01
    21ba:	20 83       	st	Z, r18
    21bc:	08 95       	ret

000021be <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
  if ( u8g2->font != font )
    21c2:	fc 01       	movw	r30, r24
    21c4:	ec 5b       	subi	r30, 0xBC	; 188
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	20 81       	ld	r18, Z
    21ca:	31 81       	ldd	r19, Z+1	; 0x01
    21cc:	26 17       	cp	r18, r22
    21ce:	37 07       	cpc	r19, r23
    21d0:	51 f0       	breq	.+20     	; 0x21e6 <u8g2_SetFont+0x28>
    21d2:	ec 01       	movw	r28, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    21d4:	71 83       	std	Z+1, r23	; 0x01
    21d6:	60 83       	st	Z, r22
    u8g2_read_font_info(&(u8g2->font_info), font);
    21d8:	89 5a       	subi	r24, 0xA9	; 169
    21da:	9f 4f       	sbci	r25, 0xFF	; 255
    21dc:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    21e0:	ce 01       	movw	r24, r28
    21e2:	0e 94 93 10 	call	0x2126	; 0x2126 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	08 95       	ret

000021ec <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    21ec:	0f 93       	push	r16
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    21ee:	dc 01       	movw	r26, r24
    21f0:	9a 96       	adiw	r26, 0x2a	; 42
    21f2:	ed 91       	ld	r30, X+
    21f4:	fc 91       	ld	r31, X
    21f6:	9b 97       	sbiw	r26, 0x2b	; 43
    21f8:	4e 1b       	sub	r20, r30
    21fa:	5f 0b       	sbc	r21, r31
    21fc:	5e 96       	adiw	r26, 0x1e	; 30
    21fe:	ed 91       	ld	r30, X+
    2200:	fc 91       	ld	r31, X
    2202:	5f 97       	sbiw	r26, 0x1f	; 31
    2204:	09 95       	icall
}
    2206:	0f 91       	pop	r16
    2208:	08 95       	ret

0000220a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    220a:	ef 92       	push	r14
    220c:	ff 92       	push	r15
    220e:	0f 93       	push	r16
    2210:	1f 93       	push	r17
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	da 01       	movw	r26, r20
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    2218:	fc 01       	movw	r30, r24
    221a:	e2 59       	subi	r30, 0x92	; 146
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	50 81       	ld	r21, Z
    2220:	55 23       	and	r21, r21
    2222:	09 f4       	brne	.+2      	; 0x2226 <u8g2_DrawHVLine+0x1c>
    2224:	83 c0       	rjmp	.+262    	; 0x232c <u8g2_DrawHVLine+0x122>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    2226:	21 15       	cp	r18, r1
    2228:	31 05       	cpc	r19, r1
    222a:	09 f4       	brne	.+2      	; 0x222e <u8g2_DrawHVLine+0x24>
    222c:	7f c0       	rjmp	.+254    	; 0x232c <u8g2_DrawHVLine+0x122>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    222e:	22 30       	cpi	r18, 0x02	; 2
    2230:	31 05       	cpc	r19, r1
    2232:	70 f0       	brcs	.+28     	; 0x2250 <u8g2_DrawHVLine+0x46>
      {
	if ( dir == 2 )
    2234:	02 30       	cpi	r16, 0x02	; 2
    2236:	29 f4       	brne	.+10     	; 0x2242 <u8g2_DrawHVLine+0x38>
    2238:	6f 5f       	subi	r22, 0xFF	; 255
    223a:	7f 4f       	sbci	r23, 0xFF	; 255
	{
	  x -= len;
	  x++;
    223c:	62 1b       	sub	r22, r18
    223e:	73 0b       	sbc	r23, r19
    2240:	0b c0       	rjmp	.+22     	; 0x2258 <u8g2_DrawHVLine+0x4e>
	}
	else if ( dir == 3 )
    2242:	03 30       	cpi	r16, 0x03	; 3
    2244:	29 f4       	brne	.+10     	; 0x2250 <u8g2_DrawHVLine+0x46>
    2246:	11 96       	adiw	r26, 0x01	; 1
	{
	  y -= len;
	  y++;
    2248:	a2 1b       	sub	r26, r18
    224a:	b3 0b       	sbc	r27, r19
	}
      }
      dir &= 1;  
    224c:	f1 e0       	ldi	r31, 0x01	; 1
    224e:	37 c0       	rjmp	.+110    	; 0x22be <u8g2_DrawHVLine+0xb4>
      
      /* clip against the user window */
      if ( dir == 0 )
    2250:	f0 2f       	mov	r31, r16
    2252:	f1 70       	andi	r31, 0x01	; 1
    2254:	00 fd       	sbrc	r16, 0
    2256:	33 c0       	rjmp	.+102    	; 0x22be <u8g2_DrawHVLine+0xb4>
      {
	if ( y < u8g2->user_y0 )
    2258:	ec 01       	movw	r28, r24
    225a:	48 ad       	ldd	r20, Y+56	; 0x38
    225c:	59 ad       	ldd	r21, Y+57	; 0x39
    225e:	a4 17       	cp	r26, r20
    2260:	b5 07       	cpc	r27, r21
    2262:	08 f4       	brcc	.+2      	; 0x2266 <u8g2_DrawHVLine+0x5c>
    2264:	63 c0       	rjmp	.+198    	; 0x232c <u8g2_DrawHVLine+0x122>
	  return;
	if ( y >= u8g2->user_y1 )
    2266:	4a ad       	ldd	r20, Y+58	; 0x3a
    2268:	5b ad       	ldd	r21, Y+59	; 0x3b
    226a:	a4 17       	cp	r26, r20
    226c:	b5 07       	cpc	r27, r21
    226e:	08 f0       	brcs	.+2      	; 0x2272 <u8g2_DrawHVLine+0x68>
    2270:	5d c0       	rjmp	.+186    	; 0x232c <u8g2_DrawHVLine+0x122>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    2272:	4e a9       	ldd	r20, Y+54	; 0x36
    2274:	5f a9       	ldd	r21, Y+55	; 0x37
    2276:	ec a9       	ldd	r30, Y+52	; 0x34
    2278:	fd a9       	ldd	r31, Y+53	; 0x35
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    227a:	26 0f       	add	r18, r22
    227c:	37 1f       	adc	r19, r23
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    227e:	26 17       	cp	r18, r22
    2280:	37 07       	cpc	r19, r23
    2282:	40 f4       	brcc	.+16     	; 0x2294 <u8g2_DrawHVLine+0x8a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    2284:	64 17       	cp	r22, r20
    2286:	75 07       	cpc	r23, r21
    2288:	20 f4       	brcc	.+8      	; 0x2292 <u8g2_DrawHVLine+0x88>
    {
      b = d;
      b--;
    228a:	9a 01       	movw	r18, r20
    228c:	21 50       	subi	r18, 0x01	; 1
    228e:	31 09       	sbc	r19, r1
    2290:	05 c0       	rjmp	.+10     	; 0x229c <u8g2_DrawHVLine+0x92>
    }
    else
    {
      a = c;
    2292:	bf 01       	movw	r22, r30
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    2294:	64 17       	cp	r22, r20
    2296:	75 07       	cpc	r23, r21
    2298:	08 f0       	brcs	.+2      	; 0x229c <u8g2_DrawHVLine+0x92>
    229a:	48 c0       	rjmp	.+144    	; 0x232c <u8g2_DrawHVLine+0x122>
    return 0;
  if ( b <= c )
    229c:	e2 17       	cp	r30, r18
    229e:	f3 07       	cpc	r31, r19
    22a0:	08 f0       	brcs	.+2      	; 0x22a4 <u8g2_DrawHVLine+0x9a>
    22a2:	44 c0       	rjmp	.+136    	; 0x232c <u8g2_DrawHVLine+0x122>
    22a4:	6e 17       	cp	r22, r30
    22a6:	7f 07       	cpc	r23, r31
    22a8:	08 f4       	brcc	.+2      	; 0x22ac <u8g2_DrawHVLine+0xa2>
    22aa:	bf 01       	movw	r22, r30
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    22ac:	24 17       	cp	r18, r20
    22ae:	35 07       	cpc	r19, r21
    22b0:	08 f4       	brcc	.+2      	; 0x22b4 <u8g2_DrawHVLine+0xaa>
    22b2:	a9 01       	movw	r20, r18
    22b4:	9a 01       	movw	r18, r20
    22b6:	26 1b       	sub	r18, r22
    22b8:	37 0b       	sbc	r19, r23
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	2d c0       	rjmp	.+90     	; 0x2318 <u8g2_DrawHVLine+0x10e>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    22be:	ec 01       	movw	r28, r24
    22c0:	4c a9       	ldd	r20, Y+52	; 0x34
    22c2:	5d a9       	ldd	r21, Y+53	; 0x35
    22c4:	64 17       	cp	r22, r20
    22c6:	75 07       	cpc	r23, r21
    22c8:	88 f1       	brcs	.+98     	; 0x232c <u8g2_DrawHVLine+0x122>
	  return;
	if ( x >= u8g2->user_x1 )
    22ca:	4e a9       	ldd	r20, Y+54	; 0x36
    22cc:	5f a9       	ldd	r21, Y+55	; 0x37
    22ce:	64 17       	cp	r22, r20
    22d0:	75 07       	cpc	r23, r21
    22d2:	60 f5       	brcc	.+88     	; 0x232c <u8g2_DrawHVLine+0x122>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    22d4:	4a ad       	ldd	r20, Y+58	; 0x3a
    22d6:	5b ad       	ldd	r21, Y+59	; 0x3b
    22d8:	08 ad       	ldd	r16, Y+56	; 0x38
    22da:	19 ad       	ldd	r17, Y+57	; 0x39
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    22dc:	2a 0f       	add	r18, r26
    22de:	3b 1f       	adc	r19, r27
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    22e0:	2a 17       	cp	r18, r26
    22e2:	3b 07       	cpc	r19, r27
    22e4:	40 f4       	brcc	.+16     	; 0x22f6 <u8g2_DrawHVLine+0xec>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    22e6:	a4 17       	cp	r26, r20
    22e8:	b5 07       	cpc	r27, r21
    22ea:	20 f4       	brcc	.+8      	; 0x22f4 <u8g2_DrawHVLine+0xea>
    {
      b = d;
      b--;
    22ec:	9a 01       	movw	r18, r20
    22ee:	21 50       	subi	r18, 0x01	; 1
    22f0:	31 09       	sbc	r19, r1
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <u8g2_DrawHVLine+0xf2>
    }
    else
    {
      a = c;
    22f4:	d8 01       	movw	r26, r16
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    22f6:	a4 17       	cp	r26, r20
    22f8:	b5 07       	cpc	r27, r21
    22fa:	c0 f4       	brcc	.+48     	; 0x232c <u8g2_DrawHVLine+0x122>
    return 0;
  if ( b <= c )
    22fc:	02 17       	cp	r16, r18
    22fe:	13 07       	cpc	r17, r19
    2300:	a8 f4       	brcc	.+42     	; 0x232c <u8g2_DrawHVLine+0x122>
    2302:	a0 17       	cp	r26, r16
    2304:	b1 07       	cpc	r27, r17
    2306:	08 f4       	brcc	.+2      	; 0x230a <u8g2_DrawHVLine+0x100>
    2308:	d8 01       	movw	r26, r16
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    230a:	24 17       	cp	r18, r20
    230c:	35 07       	cpc	r19, r21
    230e:	08 f4       	brcc	.+2      	; 0x2312 <u8g2_DrawHVLine+0x108>
    2310:	a9 01       	movw	r20, r18
    2312:	9a 01       	movw	r18, r20
    2314:	2a 1b       	sub	r18, r26
    2316:	3b 0b       	sbc	r19, r27
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    2318:	ec 01       	movw	r28, r24
    231a:	48 a1       	ldd	r20, Y+32	; 0x20
    231c:	59 a1       	ldd	r21, Y+33	; 0x21
    231e:	ea 01       	movw	r28, r20
    2320:	ec 80       	ldd	r14, Y+4	; 0x04
    2322:	fd 80       	ldd	r15, Y+5	; 0x05
    2324:	0f 2f       	mov	r16, r31
    2326:	ad 01       	movw	r20, r26
    2328:	f7 01       	movw	r30, r14
    232a:	09 95       	icall
    }
}
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	ff 90       	pop	r15
    2336:	ef 90       	pop	r14
    2338:	08 95       	ret

0000233a <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    233a:	46 17       	cp	r20, r22
    233c:	57 07       	cpc	r21, r23
    233e:	48 f4       	brcc	.+18     	; 0x2352 <u8g2_is_intersection_decision_tree+0x18>
  {
    if ( v1 > a0 )	// v1 >= a0
    2340:	82 17       	cp	r24, r18
    2342:	93 07       	cpc	r25, r19
    2344:	78 f0       	brcs	.+30     	; 0x2364 <u8g2_is_intersection_decision_tree+0x2a>
    {
      return 1;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	24 17       	cp	r18, r20
    234a:	35 07       	cpc	r19, r21
    234c:	70 f0       	brcs	.+28     	; 0x236a <u8g2_is_intersection_decision_tree+0x30>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    2352:	82 17       	cp	r24, r18
    2354:	93 07       	cpc	r25, r19
    2356:	40 f4       	brcc	.+16     	; 0x2368 <u8g2_is_intersection_decision_tree+0x2e>
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	24 17       	cp	r18, r20
    235c:	35 07       	cpc	r19, r21
    235e:	28 f0       	brcs	.+10     	; 0x236a <u8g2_is_intersection_decision_tree+0x30>
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	08 95       	ret
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    2368:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
}
    236a:	08 95       	ret

0000236c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    236c:	cf 92       	push	r12
    236e:	df 92       	push	r13
    2370:	ef 92       	push	r14
    2372:	ff 92       	push	r15
    2374:	0f 93       	push	r16
    2376:	1f 93       	push	r17
    2378:	cf 93       	push	r28
    237a:	df 93       	push	r29
    237c:	ec 01       	movw	r28, r24
    237e:	7b 01       	movw	r14, r22
    2380:	69 01       	movw	r12, r18
    2382:	98 01       	movw	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    2384:	6a ad       	ldd	r22, Y+58	; 0x3a
    2386:	7b ad       	ldd	r23, Y+59	; 0x3b
    2388:	88 ad       	ldd	r24, Y+56	; 0x38
    238a:	99 ad       	ldd	r25, Y+57	; 0x39
    238c:	0e 94 9d 11 	call	0x233a	; 0x233a <u8g2_is_intersection_decision_tree>
    2390:	88 23       	and	r24, r24
    2392:	41 f0       	breq	.+16     	; 0x23a4 <u8g2_IsIntersection+0x38>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    2394:	6e a9       	ldd	r22, Y+54	; 0x36
    2396:	7f a9       	ldd	r23, Y+55	; 0x37
    2398:	96 01       	movw	r18, r12
    239a:	a7 01       	movw	r20, r14
    239c:	8c a9       	ldd	r24, Y+52	; 0x34
    239e:	9d a9       	ldd	r25, Y+53	; 0x35
    23a0:	0e 94 9d 11 	call	0x233a	; 0x233a <u8g2_is_intersection_decision_tree>
}
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	1f 91       	pop	r17
    23aa:	0f 91       	pop	r16
    23ac:	ff 90       	pop	r15
    23ae:	ef 90       	pop	r14
    23b0:	df 90       	pop	r13
    23b2:	cf 90       	pop	r12
    23b4:	08 95       	ret

000023b6 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    23b6:	cf 92       	push	r12
    23b8:	df 92       	push	r13
    23ba:	ff 92       	push	r15
    23bc:	0f 93       	push	r16
    23be:	1f 93       	push	r17
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	6c 01       	movw	r12, r24
    23c6:	d9 01       	movw	r26, r18
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    23c8:	34 2f       	mov	r19, r20
    23ca:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	03 2e       	mov	r0, r19
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <u8g2_ll_hvline_vertical_top_lsb+0x22>
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	0a 94       	dec	r0
    23da:	e2 f7       	brpl	.-8      	; 0x23d4 <u8g2_ll_hvline_vertical_top_lsb+0x1e>
    23dc:	18 2f       	mov	r17, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    23de:	f6 01       	movw	r30, r12
    23e0:	ec 58       	subi	r30, 0x8C	; 140
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	20 81       	ld	r18, Z
    23e6:	22 30       	cpi	r18, 0x02	; 2
    23e8:	20 f4       	brcc	.+8      	; 0x23f2 <u8g2_ll_hvline_vertical_top_lsb+0x3c>
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    23ea:	21 30       	cpi	r18, 0x01	; 1
    23ec:	21 f0       	breq	.+8      	; 0x23f6 <u8g2_ll_hvline_vertical_top_lsb+0x40>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    23ee:	28 2f       	mov	r18, r24
    23f0:	04 c0       	rjmp	.+8      	; 0x23fa <u8g2_ll_hvline_vertical_top_lsb+0x44>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <u8g2_ll_hvline_vertical_top_lsb+0x44>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    23f6:	28 2f       	mov	r18, r24
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    23f8:	10 e0       	ldi	r17, 0x00	; 0
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    23fa:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    23fc:	e6 01       	movw	r28, r12
    23fe:	8a a1       	ldd	r24, Y+34	; 0x22
    2400:	9b a1       	ldd	r25, Y+35	; 0x23
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    2402:	e8 81       	ld	r30, Y
    2404:	f9 81       	ldd	r31, Y+1	; 0x01
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    2406:	f0 88       	ldd	r15, Z+16	; 0x10
    2408:	f4 9e       	mul	r15, r20
    240a:	f0 01       	movw	r30, r0
    240c:	f5 9e       	mul	r15, r21
    240e:	f0 0d       	add	r31, r0
    2410:	11 24       	eor	r1, r1
    2412:	6e 0f       	add	r22, r30
    2414:	7f 1f       	adc	r23, r31
    2416:	fc 01       	movw	r30, r24
    2418:	e6 0f       	add	r30, r22
    241a:	f7 1f       	adc	r31, r23
  
  if ( dir == 0 )
    241c:	01 11       	cpse	r16, r1
    241e:	0a c0       	rjmp	.+20     	; 0x2434 <u8g2_ll_hvline_vertical_top_lsb+0x7e>
    2420:	ae 0f       	add	r26, r30
    2422:	bf 1f       	adc	r27, r31
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    2424:	80 81       	ld	r24, Z
    2426:	82 2b       	or	r24, r18
    2428:	81 27       	eor	r24, r17
    242a:	81 93       	st	Z+, r24
	ptr++;
	len--;
      } while( len != 0 );
    242c:	ea 17       	cp	r30, r26
    242e:	fb 07       	cpc	r31, r27
    2430:	c9 f7       	brne	.-14     	; 0x2424 <u8g2_ll_hvline_vertical_top_lsb+0x6e>
    2432:	22 c0       	rjmp	.+68     	; 0x2478 <u8g2_ll_hvline_vertical_top_lsb+0xc2>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    2434:	a6 01       	movw	r20, r12
    2436:	4c 58       	subi	r20, 0x8C	; 140
    2438:	5f 4f       	sbci	r21, 0xFF	; 255
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    243a:	90 81       	ld	r25, Z
    243c:	92 2b       	or	r25, r18
    243e:	91 27       	eor	r25, r17
    2440:	90 83       	st	Z, r25
      
      bit_pos++;
    2442:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    2444:	37 70       	andi	r19, 0x07	; 7

      len--;
    2446:	11 97       	sbiw	r26, 0x01	; 1

      if ( bit_pos == 0 )
    2448:	31 11       	cpse	r19, r1
    244a:	0e c0       	rjmp	.+28     	; 0x2468 <u8g2_ll_hvline_vertical_top_lsb+0xb2>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    244c:	e6 01       	movw	r28, r12
    244e:	8e a1       	ldd	r24, Y+38	; 0x26
    2450:	9f a1       	ldd	r25, Y+39	; 0x27
    2452:	e8 0f       	add	r30, r24
    2454:	f9 1f       	adc	r31, r25
		
	if ( u8g2->draw_color <= 1 )
    2456:	ea 01       	movw	r28, r20
    2458:	98 81       	ld	r25, Y
    245a:	92 30       	cpi	r25, 0x02	; 2
    245c:	40 f4       	brcc	.+16     	; 0x246e <u8g2_ll_hvline_vertical_top_lsb+0xb8>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    245e:	91 30       	cpi	r25, 0x01	; 1
    2460:	41 f0       	breq	.+16     	; 0x2472 <u8g2_ll_hvline_vertical_top_lsb+0xbc>
	  xor_mask = 1;
    2462:	11 e0       	ldi	r17, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    2464:	21 e0       	ldi	r18, 0x01	; 1
    2466:	06 c0       	rjmp	.+12     	; 0x2474 <u8g2_ll_hvline_vertical_top_lsb+0xbe>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    2468:	22 0f       	add	r18, r18
	xor_mask <<= 1;
    246a:	11 0f       	add	r17, r17
    246c:	03 c0       	rjmp	.+6      	; 0x2474 <u8g2_ll_hvline_vertical_top_lsb+0xbe>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    246e:	11 e0       	ldi	r17, 0x01	; 1
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <u8g2_ll_hvline_vertical_top_lsb+0xbe>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    2472:	21 e0       	ldi	r18, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    2474:	10 97       	sbiw	r26, 0x00	; 0
    2476:	09 f7       	brne	.-62     	; 0x243a <u8g2_ll_hvline_vertical_top_lsb+0x84>
  }
}
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	ff 90       	pop	r15
    2482:	df 90       	pop	r13
    2484:	cf 90       	pop	r12
    2486:	08 95       	ret

00002488 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    2488:	cf 93       	push	r28
    248a:	df 93       	push	r29
    248c:	fc 01       	movw	r30, r24
    248e:	a0 81       	ld	r26, Z
    2490:	b1 81       	ldd	r27, Z+1	; 0x01
    2492:	84 a1       	ldd	r24, Z+36	; 0x24
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9c 01       	movw	r18, r24
    2498:	22 0f       	add	r18, r18
    249a:	33 1f       	adc	r19, r19
    249c:	22 0f       	add	r18, r18
    249e:	33 1f       	adc	r19, r19
    24a0:	22 0f       	add	r18, r18
    24a2:	33 1f       	adc	r19, r19
    24a4:	31 a7       	std	Z+41, r19	; 0x29
    24a6:	20 a7       	std	Z+40, r18	; 0x28
    24a8:	50 96       	adiw	r26, 0x10	; 16
    24aa:	2c 91       	ld	r18, X
    24ac:	50 97       	sbiw	r26, 0x10	; 16
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	22 0f       	add	r18, r18
    24b2:	33 1f       	adc	r19, r19
    24b4:	22 0f       	add	r18, r18
    24b6:	33 1f       	adc	r19, r19
    24b8:	22 0f       	add	r18, r18
    24ba:	33 1f       	adc	r19, r19
    24bc:	37 a3       	std	Z+39, r19	; 0x27
    24be:	26 a3       	std	Z+38, r18	; 0x26
    24c0:	75 a1       	ldd	r23, Z+37	; 0x25
    24c2:	47 2f       	mov	r20, r23
    24c4:	50 e0       	ldi	r21, 0x00	; 0
    24c6:	9a 01       	movw	r18, r20
    24c8:	22 0f       	add	r18, r18
    24ca:	33 1f       	adc	r19, r19
    24cc:	22 0f       	add	r18, r18
    24ce:	33 1f       	adc	r19, r19
    24d0:	22 0f       	add	r18, r18
    24d2:	33 1f       	adc	r19, r19
    24d4:	33 a7       	std	Z+43, r19	; 0x2b
    24d6:	22 a7       	std	Z+42, r18	; 0x2a
    24d8:	51 96       	adiw	r26, 0x11	; 17
    24da:	6c 91       	ld	r22, X
    24dc:	51 97       	sbiw	r26, 0x11	; 17
    24de:	48 0f       	add	r20, r24
    24e0:	59 1f       	adc	r21, r25
    24e2:	c6 2f       	mov	r28, r22
    24e4:	d0 e0       	ldi	r29, 0x00	; 0
    24e6:	c4 17       	cp	r28, r20
    24e8:	d5 07       	cpc	r29, r21
    24ea:	18 f4       	brcc	.+6      	; 0x24f2 <u8g2_update_dimension_common+0x6a>
    24ec:	ce 01       	movw	r24, r28
    24ee:	87 1b       	sub	r24, r23
    24f0:	91 09       	sbc	r25, r1
    24f2:	35 a7       	std	Z+45, r19	; 0x2d
    24f4:	24 a7       	std	Z+44, r18	; 0x2c
    24f6:	88 0f       	add	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	82 0f       	add	r24, r18
    2504:	93 1f       	adc	r25, r19
    2506:	97 a7       	std	Z+47, r25	; 0x2f
    2508:	86 a7       	std	Z+46, r24	; 0x2e
    250a:	54 96       	adiw	r26, 0x14	; 20
    250c:	8d 91       	ld	r24, X+
    250e:	9c 91       	ld	r25, X
    2510:	55 97       	sbiw	r26, 0x15	; 21
    2512:	91 ab       	std	Z+49, r25	; 0x31
    2514:	80 ab       	std	Z+48, r24	; 0x30
    2516:	56 96       	adiw	r26, 0x16	; 22
    2518:	8d 91       	ld	r24, X+
    251a:	9c 91       	ld	r25, X
    251c:	57 97       	sbiw	r26, 0x17	; 23
    251e:	93 ab       	std	Z+51, r25	; 0x33
    2520:	82 ab       	std	Z+50, r24	; 0x32
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	08 95       	ret

00002528 <u8g2_update_dimension_r0>:
    2528:	0e 94 44 12 	call	0x2488	; 0x2488 <u8g2_update_dimension_common>
    252c:	08 95       	ret

0000252e <u8g2_apply_clip_window>:
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	ec 01       	movw	r28, r24
    2538:	fc 01       	movw	r30, r24
    253a:	ee 5b       	subi	r30, 0xBE	; 190
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	00 81       	ld	r16, Z
    2540:	11 81       	ldd	r17, Z+1	; 0x01
    2542:	2e ad       	ldd	r18, Y+62	; 0x3e
    2544:	3f ad       	ldd	r19, Y+63	; 0x3f
    2546:	32 97       	sbiw	r30, 0x02	; 2
    2548:	40 81       	ld	r20, Z
    254a:	51 81       	ldd	r21, Z+1	; 0x01
    254c:	6c ad       	ldd	r22, Y+60	; 0x3c
    254e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2550:	0e 94 b6 11 	call	0x236c	; 0x236c <u8g2_IsIntersection>
    2554:	81 11       	cpse	r24, r1
    2556:	04 c0       	rjmp	.+8      	; 0x2560 <u8g2_apply_clip_window+0x32>
    2558:	c2 59       	subi	r28, 0x92	; 146
    255a:	df 4f       	sbci	r29, 0xFF	; 255
    255c:	18 82       	st	Y, r1
    255e:	2f c0       	rjmp	.+94     	; 0x25be <u8g2_apply_clip_window+0x90>
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	fe 01       	movw	r30, r28
    2564:	e2 59       	subi	r30, 0x92	; 146
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 83       	st	Z, r24
    256a:	8c ad       	ldd	r24, Y+60	; 0x3c
    256c:	9d ad       	ldd	r25, Y+61	; 0x3d
    256e:	2c a9       	ldd	r18, Y+52	; 0x34
    2570:	3d a9       	ldd	r19, Y+53	; 0x35
    2572:	28 17       	cp	r18, r24
    2574:	39 07       	cpc	r19, r25
    2576:	10 f4       	brcc	.+4      	; 0x257c <u8g2_apply_clip_window+0x4e>
    2578:	9d ab       	std	Y+53, r25	; 0x35
    257a:	8c ab       	std	Y+52, r24	; 0x34
    257c:	8e ad       	ldd	r24, Y+62	; 0x3e
    257e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2580:	2e a9       	ldd	r18, Y+54	; 0x36
    2582:	3f a9       	ldd	r19, Y+55	; 0x37
    2584:	82 17       	cp	r24, r18
    2586:	93 07       	cpc	r25, r19
    2588:	10 f4       	brcc	.+4      	; 0x258e <u8g2_apply_clip_window+0x60>
    258a:	9f ab       	std	Y+55, r25	; 0x37
    258c:	8e ab       	std	Y+54, r24	; 0x36
    258e:	fe 01       	movw	r30, r28
    2590:	e0 5c       	subi	r30, 0xC0	; 192
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	91 81       	ldd	r25, Z+1	; 0x01
    2598:	28 ad       	ldd	r18, Y+56	; 0x38
    259a:	39 ad       	ldd	r19, Y+57	; 0x39
    259c:	28 17       	cp	r18, r24
    259e:	39 07       	cpc	r19, r25
    25a0:	10 f4       	brcc	.+4      	; 0x25a6 <u8g2_apply_clip_window+0x78>
    25a2:	99 af       	std	Y+57, r25	; 0x39
    25a4:	88 af       	std	Y+56, r24	; 0x38
    25a6:	fe 01       	movw	r30, r28
    25a8:	ee 5b       	subi	r30, 0xBE	; 190
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	80 81       	ld	r24, Z
    25ae:	91 81       	ldd	r25, Z+1	; 0x01
    25b0:	2a ad       	ldd	r18, Y+58	; 0x3a
    25b2:	3b ad       	ldd	r19, Y+59	; 0x3b
    25b4:	82 17       	cp	r24, r18
    25b6:	93 07       	cpc	r25, r19
    25b8:	10 f4       	brcc	.+4      	; 0x25be <u8g2_apply_clip_window+0x90>
    25ba:	9b af       	std	Y+59, r25	; 0x3b
    25bc:	8a af       	std	Y+58, r24	; 0x3a
    25be:	df 91       	pop	r29
    25c0:	cf 91       	pop	r28
    25c2:	1f 91       	pop	r17
    25c4:	0f 91       	pop	r16
    25c6:	08 95       	ret

000025c8 <u8g2_update_page_win_r0>:
    25c8:	fc 01       	movw	r30, r24
    25ca:	15 aa       	std	Z+53, r1	; 0x35
    25cc:	14 aa       	std	Z+52, r1	; 0x34
    25ce:	80 a9       	ldd	r24, Z+48	; 0x30
    25d0:	91 a9       	ldd	r25, Z+49	; 0x31
    25d2:	97 ab       	std	Z+55, r25	; 0x37
    25d4:	86 ab       	std	Z+54, r24	; 0x36
    25d6:	84 a5       	ldd	r24, Z+44	; 0x2c
    25d8:	95 a5       	ldd	r25, Z+45	; 0x2d
    25da:	91 af       	std	Z+57, r25	; 0x39
    25dc:	80 af       	std	Z+56, r24	; 0x38
    25de:	86 a5       	ldd	r24, Z+46	; 0x2e
    25e0:	97 a5       	ldd	r25, Z+47	; 0x2f
    25e2:	93 af       	std	Z+59, r25	; 0x3b
    25e4:	82 af       	std	Z+58, r24	; 0x3a
    25e6:	cf 01       	movw	r24, r30
    25e8:	0e 94 97 12 	call	0x252e	; 0x252e <u8g2_apply_clip_window>
    25ec:	08 95       	ret

000025ee <u8g2_draw_l90_r0>:
    25ee:	0f 93       	push	r16
    25f0:	0e 94 f6 10 	call	0x21ec	; 0x21ec <u8g2_draw_hv_line_2dir>
    25f4:	0f 91       	pop	r16
    25f6:	08 95       	ret

000025f8 <u8g2_SetMaxClipWindow>:
    25f8:	dc 01       	movw	r26, r24
    25fa:	dd 96       	adiw	r26, 0x3d	; 61
    25fc:	1c 92       	st	X, r1
    25fe:	1e 92       	st	-X, r1
    2600:	dc 97       	sbiw	r26, 0x3c	; 60
    2602:	fc 01       	movw	r30, r24
    2604:	e0 5c       	subi	r30, 0xC0	; 192
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	11 82       	std	Z+1, r1	; 0x01
    260a:	10 82       	st	Z, r1
    260c:	2f ef       	ldi	r18, 0xFF	; 255
    260e:	3f ef       	ldi	r19, 0xFF	; 255
    2610:	fc 01       	movw	r30, r24
    2612:	37 af       	std	Z+63, r19	; 0x3f
    2614:	26 af       	std	Z+62, r18	; 0x3e
    2616:	ee 5b       	subi	r30, 0xBE	; 190
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	31 83       	std	Z+1, r19	; 0x01
    261c:	20 83       	st	Z, r18
    261e:	90 96       	adiw	r26, 0x20	; 32
    2620:	ed 91       	ld	r30, X+
    2622:	fc 91       	ld	r31, X
    2624:	91 97       	sbiw	r26, 0x21	; 33
    2626:	02 80       	ldd	r0, Z+2	; 0x02
    2628:	f3 81       	ldd	r31, Z+3	; 0x03
    262a:	e0 2d       	mov	r30, r0
    262c:	09 95       	icall
    262e:	08 95       	ret

00002630 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    263a:	fc 01       	movw	r30, r24
    263c:	ec 5b       	subi	r30, 0xBC	; 188
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	11 82       	std	Z+1, r1	; 0x01
    2642:	10 82       	st	Z, r1
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    2644:	3f 8f       	std	Y+31, r19	; 0x1f
    2646:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    2648:	7b a3       	std	Y+35, r23	; 0x23
    264a:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    264c:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    264e:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    2650:	3f 96       	adiw	r30, 0x0f	; 15
    2652:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    2654:	b0 96       	adiw	r30, 0x20	; 32
    2656:	10 82       	st	Z, r1
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    2658:	34 97       	sbiw	r30, 0x04	; 4
    265a:	10 82       	st	Z, r1
  u8g2->draw_color = 1;
    265c:	35 96       	adiw	r30, 0x05	; 5
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    2662:	31 96       	adiw	r30, 0x01	; 1
    2664:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    2666:	19 a3       	std	Y+33, r17	; 0x21
    2668:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    266a:	d8 01       	movw	r26, r16
    266c:	ed 91       	ld	r30, X+
    266e:	fc 91       	ld	r31, X
    2670:	ce 01       	movw	r24, r28
    2672:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    2674:	ce 01       	movw	r24, r28
    2676:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    267a:	ce 01       	movw	r24, r28
    267c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    2680:	ca 5a       	subi	r28, 0xAA	; 170
    2682:	df 4f       	sbci	r29, 0xFF	; 255
    2684:	18 82       	st	Y, r1
#endif
}
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	08 95       	ret

00002690 <u8x8_ascii_next>:
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    2690:	66 23       	and	r22, r22
    2692:	29 f0       	breq	.+10     	; 0x269e <u8x8_ascii_next+0xe>
    2694:	6a 30       	cpi	r22, 0x0A	; 10
    2696:	31 f0       	breq	.+12     	; 0x26a4 <u8x8_ascii_next+0x14>
    2698:	86 2f       	mov	r24, r22
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	08 95       	ret
    269e:	8f ef       	ldi	r24, 0xFF	; 255
    26a0:	9f ef       	ldi	r25, 0xFF	; 255
    26a2:	08 95       	ret
    26a4:	8f ef       	ldi	r24, 0xFF	; 255
    26a6:	9f ef       	ldi	r25, 0xFF	; 255
    26a8:	08 95       	ret

000026aa <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    26aa:	fc 01       	movw	r30, r24
    26ac:	10 8e       	std	Z+24, r1	; 0x18
    26ae:	08 95       	ret

000026b0 <u8x8_byte_SendBytes>:
      break;
    default:
      return 0;
  }
  return 1;
}
    26b0:	9a 01       	movw	r18, r20
    26b2:	dc 01       	movw	r26, r24
    26b4:	18 96       	adiw	r26, 0x08	; 8
    26b6:	ed 91       	ld	r30, X+
    26b8:	fc 91       	ld	r31, X
    26ba:	19 97       	sbiw	r26, 0x09	; 9
    26bc:	46 2f       	mov	r20, r22
    26be:	67 e1       	ldi	r22, 0x17	; 23
    26c0:	09 95       	icall
    26c2:	08 95       	ret

000026c4 <u8x8_byte_SendByte>:
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	1f 92       	push	r1
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	69 83       	std	Y+1, r22	; 0x01
    26d0:	ae 01       	movw	r20, r28
    26d2:	4f 5f       	subi	r20, 0xFF	; 255
    26d4:	5f 4f       	sbci	r21, 0xFF	; 255
    26d6:	61 e0       	ldi	r22, 0x01	; 1
    26d8:	0e 94 58 13 	call	0x26b0	; 0x26b0 <u8x8_byte_SendBytes>
    26dc:	0f 90       	pop	r0
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	08 95       	ret

000026e4 <u8x8_byte_StartTransfer>:
    26e4:	dc 01       	movw	r26, r24
    26e6:	18 96       	adiw	r26, 0x08	; 8
    26e8:	ed 91       	ld	r30, X+
    26ea:	fc 91       	ld	r31, X
    26ec:	19 97       	sbiw	r26, 0x09	; 9
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	68 e1       	ldi	r22, 0x18	; 24
    26f6:	09 95       	icall
    26f8:	08 95       	ret

000026fa <u8x8_byte_EndTransfer>:
    26fa:	dc 01       	movw	r26, r24
    26fc:	18 96       	adiw	r26, 0x08	; 8
    26fe:	ed 91       	ld	r30, X+
    2700:	fc 91       	ld	r31, X
    2702:	19 97       	sbiw	r26, 0x09	; 9
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	69 e1       	ldi	r22, 0x19	; 25
    270c:	09 95       	icall
    270e:	08 95       	ret

00002710 <u8x8_byte_sw_i2c>:
  /* 1: nothing happend during ack cycle */  
  i2c_read_bit(u8x8);
}

uint8_t u8x8_byte_sw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2710:	d9 01       	movw	r26, r18
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes */
	static uint8_t buf_idx;
	uint8_t *data;
	
	switch(msg)
    2712:	68 31       	cpi	r22, 0x18	; 24
    2714:	f1 f0       	breq	.+60     	; 0x2752 <u8x8_byte_sw_i2c+0x42>
    2716:	28 f4       	brcc	.+10     	; 0x2722 <u8x8_byte_sw_i2c+0x12>
    2718:	64 31       	cpi	r22, 0x14	; 20
    271a:	39 f0       	breq	.+14     	; 0x272a <u8x8_byte_sw_i2c+0x1a>
    271c:	67 31       	cpi	r22, 0x17	; 23
    271e:	39 f0       	breq	.+14     	; 0x272e <u8x8_byte_sw_i2c+0x1e>
    2720:	28 c0       	rjmp	.+80     	; 0x2772 <u8x8_byte_sw_i2c+0x62>
    2722:	69 31       	cpi	r22, 0x19	; 25
    2724:	d1 f0       	breq	.+52     	; 0x275a <u8x8_byte_sw_i2c+0x4a>
    2726:	60 32       	cpi	r22, 0x20	; 32
    2728:	21 f5       	brne	.+72     	; 0x2772 <u8x8_byte_sw_i2c+0x62>
		i2c_transfer(u8x8, u8x8_GetI2CAddress(u8x8), buf_idx, buffer);
		break;
		default:
		return 0;
	}
	return 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	08 95       	ret
	
	switch(msg)
	{
		case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
		while( arg_int > 0 )
    272e:	44 23       	and	r20, r20
    2730:	11 f1       	breq	.+68     	; 0x2776 <u8x8_byte_sw_i2c+0x66>
    2732:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <buf_idx.3608>
    2736:	48 0f       	add	r20, r24
		{
			buffer[buf_idx++] = *data;
    2738:	9d 91       	ld	r25, X+
    273a:	e8 2f       	mov	r30, r24
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	eb 5a       	subi	r30, 0xAB	; 171
    2740:	fa 4f       	sbci	r31, 0xFA	; 250
    2742:	90 83       	st	Z, r25
    2744:	8f 5f       	subi	r24, 0xFF	; 255
	
	switch(msg)
	{
		case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
		while( arg_int > 0 )
    2746:	48 13       	cpse	r20, r24
    2748:	f7 cf       	rjmp	.-18     	; 0x2738 <u8x8_byte_sw_i2c+0x28>
    274a:	40 93 75 05 	sts	0x0575, r20	; 0x800575 <buf_idx.3608>
		i2c_transfer(u8x8, u8x8_GetI2CAddress(u8x8), buf_idx, buffer);
		break;
		default:
		return 0;
	}
	return 1;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	08 95       	ret
		break;
		case U8X8_MSG_BYTE_SET_DC:
		/* ignored for i2c */
		break;
		case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
    2752:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <buf_idx.3608>
		i2c_transfer(u8x8, u8x8_GetI2CAddress(u8x8), buf_idx, buffer);
		break;
		default:
		return 0;
	}
	return 1;
    2756:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_SET_DC:
		/* ignored for i2c */
		break;
		case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
		break;
    2758:	08 95       	ret
  //i2c_start(u8x8);
  //i2c_write_byte(u8x8, adr);
  //for( i = 0; i < cnt; i++ )
    //i2c_write_byte(u8x8, data[i]);
  //i2c_stop(u8x8);  
  twi_transfer(adr, data, cnt);
    275a:	40 91 75 05 	lds	r20, 0x0575	; 0x800575 <buf_idx.3608>
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	fc 01       	movw	r30, r24
    2762:	86 89       	ldd	r24, Z+22	; 0x16
    2764:	65 e5       	ldi	r22, 0x55	; 85
    2766:	75 e0       	ldi	r23, 0x05	; 5
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <twi_transfer>
		i2c_transfer(u8x8, u8x8_GetI2CAddress(u8x8), buf_idx, buffer);
		break;
		default:
		return 0;
	}
	return 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	08 95       	ret
		break;
		case U8X8_MSG_BYTE_END_TRANSFER:
		i2c_transfer(u8x8, u8x8_GetI2CAddress(u8x8), buf_idx, buffer);
		break;
		default:
		return 0;
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	08 95       	ret
	}
	return 1;
    2776:	81 e0       	ldi	r24, 0x01	; 1
}
    2778:	08 95       	ret

0000277a <u8x8_i2c_data_transfer>:
      break;
    default:
      return 0;
  }
  return 1;
}
    277a:	ef 92       	push	r14
    277c:	ff 92       	push	r15
    277e:	1f 93       	push	r17
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	ec 01       	movw	r28, r24
    2786:	16 2f       	mov	r17, r22
    2788:	7a 01       	movw	r14, r20
    278a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <u8x8_byte_StartTransfer>
    278e:	60 e4       	ldi	r22, 0x40	; 64
    2790:	ce 01       	movw	r24, r28
    2792:	0e 94 62 13 	call	0x26c4	; 0x26c4 <u8x8_byte_SendByte>
    2796:	e8 85       	ldd	r30, Y+8	; 0x08
    2798:	f9 85       	ldd	r31, Y+9	; 0x09
    279a:	97 01       	movw	r18, r14
    279c:	41 2f       	mov	r20, r17
    279e:	67 e1       	ldi	r22, 0x17	; 23
    27a0:	ce 01       	movw	r24, r28
    27a2:	09 95       	icall
    27a4:	ce 01       	movw	r24, r28
    27a6:	0e 94 7d 13 	call	0x26fa	; 0x26fa <u8x8_byte_EndTransfer>
    27aa:	df 91       	pop	r29
    27ac:	cf 91       	pop	r28
    27ae:	1f 91       	pop	r17
    27b0:	ff 90       	pop	r15
    27b2:	ef 90       	pop	r14
    27b4:	08 95       	ret

000027b6 <u8x8_cad_SendCmd>:
    27b6:	46 2f       	mov	r20, r22
    27b8:	dc 01       	movw	r26, r24
    27ba:	16 96       	adiw	r26, 0x06	; 6
    27bc:	ed 91       	ld	r30, X+
    27be:	fc 91       	ld	r31, X
    27c0:	17 97       	sbiw	r26, 0x07	; 7
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	65 e1       	ldi	r22, 0x15	; 21
    27c8:	09 95       	icall
    27ca:	08 95       	ret

000027cc <u8x8_cad_SendArg>:
    27cc:	46 2f       	mov	r20, r22
    27ce:	dc 01       	movw	r26, r24
    27d0:	16 96       	adiw	r26, 0x06	; 6
    27d2:	ed 91       	ld	r30, X+
    27d4:	fc 91       	ld	r31, X
    27d6:	17 97       	sbiw	r26, 0x07	; 7
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	66 e1       	ldi	r22, 0x16	; 22
    27de:	09 95       	icall
    27e0:	08 95       	ret

000027e2 <u8x8_cad_SendData>:
    27e2:	9a 01       	movw	r18, r20
    27e4:	dc 01       	movw	r26, r24
    27e6:	16 96       	adiw	r26, 0x06	; 6
    27e8:	ed 91       	ld	r30, X+
    27ea:	fc 91       	ld	r31, X
    27ec:	17 97       	sbiw	r26, 0x07	; 7
    27ee:	46 2f       	mov	r20, r22
    27f0:	67 e1       	ldi	r22, 0x17	; 23
    27f2:	09 95       	icall
    27f4:	08 95       	ret

000027f6 <u8x8_cad_StartTransfer>:
    27f6:	dc 01       	movw	r26, r24
    27f8:	16 96       	adiw	r26, 0x06	; 6
    27fa:	ed 91       	ld	r30, X+
    27fc:	fc 91       	ld	r31, X
    27fe:	17 97       	sbiw	r26, 0x07	; 7
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	68 e1       	ldi	r22, 0x18	; 24
    2808:	09 95       	icall
    280a:	08 95       	ret

0000280c <u8x8_cad_EndTransfer>:
    280c:	dc 01       	movw	r26, r24
    280e:	16 96       	adiw	r26, 0x06	; 6
    2810:	ed 91       	ld	r30, X+
    2812:	fc 91       	ld	r31, X
    2814:	17 97       	sbiw	r26, 0x07	; 7
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	69 e1       	ldi	r22, 0x19	; 25
    281e:	09 95       	icall
    2820:	08 95       	ret

00002822 <u8x8_cad_SendSequence>:
    2822:	ef 92       	push	r14
    2824:	ff 92       	push	r15
    2826:	0f 93       	push	r16
    2828:	1f 93       	push	r17
    282a:	cf 93       	push	r28
    282c:	df 93       	push	r29
    282e:	1f 92       	push	r1
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	7c 01       	movw	r14, r24
    2836:	8b 01       	movw	r16, r22
    2838:	d8 01       	movw	r26, r16
    283a:	6c 91       	ld	r22, X
    283c:	67 31       	cpi	r22, 0x17	; 23
    283e:	c1 f0       	breq	.+48     	; 0x2870 <u8x8_cad_SendSequence+0x4e>
    2840:	18 f4       	brcc	.+6      	; 0x2848 <u8x8_cad_SendSequence+0x26>
    2842:	65 31       	cpi	r22, 0x15	; 21
    2844:	30 f4       	brcc	.+12     	; 0x2852 <u8x8_cad_SendSequence+0x30>
    2846:	38 c0       	rjmp	.+112    	; 0x28b8 <u8x8_cad_SendSequence+0x96>
    2848:	6a 31       	cpi	r22, 0x1A	; 26
    284a:	f8 f0       	brcs	.+62     	; 0x288a <u8x8_cad_SendSequence+0x68>
    284c:	6e 3f       	cpi	r22, 0xFE	; 254
    284e:	51 f1       	breq	.+84     	; 0x28a4 <u8x8_cad_SendSequence+0x82>
    2850:	33 c0       	rjmp	.+102    	; 0x28b8 <u8x8_cad_SendSequence+0x96>
    2852:	f8 01       	movw	r30, r16
    2854:	41 81       	ldd	r20, Z+1	; 0x01
    2856:	49 83       	std	Y+1, r20	; 0x01
    2858:	d7 01       	movw	r26, r14
    285a:	16 96       	adiw	r26, 0x06	; 6
    285c:	ed 91       	ld	r30, X+
    285e:	fc 91       	ld	r31, X
    2860:	17 97       	sbiw	r26, 0x07	; 7
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	c7 01       	movw	r24, r14
    2868:	09 95       	icall
    286a:	0e 5f       	subi	r16, 0xFE	; 254
    286c:	1f 4f       	sbci	r17, 0xFF	; 255
    286e:	e4 cf       	rjmp	.-56     	; 0x2838 <u8x8_cad_SendSequence+0x16>
    2870:	f8 01       	movw	r30, r16
    2872:	81 81       	ldd	r24, Z+1	; 0x01
    2874:	89 83       	std	Y+1, r24	; 0x01
    2876:	ae 01       	movw	r20, r28
    2878:	4f 5f       	subi	r20, 0xFF	; 255
    287a:	5f 4f       	sbci	r21, 0xFF	; 255
    287c:	61 e0       	ldi	r22, 0x01	; 1
    287e:	c7 01       	movw	r24, r14
    2880:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <u8x8_cad_SendData>
    2884:	0e 5f       	subi	r16, 0xFE	; 254
    2886:	1f 4f       	sbci	r17, 0xFF	; 255
    2888:	d7 cf       	rjmp	.-82     	; 0x2838 <u8x8_cad_SendSequence+0x16>
    288a:	0f 5f       	subi	r16, 0xFF	; 255
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
    288e:	d7 01       	movw	r26, r14
    2890:	16 96       	adiw	r26, 0x06	; 6
    2892:	ed 91       	ld	r30, X+
    2894:	fc 91       	ld	r31, X
    2896:	17 97       	sbiw	r26, 0x07	; 7
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	c7 01       	movw	r24, r14
    28a0:	09 95       	icall
    28a2:	ca cf       	rjmp	.-108    	; 0x2838 <u8x8_cad_SendSequence+0x16>
    28a4:	f8 01       	movw	r30, r16
    28a6:	41 81       	ldd	r20, Z+1	; 0x01
    28a8:	49 83       	std	Y+1, r20	; 0x01
    28aa:	69 e2       	ldi	r22, 0x29	; 41
    28ac:	c7 01       	movw	r24, r14
    28ae:	0e 94 20 16 	call	0x2c40	; 0x2c40 <u8x8_gpio_call>
    28b2:	0e 5f       	subi	r16, 0xFE	; 254
    28b4:	1f 4f       	sbci	r17, 0xFF	; 255
    28b6:	c0 cf       	rjmp	.-128    	; 0x2838 <u8x8_cad_SendSequence+0x16>
    28b8:	0f 90       	pop	r0
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	ff 90       	pop	r15
    28c4:	ef 90       	pop	r14
    28c6:	08 95       	ret

000028c8 <u8x8_cad_ssd13xx_fast_i2c>:


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    28c8:	ef 92       	push	r14
    28ca:	ff 92       	push	r15
    28cc:	0f 93       	push	r16
    28ce:	1f 93       	push	r17
    28d0:	cf 93       	push	r28
    28d2:	7c 01       	movw	r14, r24
    28d4:	c4 2f       	mov	r28, r20
    28d6:	89 01       	movw	r16, r18
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    28d8:	66 31       	cpi	r22, 0x16	; 22
    28da:	29 f1       	breq	.+74     	; 0x2926 <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    28dc:	30 f4       	brcc	.+12     	; 0x28ea <u8x8_cad_ssd13xx_fast_i2c+0x22>
    28de:	64 31       	cpi	r22, 0x14	; 20
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    28e2:	42 c0       	rjmp	.+132    	; 0x2968 <u8x8_cad_ssd13xx_fast_i2c+0xa0>
    28e4:	65 31       	cpi	r22, 0x15	; 21
    28e6:	49 f0       	breq	.+18     	; 0x28fa <u8x8_cad_ssd13xx_fast_i2c+0x32>
    28e8:	62 c0       	rjmp	.+196    	; 0x29ae <u8x8_cad_ssd13xx_fast_i2c+0xe6>
    28ea:	68 31       	cpi	r22, 0x18	; 24
    28ec:	09 f4       	brne	.+2      	; 0x28f0 <u8x8_cad_ssd13xx_fast_i2c+0x28>
    28ee:	50 c0       	rjmp	.+160    	; 0x2990 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
    28f0:	f8 f0       	brcs	.+62     	; 0x2930 <u8x8_cad_ssd13xx_fast_i2c+0x68>
    28f2:	69 31       	cpi	r22, 0x19	; 25
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <u8x8_cad_ssd13xx_fast_i2c+0x30>
    28f6:	50 c0       	rjmp	.+160    	; 0x2998 <u8x8_cad_ssd13xx_fast_i2c+0xd0>
    28f8:	5a c0       	rjmp	.+180    	; 0x29ae <u8x8_cad_ssd13xx_fast_i2c+0xe6>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    28fa:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <in_transfer.3593>
    28fe:	88 23       	and	r24, r24
    2900:	19 f0       	breq	.+6      	; 0x2908 <u8x8_cad_ssd13xx_fast_i2c+0x40>
	 u8x8_byte_EndTransfer(u8x8); 
    2902:	c7 01       	movw	r24, r14
    2904:	0e 94 7d 13 	call	0x26fa	; 0x26fa <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    2908:	c7 01       	movw	r24, r14
    290a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    290e:	60 e0       	ldi	r22, 0x00	; 0
    2910:	c7 01       	movw	r24, r14
    2912:	0e 94 62 13 	call	0x26c4	; 0x26c4 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    2916:	6c 2f       	mov	r22, r28
    2918:	c7 01       	movw	r24, r14
    291a:	0e 94 62 13 	call	0x26c4	; 0x26c4 <u8x8_byte_SendByte>
      in_transfer = 1;
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <in_transfer.3593>
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    2924:	45 c0       	rjmp	.+138    	; 0x29b0 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    2926:	64 2f       	mov	r22, r20
    2928:	0e 94 62 13 	call	0x26c4	; 0x26c4 <u8x8_byte_SendByte>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    292c:	81 e0       	ldi	r24, 0x01	; 1
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    292e:	40 c0       	rjmp	.+128    	; 0x29b0 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    2930:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <in_transfer.3593>
    2934:	88 23       	and	r24, r24
    2936:	19 f0       	breq	.+6      	; 0x293e <u8x8_cad_ssd13xx_fast_i2c+0x76>
	u8x8_byte_EndTransfer(u8x8); 
    2938:	c7 01       	movw	r24, r14
    293a:	0e 94 7d 13 	call	0x26fa	; 0x26fa <u8x8_byte_EndTransfer>
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    293e:	c9 31       	cpi	r28, 0x19	; 25
    2940:	50 f0       	brcs	.+20     	; 0x2956 <u8x8_cad_ssd13xx_fast_i2c+0x8e>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    2942:	a8 01       	movw	r20, r16
    2944:	68 e1       	ldi	r22, 0x18	; 24
    2946:	c7 01       	movw	r24, r14
    2948:	0e 94 bd 13 	call	0x277a	; 0x277a <u8x8_i2c_data_transfer>
	arg_int-=24;
    294c:	c8 51       	subi	r28, 0x18	; 24
	p+=24;
    294e:	08 5e       	subi	r16, 0xE8	; 232
    2950:	1f 4f       	sbci	r17, 0xFF	; 255
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    2952:	c9 31       	cpi	r28, 0x19	; 25
    2954:	b0 f7       	brcc	.-20     	; 0x2942 <u8x8_cad_ssd13xx_fast_i2c+0x7a>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    2956:	a8 01       	movw	r20, r16
    2958:	6c 2f       	mov	r22, r28
    295a:	c7 01       	movw	r24, r14
    295c:	0e 94 bd 13 	call	0x277a	; 0x277a <u8x8_i2c_data_transfer>
      in_transfer = 0;
    2960:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <in_transfer.3593>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    2964:	81 e0       	ldi	r24, 0x01	; 1
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    2966:	24 c0       	rjmp	.+72     	; 0x29b0 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    2968:	dc 01       	movw	r26, r24
    296a:	56 96       	adiw	r26, 0x16	; 22
    296c:	8c 91       	ld	r24, X
    296e:	56 97       	sbiw	r26, 0x16	; 22
    2970:	8f 3f       	cpi	r24, 0xFF	; 255
    2972:	19 f4       	brne	.+6      	; 0x297a <u8x8_cad_ssd13xx_fast_i2c+0xb2>
	u8x8->i2c_address = 0x078;
    2974:	88 e7       	ldi	r24, 0x78	; 120
    2976:	56 96       	adiw	r26, 0x16	; 22
    2978:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    297a:	d7 01       	movw	r26, r14
    297c:	18 96       	adiw	r26, 0x08	; 8
    297e:	ed 91       	ld	r30, X+
    2980:	fc 91       	ld	r31, X
    2982:	19 97       	sbiw	r26, 0x09	; 9
    2984:	98 01       	movw	r18, r16
    2986:	4c 2f       	mov	r20, r28
    2988:	64 e1       	ldi	r22, 0x14	; 20
    298a:	c7 01       	movw	r24, r14
    298c:	09 95       	icall
    298e:	10 c0       	rjmp	.+32     	; 0x29b0 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    2990:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <in_transfer.3593>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    2994:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    2996:	0c c0       	rjmp	.+24     	; 0x29b0 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    2998:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <in_transfer.3593>
    299c:	88 23       	and	r24, r24
    299e:	19 f0       	breq	.+6      	; 0x29a6 <u8x8_cad_ssd13xx_fast_i2c+0xde>
	u8x8_byte_EndTransfer(u8x8); 
    29a0:	c7 01       	movw	r24, r14
    29a2:	0e 94 7d 13 	call	0x26fa	; 0x26fa <u8x8_byte_EndTransfer>
      in_transfer = 0;
    29a6:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <in_transfer.3593>
      break;
    default:
      return 0;
  }
  return 1;
    29aa:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    29ac:	01 c0       	rjmp	.+2      	; 0x29b0 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    default:
      return 0;
    29ae:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    29b0:	cf 91       	pop	r28
    29b2:	1f 91       	pop	r17
    29b4:	0f 91       	pop	r16
    29b6:	ff 90       	pop	r15
    29b8:	ef 90       	pop	r14
    29ba:	08 95       	ret

000029bc <u8x8_d_helper_display_setup_memory>:
*/
void u8x8_InitInterface(u8x8_t *u8x8)
{
  u8x8_gpio_Init(u8x8);
  u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
}
    29bc:	fc 01       	movw	r30, r24
    29be:	71 83       	std	Z+1, r23	; 0x01
    29c0:	60 83       	st	Z, r22
    29c2:	fb 01       	movw	r30, r22
    29c4:	22 89       	ldd	r18, Z+18	; 0x12
    29c6:	fc 01       	movw	r30, r24
    29c8:	24 8b       	std	Z+20, r18	; 0x14
    29ca:	08 95       	ret

000029cc <u8x8_d_helper_display_init>:
    29cc:	cf 93       	push	r28
    29ce:	df 93       	push	r29
    29d0:	ec 01       	movw	r28, r24
    29d2:	ea 85       	ldd	r30, Y+10	; 0x0a
    29d4:	fb 85       	ldd	r31, Y+11	; 0x0b
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	68 e2       	ldi	r22, 0x28	; 40
    29de:	09 95       	icall
    29e0:	ee 81       	ldd	r30, Y+6	; 0x06
    29e2:	ff 81       	ldd	r31, Y+7	; 0x07
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	64 e1       	ldi	r22, 0x14	; 20
    29ec:	ce 01       	movw	r24, r28
    29ee:	09 95       	icall
    29f0:	41 e0       	ldi	r20, 0x01	; 1
    29f2:	6b e4       	ldi	r22, 0x4B	; 75
    29f4:	ce 01       	movw	r24, r28
    29f6:	0e 94 20 16 	call	0x2c40	; 0x2c40 <u8x8_gpio_call>
    29fa:	e8 81       	ld	r30, Y
    29fc:	f9 81       	ldd	r31, Y+1	; 0x01
    29fe:	44 81       	ldd	r20, Z+4	; 0x04
    2a00:	69 e2       	ldi	r22, 0x29	; 41
    2a02:	ce 01       	movw	r24, r28
    2a04:	0e 94 20 16 	call	0x2c40	; 0x2c40 <u8x8_gpio_call>
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	6b e4       	ldi	r22, 0x4B	; 75
    2a0c:	ce 01       	movw	r24, r28
    2a0e:	0e 94 20 16 	call	0x2c40	; 0x2c40 <u8x8_gpio_call>
    2a12:	e8 81       	ld	r30, Y
    2a14:	f9 81       	ldd	r31, Y+1	; 0x01
    2a16:	44 81       	ldd	r20, Z+4	; 0x04
    2a18:	69 e2       	ldi	r22, 0x29	; 41
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <u8x8_gpio_call>
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	6b e4       	ldi	r22, 0x4B	; 75
    2a24:	ce 01       	movw	r24, r28
    2a26:	0e 94 20 16 	call	0x2c40	; 0x2c40 <u8x8_gpio_call>
    2a2a:	e8 81       	ld	r30, Y
    2a2c:	f9 81       	ldd	r31, Y+1	; 0x01
    2a2e:	45 81       	ldd	r20, Z+5	; 0x05
    2a30:	69 e2       	ldi	r22, 0x29	; 41
    2a32:	ce 01       	movw	r24, r28
    2a34:	0e 94 20 16 	call	0x2c40	; 0x2c40 <u8x8_gpio_call>
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	08 95       	ret

00002a3e <u8x8_DrawTile>:
    2a3e:	0f 93       	push	r16
    2a40:	1f 93       	push	r17
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
    2a46:	00 d0       	rcall	.+0      	; 0x2a48 <u8x8_DrawTile+0xa>
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <u8x8_DrawTile+0xc>
    2a4a:	1f 92       	push	r1
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	6c 83       	std	Y+4, r22	; 0x04
    2a52:	4d 83       	std	Y+5, r20	; 0x05
    2a54:	2b 83       	std	Y+3, r18	; 0x03
    2a56:	1a 83       	std	Y+2, r17	; 0x02
    2a58:	09 83       	std	Y+1, r16	; 0x01
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	14 96       	adiw	r26, 0x04	; 4
    2a5e:	ed 91       	ld	r30, X+
    2a60:	fc 91       	ld	r31, X
    2a62:	15 97       	sbiw	r26, 0x05	; 5
    2a64:	9e 01       	movw	r18, r28
    2a66:	2f 5f       	subi	r18, 0xFF	; 255
    2a68:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6a:	41 e0       	ldi	r20, 0x01	; 1
    2a6c:	6f e0       	ldi	r22, 0x0F	; 15
    2a6e:	09 95       	icall
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	df 91       	pop	r29
    2a7c:	cf 91       	pop	r28
    2a7e:	1f 91       	pop	r17
    2a80:	0f 91       	pop	r16
    2a82:	08 95       	ret

00002a84 <u8x8_SetupMemory>:
    2a84:	dc 01       	movw	r26, r24
    2a86:	14 96       	adiw	r26, 0x04	; 4
    2a88:	ed 91       	ld	r30, X+
    2a8a:	fc 91       	ld	r31, X
    2a8c:	15 97       	sbiw	r26, 0x05	; 5
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e0       	ldi	r20, 0x00	; 0
    2a94:	69 e0       	ldi	r22, 0x09	; 9
    2a96:	09 95       	icall
    2a98:	08 95       	ret

00002a9a <u8x8_InitDisplay>:
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	14 96       	adiw	r26, 0x04	; 4
    2a9e:	ed 91       	ld	r30, X+
    2aa0:	fc 91       	ld	r31, X
    2aa2:	15 97       	sbiw	r26, 0x05	; 5
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	6a e0       	ldi	r22, 0x0A	; 10
    2aac:	09 95       	icall
    2aae:	08 95       	ret

00002ab0 <u8x8_SetPowerSave>:
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
    2ab0:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	14 96       	adiw	r26, 0x04	; 4
    2ab6:	ed 91       	ld	r30, X+
    2ab8:	fc 91       	ld	r31, X
    2aba:	15 97       	sbiw	r26, 0x05	; 5
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	6b e0       	ldi	r22, 0x0B	; 11
    2ac2:	09 95       	icall
    2ac4:	08 95       	ret

00002ac6 <u8x8_SetFlipMode>:
}

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
    2ac6:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
    2ac8:	dc 01       	movw	r26, r24
    2aca:	14 96       	adiw	r26, 0x04	; 4
    2acc:	ed 91       	ld	r30, X+
    2ace:	fc 91       	ld	r31, X
    2ad0:	15 97       	sbiw	r26, 0x05	; 5
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	6d e0       	ldi	r22, 0x0D	; 13
    2ad8:	09 95       	icall
    2ada:	08 95       	ret

00002adc <u8x8_SetContrast>:
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
    2adc:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    2ade:	dc 01       	movw	r26, r24
    2ae0:	14 96       	adiw	r26, 0x04	; 4
    2ae2:	ed 91       	ld	r30, X+
    2ae4:	fc 91       	ld	r31, X
    2ae6:	15 97       	sbiw	r26, 0x05	; 5
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	6e e0       	ldi	r22, 0x0E	; 14
    2aee:	09 95       	icall
    2af0:	08 95       	ret

00002af2 <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    2af2:	dc 01       	movw	r26, r24
    2af4:	14 96       	adiw	r26, 0x04	; 4
    2af6:	ed 91       	ld	r30, X+
    2af8:	fc 91       	ld	r31, X
    2afa:	15 97       	sbiw	r26, 0x05	; 5
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	60 e1       	ldi	r22, 0x10	; 16
    2b04:	09 95       	icall
    2b06:	08 95       	ret

00002b08 <u8x8_d_ssd1306_128x32_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2b08:	ef 92       	push	r14
    2b0a:	ff 92       	push	r15
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	8c 01       	movw	r16, r24
    2b16:	c4 2f       	mov	r28, r20
    2b18:	79 01       	movw	r14, r18
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    2b1a:	6d 30       	cpi	r22, 0x0D	; 13
    2b1c:	19 f1       	breq	.+70     	; 0x2b64 <u8x8_d_ssd1306_128x32_generic+0x5c>
    2b1e:	28 f4       	brcc	.+10     	; 0x2b2a <u8x8_d_ssd1306_128x32_generic+0x22>
    2b20:	6a 30       	cpi	r22, 0x0A	; 10
    2b22:	49 f0       	breq	.+18     	; 0x2b36 <u8x8_d_ssd1306_128x32_generic+0x2e>
    2b24:	6b 30       	cpi	r22, 0x0B	; 11
    2b26:	81 f0       	breq	.+32     	; 0x2b48 <u8x8_d_ssd1306_128x32_generic+0x40>
    2b28:	78 c0       	rjmp	.+240    	; 0x2c1a <u8x8_d_ssd1306_128x32_generic+0x112>
    2b2a:	6e 30       	cpi	r22, 0x0E	; 14
    2b2c:	b9 f1       	breq	.+110    	; 0x2b9c <u8x8_d_ssd1306_128x32_generic+0x94>
    2b2e:	6f 30       	cpi	r22, 0x0F	; 15
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <u8x8_d_ssd1306_128x32_generic+0x2c>
    2b32:	43 c0       	rjmp	.+134    	; 0x2bba <u8x8_d_ssd1306_128x32_generic+0xb2>
    2b34:	72 c0       	rjmp	.+228    	; 0x2c1a <u8x8_d_ssd1306_128x32_generic+0x112>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    2b36:	0e 94 e6 14 	call	0x29cc	; 0x29cc <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
    2b3a:	67 e9       	ldi	r22, 0x97	; 151
    2b3c:	72 e0       	ldi	r23, 0x02	; 2
    2b3e:	c8 01       	movw	r24, r16
    2b40:	0e 94 11 14 	call	0x2822	; 0x2822 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
      break;
    2b46:	6a c0       	rjmp	.+212    	; 0x2c1c <u8x8_d_ssd1306_128x32_generic+0x114>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    2b48:	41 11       	cpse	r20, r1
    2b4a:	06 c0       	rjmp	.+12     	; 0x2b58 <u8x8_d_ssd1306_128x32_generic+0x50>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
    2b4c:	62 e9       	ldi	r22, 0x92	; 146
    2b4e:	72 e0       	ldi	r23, 0x02	; 2
    2b50:	0e 94 11 14 	call	0x2822	; 0x2822 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	62 c0       	rjmp	.+196    	; 0x2c1c <u8x8_d_ssd1306_128x32_generic+0x114>
      break;
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
    2b58:	6d e8       	ldi	r22, 0x8D	; 141
    2b5a:	72 e0       	ldi	r23, 0x02	; 2
    2b5c:	0e 94 11 14 	call	0x2822	; 0x2822 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	5c c0       	rjmp	.+184    	; 0x2c1c <u8x8_d_ssd1306_128x32_generic+0x114>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    2b64:	41 11       	cpse	r20, r1
    2b66:	0d c0       	rjmp	.+26     	; 0x2b82 <u8x8_d_ssd1306_128x32_generic+0x7a>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
    2b68:	66 e8       	ldi	r22, 0x86	; 134
    2b6a:	72 e0       	ldi	r23, 0x02	; 2
    2b6c:	0e 94 11 14 	call	0x2822	; 0x2822 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    2b70:	d8 01       	movw	r26, r16
    2b72:	ed 91       	ld	r30, X+
    2b74:	fc 91       	ld	r31, X
    2b76:	11 97       	sbiw	r26, 0x01	; 1
    2b78:	82 89       	ldd	r24, Z+18	; 0x12
    2b7a:	54 96       	adiw	r26, 0x14	; 20
    2b7c:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	4d c0       	rjmp	.+154    	; 0x2c1c <u8x8_d_ssd1306_128x32_generic+0x114>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
    2b82:	6f e7       	ldi	r22, 0x7F	; 127
    2b84:	72 e0       	ldi	r23, 0x02	; 2
    2b86:	0e 94 11 14 	call	0x2822	; 0x2822 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    2b8a:	d8 01       	movw	r26, r16
    2b8c:	ed 91       	ld	r30, X+
    2b8e:	fc 91       	ld	r31, X
    2b90:	11 97       	sbiw	r26, 0x01	; 1
    2b92:	83 89       	ldd	r24, Z+19	; 0x13
    2b94:	54 96       	adiw	r26, 0x14	; 20
    2b96:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	40 c0       	rjmp	.+128    	; 0x2c1c <u8x8_d_ssd1306_128x32_generic+0x114>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    2b9c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    2ba0:	61 e8       	ldi	r22, 0x81	; 129
    2ba2:	c8 01       	movw	r24, r16
    2ba4:	0e 94 db 13 	call	0x27b6	; 0x27b6 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    2ba8:	6c 2f       	mov	r22, r28
    2baa:	c8 01       	movw	r24, r16
    2bac:	0e 94 e6 13 	call	0x27cc	; 0x27cc <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    2bb0:	c8 01       	movw	r24, r16
    2bb2:	0e 94 06 14 	call	0x280c	; 0x280c <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    2bb8:	31 c0       	rjmp	.+98     	; 0x2c1c <u8x8_d_ssd1306_128x32_generic+0x114>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    2bba:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    2bbe:	f7 01       	movw	r30, r14
    2bc0:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    2bc2:	dd 0f       	add	r29, r29
    2bc4:	dd 0f       	add	r29, r29
    2bc6:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    2bc8:	d8 01       	movw	r26, r16
    2bca:	54 96       	adiw	r26, 0x14	; 20
    2bcc:	8c 91       	ld	r24, X
    2bce:	d8 0f       	add	r29, r24
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    2bd0:	6d 2f       	mov	r22, r29
    2bd2:	62 95       	swap	r22
    2bd4:	6f 70       	andi	r22, 0x0F	; 15
    2bd6:	60 61       	ori	r22, 0x10	; 16
    2bd8:	c8 01       	movw	r24, r16
    2bda:	0e 94 db 13 	call	0x27b6	; 0x27b6 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
    2bde:	6d 2f       	mov	r22, r29
    2be0:	6f 70       	andi	r22, 0x0F	; 15
    2be2:	c8 01       	movw	r24, r16
    2be4:	0e 94 db 13 	call	0x27b6	; 0x27b6 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
    2be8:	f7 01       	movw	r30, r14
    2bea:	64 81       	ldd	r22, Z+4	; 0x04
    2bec:	60 6b       	ori	r22, 0xB0	; 176
    2bee:	c8 01       	movw	r24, r16
    2bf0:	0e 94 db 13 	call	0x27b6	; 0x27b6 <u8x8_cad_SendCmd>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    2bf4:	d7 01       	movw	r26, r14
    2bf6:	4d 91       	ld	r20, X+
    2bf8:	5c 91       	ld	r21, X
    2bfa:	11 97       	sbiw	r26, 0x01	; 1
    2bfc:	12 96       	adiw	r26, 0x02	; 2
    2bfe:	6c 91       	ld	r22, X
    2c00:	66 0f       	add	r22, r22
    2c02:	66 0f       	add	r22, r22
    2c04:	66 0f       	add	r22, r22
    2c06:	c8 01       	movw	r24, r16
    2c08:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    2c0c:	c1 50       	subi	r28, 0x01	; 1
      } while( arg_int > 0 );
    2c0e:	91 f7       	brne	.-28     	; 0x2bf4 <u8x8_d_ssd1306_128x32_generic+0xec>
      
      u8x8_cad_EndTransfer(u8x8);
    2c10:	c8 01       	movw	r24, r16
    2c12:	0e 94 06 14 	call	0x280c	; 0x280c <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    2c18:	01 c0       	rjmp	.+2      	; 0x2c1c <u8x8_d_ssd1306_128x32_generic+0x114>
    default:
      return 0;
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	1f 91       	pop	r17
    2c22:	0f 91       	pop	r16
    2c24:	ff 90       	pop	r15
    2c26:	ef 90       	pop	r14
    2c28:	08 95       	ret

00002c2a <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
    2c2a:	69 30       	cpi	r22, 0x09	; 9
    2c2c:	31 f4       	brne	.+12     	; 0x2c3a <u8x8_d_ssd1306_128x32_univision+0x10>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
    2c2e:	67 e6       	ldi	r22, 0x67	; 103
    2c30:	72 e0       	ldi	r23, 0x02	; 2
    2c32:	0e 94 de 14 	call	0x29bc	; 0x29bc <u8x8_d_helper_display_setup_memory>
      return 1;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	08 95       	ret
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
    2c3a:	0e 94 84 15 	call	0x2b08	; 0x2b08 <u8x8_d_ssd1306_128x32_generic>
}
    2c3e:	08 95       	ret

00002c40 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    2c40:	dc 01       	movw	r26, r24
    2c42:	1a 96       	adiw	r26, 0x0a	; 10
    2c44:	ed 91       	ld	r30, X+
    2c46:	fc 91       	ld	r31, X
    2c48:	1b 97       	sbiw	r26, 0x0b	; 11
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	09 95       	icall
    2c50:	08 95       	ret

00002c52 <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	08 95       	ret

00002c56 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    2c56:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    2c58:	11 82       	std	Z+1, r1	; 0x01
    2c5a:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    2c5c:	89 e2       	ldi	r24, 0x29	; 41
    2c5e:	96 e1       	ldi	r25, 0x16	; 22
    2c60:	95 83       	std	Z+5, r25	; 0x05
    2c62:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    2c64:	97 83       	std	Z+7, r25	; 0x07
    2c66:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    2c68:	91 87       	std	Z+9, r25	; 0x09
    2c6a:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    2c6c:	93 87       	std	Z+11, r25	; 0x0b
    2c6e:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    2c70:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    2c72:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    2c74:	14 86       	std	Z+12, r1	; 0x0c
    2c76:	15 86       	std	Z+13, r1	; 0x0d
    2c78:	16 86       	std	Z+14, r1	; 0x0e
    2c7a:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    2c7c:	8f ef       	ldi	r24, 0xFF	; 255
    2c7e:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    2c80:	82 8f       	std	Z+26, r24	; 0x1a
    2c82:	08 95       	ret

00002c84 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    2c84:	af 92       	push	r10
    2c86:	bf 92       	push	r11
    2c88:	cf 92       	push	r12
    2c8a:	df 92       	push	r13
    2c8c:	ef 92       	push	r14
    2c8e:	ff 92       	push	r15
    2c90:	0f 93       	push	r16
    2c92:	1f 93       	push	r17
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    2c98:	ec 01       	movw	r28, r24
    2c9a:	5b 01       	movw	r10, r22
    2c9c:	6a 01       	movw	r12, r20
    2c9e:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    2ca0:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    2ca4:	bd 82       	std	Y+5, r11	; 0x05
    2ca6:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    2ca8:	df 82       	std	Y+7, r13	; 0x07
    2caa:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    2cac:	f9 86       	std	Y+9, r15	; 0x09
    2cae:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    2cb0:	1b 87       	std	Y+11, r17	; 0x0b
    2cb2:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	0e 94 42 15 	call	0x2a84	; 0x2a84 <u8x8_SetupMemory>
}
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	1f 91       	pop	r17
    2cc0:	0f 91       	pop	r16
    2cc2:	ff 90       	pop	r15
    2cc4:	ef 90       	pop	r14
    2cc6:	df 90       	pop	r13
    2cc8:	cf 90       	pop	r12
    2cca:	bf 90       	pop	r11
    2ccc:	af 90       	pop	r10
    2cce:	08 95       	ret

00002cd0 <__subsf3>:
    2cd0:	50 58       	subi	r21, 0x80	; 128

00002cd2 <__addsf3>:
    2cd2:	bb 27       	eor	r27, r27
    2cd4:	aa 27       	eor	r26, r26
    2cd6:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__addsf3x>
    2cda:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__fp_round>
    2cde:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__fp_pscA>
    2ce2:	38 f0       	brcs	.+14     	; 0x2cf2 <__addsf3+0x20>
    2ce4:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__fp_pscB>
    2ce8:	20 f0       	brcs	.+8      	; 0x2cf2 <__addsf3+0x20>
    2cea:	39 f4       	brne	.+14     	; 0x2cfa <__addsf3+0x28>
    2cec:	9f 3f       	cpi	r25, 0xFF	; 255
    2cee:	19 f4       	brne	.+6      	; 0x2cf6 <__addsf3+0x24>
    2cf0:	26 f4       	brtc	.+8      	; 0x2cfa <__addsf3+0x28>
    2cf2:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__fp_nan>
    2cf6:	0e f4       	brtc	.+2      	; 0x2cfa <__addsf3+0x28>
    2cf8:	e0 95       	com	r30
    2cfa:	e7 fb       	bst	r30, 7
    2cfc:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__fp_inf>

00002d00 <__addsf3x>:
    2d00:	e9 2f       	mov	r30, r25
    2d02:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__fp_split3>
    2d06:	58 f3       	brcs	.-42     	; 0x2cde <__addsf3+0xc>
    2d08:	ba 17       	cp	r27, r26
    2d0a:	62 07       	cpc	r22, r18
    2d0c:	73 07       	cpc	r23, r19
    2d0e:	84 07       	cpc	r24, r20
    2d10:	95 07       	cpc	r25, r21
    2d12:	20 f0       	brcs	.+8      	; 0x2d1c <__addsf3x+0x1c>
    2d14:	79 f4       	brne	.+30     	; 0x2d34 <__addsf3x+0x34>
    2d16:	a6 f5       	brtc	.+104    	; 0x2d80 <__addsf3x+0x80>
    2d18:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__fp_zero>
    2d1c:	0e f4       	brtc	.+2      	; 0x2d20 <__addsf3x+0x20>
    2d1e:	e0 95       	com	r30
    2d20:	0b 2e       	mov	r0, r27
    2d22:	ba 2f       	mov	r27, r26
    2d24:	a0 2d       	mov	r26, r0
    2d26:	0b 01       	movw	r0, r22
    2d28:	b9 01       	movw	r22, r18
    2d2a:	90 01       	movw	r18, r0
    2d2c:	0c 01       	movw	r0, r24
    2d2e:	ca 01       	movw	r24, r20
    2d30:	a0 01       	movw	r20, r0
    2d32:	11 24       	eor	r1, r1
    2d34:	ff 27       	eor	r31, r31
    2d36:	59 1b       	sub	r21, r25
    2d38:	99 f0       	breq	.+38     	; 0x2d60 <__addsf3x+0x60>
    2d3a:	59 3f       	cpi	r21, 0xF9	; 249
    2d3c:	50 f4       	brcc	.+20     	; 0x2d52 <__addsf3x+0x52>
    2d3e:	50 3e       	cpi	r21, 0xE0	; 224
    2d40:	68 f1       	brcs	.+90     	; 0x2d9c <__addsf3x+0x9c>
    2d42:	1a 16       	cp	r1, r26
    2d44:	f0 40       	sbci	r31, 0x00	; 0
    2d46:	a2 2f       	mov	r26, r18
    2d48:	23 2f       	mov	r18, r19
    2d4a:	34 2f       	mov	r19, r20
    2d4c:	44 27       	eor	r20, r20
    2d4e:	58 5f       	subi	r21, 0xF8	; 248
    2d50:	f3 cf       	rjmp	.-26     	; 0x2d38 <__addsf3x+0x38>
    2d52:	46 95       	lsr	r20
    2d54:	37 95       	ror	r19
    2d56:	27 95       	ror	r18
    2d58:	a7 95       	ror	r26
    2d5a:	f0 40       	sbci	r31, 0x00	; 0
    2d5c:	53 95       	inc	r21
    2d5e:	c9 f7       	brne	.-14     	; 0x2d52 <__addsf3x+0x52>
    2d60:	7e f4       	brtc	.+30     	; 0x2d80 <__addsf3x+0x80>
    2d62:	1f 16       	cp	r1, r31
    2d64:	ba 0b       	sbc	r27, r26
    2d66:	62 0b       	sbc	r22, r18
    2d68:	73 0b       	sbc	r23, r19
    2d6a:	84 0b       	sbc	r24, r20
    2d6c:	ba f0       	brmi	.+46     	; 0x2d9c <__addsf3x+0x9c>
    2d6e:	91 50       	subi	r25, 0x01	; 1
    2d70:	a1 f0       	breq	.+40     	; 0x2d9a <__addsf3x+0x9a>
    2d72:	ff 0f       	add	r31, r31
    2d74:	bb 1f       	adc	r27, r27
    2d76:	66 1f       	adc	r22, r22
    2d78:	77 1f       	adc	r23, r23
    2d7a:	88 1f       	adc	r24, r24
    2d7c:	c2 f7       	brpl	.-16     	; 0x2d6e <__addsf3x+0x6e>
    2d7e:	0e c0       	rjmp	.+28     	; 0x2d9c <__addsf3x+0x9c>
    2d80:	ba 0f       	add	r27, r26
    2d82:	62 1f       	adc	r22, r18
    2d84:	73 1f       	adc	r23, r19
    2d86:	84 1f       	adc	r24, r20
    2d88:	48 f4       	brcc	.+18     	; 0x2d9c <__addsf3x+0x9c>
    2d8a:	87 95       	ror	r24
    2d8c:	77 95       	ror	r23
    2d8e:	67 95       	ror	r22
    2d90:	b7 95       	ror	r27
    2d92:	f7 95       	ror	r31
    2d94:	9e 3f       	cpi	r25, 0xFE	; 254
    2d96:	08 f0       	brcs	.+2      	; 0x2d9a <__addsf3x+0x9a>
    2d98:	b0 cf       	rjmp	.-160    	; 0x2cfa <__addsf3+0x28>
    2d9a:	93 95       	inc	r25
    2d9c:	88 0f       	add	r24, r24
    2d9e:	08 f0       	brcs	.+2      	; 0x2da2 <__addsf3x+0xa2>
    2da0:	99 27       	eor	r25, r25
    2da2:	ee 0f       	add	r30, r30
    2da4:	97 95       	ror	r25
    2da6:	87 95       	ror	r24
    2da8:	08 95       	ret

00002daa <__divsf3>:
    2daa:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__divsf3x>
    2dae:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__fp_round>
    2db2:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__fp_pscB>
    2db6:	58 f0       	brcs	.+22     	; 0x2dce <__divsf3+0x24>
    2db8:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__fp_pscA>
    2dbc:	40 f0       	brcs	.+16     	; 0x2dce <__divsf3+0x24>
    2dbe:	29 f4       	brne	.+10     	; 0x2dca <__divsf3+0x20>
    2dc0:	5f 3f       	cpi	r21, 0xFF	; 255
    2dc2:	29 f0       	breq	.+10     	; 0x2dce <__divsf3+0x24>
    2dc4:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__fp_inf>
    2dc8:	51 11       	cpse	r21, r1
    2dca:	0c 94 05 18 	jmp	0x300a	; 0x300a <__fp_szero>
    2dce:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__fp_nan>

00002dd2 <__divsf3x>:
    2dd2:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__fp_split3>
    2dd6:	68 f3       	brcs	.-38     	; 0x2db2 <__divsf3+0x8>

00002dd8 <__divsf3_pse>:
    2dd8:	99 23       	and	r25, r25
    2dda:	b1 f3       	breq	.-20     	; 0x2dc8 <__divsf3+0x1e>
    2ddc:	55 23       	and	r21, r21
    2dde:	91 f3       	breq	.-28     	; 0x2dc4 <__divsf3+0x1a>
    2de0:	95 1b       	sub	r25, r21
    2de2:	55 0b       	sbc	r21, r21
    2de4:	bb 27       	eor	r27, r27
    2de6:	aa 27       	eor	r26, r26
    2de8:	62 17       	cp	r22, r18
    2dea:	73 07       	cpc	r23, r19
    2dec:	84 07       	cpc	r24, r20
    2dee:	38 f0       	brcs	.+14     	; 0x2dfe <__divsf3_pse+0x26>
    2df0:	9f 5f       	subi	r25, 0xFF	; 255
    2df2:	5f 4f       	sbci	r21, 0xFF	; 255
    2df4:	22 0f       	add	r18, r18
    2df6:	33 1f       	adc	r19, r19
    2df8:	44 1f       	adc	r20, r20
    2dfa:	aa 1f       	adc	r26, r26
    2dfc:	a9 f3       	breq	.-22     	; 0x2de8 <__divsf3_pse+0x10>
    2dfe:	35 d0       	rcall	.+106    	; 0x2e6a <__divsf3_pse+0x92>
    2e00:	0e 2e       	mov	r0, r30
    2e02:	3a f0       	brmi	.+14     	; 0x2e12 <__divsf3_pse+0x3a>
    2e04:	e0 e8       	ldi	r30, 0x80	; 128
    2e06:	32 d0       	rcall	.+100    	; 0x2e6c <__divsf3_pse+0x94>
    2e08:	91 50       	subi	r25, 0x01	; 1
    2e0a:	50 40       	sbci	r21, 0x00	; 0
    2e0c:	e6 95       	lsr	r30
    2e0e:	00 1c       	adc	r0, r0
    2e10:	ca f7       	brpl	.-14     	; 0x2e04 <__divsf3_pse+0x2c>
    2e12:	2b d0       	rcall	.+86     	; 0x2e6a <__divsf3_pse+0x92>
    2e14:	fe 2f       	mov	r31, r30
    2e16:	29 d0       	rcall	.+82     	; 0x2e6a <__divsf3_pse+0x92>
    2e18:	66 0f       	add	r22, r22
    2e1a:	77 1f       	adc	r23, r23
    2e1c:	88 1f       	adc	r24, r24
    2e1e:	bb 1f       	adc	r27, r27
    2e20:	26 17       	cp	r18, r22
    2e22:	37 07       	cpc	r19, r23
    2e24:	48 07       	cpc	r20, r24
    2e26:	ab 07       	cpc	r26, r27
    2e28:	b0 e8       	ldi	r27, 0x80	; 128
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <__divsf3_pse+0x56>
    2e2c:	bb 0b       	sbc	r27, r27
    2e2e:	80 2d       	mov	r24, r0
    2e30:	bf 01       	movw	r22, r30
    2e32:	ff 27       	eor	r31, r31
    2e34:	93 58       	subi	r25, 0x83	; 131
    2e36:	5f 4f       	sbci	r21, 0xFF	; 255
    2e38:	3a f0       	brmi	.+14     	; 0x2e48 <__divsf3_pse+0x70>
    2e3a:	9e 3f       	cpi	r25, 0xFE	; 254
    2e3c:	51 05       	cpc	r21, r1
    2e3e:	78 f0       	brcs	.+30     	; 0x2e5e <__divsf3_pse+0x86>
    2e40:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__fp_inf>
    2e44:	0c 94 05 18 	jmp	0x300a	; 0x300a <__fp_szero>
    2e48:	5f 3f       	cpi	r21, 0xFF	; 255
    2e4a:	e4 f3       	brlt	.-8      	; 0x2e44 <__divsf3_pse+0x6c>
    2e4c:	98 3e       	cpi	r25, 0xE8	; 232
    2e4e:	d4 f3       	brlt	.-12     	; 0x2e44 <__divsf3_pse+0x6c>
    2e50:	86 95       	lsr	r24
    2e52:	77 95       	ror	r23
    2e54:	67 95       	ror	r22
    2e56:	b7 95       	ror	r27
    2e58:	f7 95       	ror	r31
    2e5a:	9f 5f       	subi	r25, 0xFF	; 255
    2e5c:	c9 f7       	brne	.-14     	; 0x2e50 <__divsf3_pse+0x78>
    2e5e:	88 0f       	add	r24, r24
    2e60:	91 1d       	adc	r25, r1
    2e62:	96 95       	lsr	r25
    2e64:	87 95       	ror	r24
    2e66:	97 f9       	bld	r25, 7
    2e68:	08 95       	ret
    2e6a:	e1 e0       	ldi	r30, 0x01	; 1
    2e6c:	66 0f       	add	r22, r22
    2e6e:	77 1f       	adc	r23, r23
    2e70:	88 1f       	adc	r24, r24
    2e72:	bb 1f       	adc	r27, r27
    2e74:	62 17       	cp	r22, r18
    2e76:	73 07       	cpc	r23, r19
    2e78:	84 07       	cpc	r24, r20
    2e7a:	ba 07       	cpc	r27, r26
    2e7c:	20 f0       	brcs	.+8      	; 0x2e86 <__divsf3_pse+0xae>
    2e7e:	62 1b       	sub	r22, r18
    2e80:	73 0b       	sbc	r23, r19
    2e82:	84 0b       	sbc	r24, r20
    2e84:	ba 0b       	sbc	r27, r26
    2e86:	ee 1f       	adc	r30, r30
    2e88:	88 f7       	brcc	.-30     	; 0x2e6c <__divsf3_pse+0x94>
    2e8a:	e0 95       	com	r30
    2e8c:	08 95       	ret

00002e8e <__fixsfsi>:
    2e8e:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__fixunssfsi>
    2e92:	68 94       	set
    2e94:	b1 11       	cpse	r27, r1
    2e96:	0c 94 05 18 	jmp	0x300a	; 0x300a <__fp_szero>
    2e9a:	08 95       	ret

00002e9c <__fixunssfsi>:
    2e9c:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__fp_splitA>
    2ea0:	88 f0       	brcs	.+34     	; 0x2ec4 <__fixunssfsi+0x28>
    2ea2:	9f 57       	subi	r25, 0x7F	; 127
    2ea4:	98 f0       	brcs	.+38     	; 0x2ecc <__fixunssfsi+0x30>
    2ea6:	b9 2f       	mov	r27, r25
    2ea8:	99 27       	eor	r25, r25
    2eaa:	b7 51       	subi	r27, 0x17	; 23
    2eac:	b0 f0       	brcs	.+44     	; 0x2eda <__fixunssfsi+0x3e>
    2eae:	e1 f0       	breq	.+56     	; 0x2ee8 <__fixunssfsi+0x4c>
    2eb0:	66 0f       	add	r22, r22
    2eb2:	77 1f       	adc	r23, r23
    2eb4:	88 1f       	adc	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	1a f0       	brmi	.+6      	; 0x2ec0 <__fixunssfsi+0x24>
    2eba:	ba 95       	dec	r27
    2ebc:	c9 f7       	brne	.-14     	; 0x2eb0 <__fixunssfsi+0x14>
    2ebe:	14 c0       	rjmp	.+40     	; 0x2ee8 <__fixunssfsi+0x4c>
    2ec0:	b1 30       	cpi	r27, 0x01	; 1
    2ec2:	91 f0       	breq	.+36     	; 0x2ee8 <__fixunssfsi+0x4c>
    2ec4:	0e 94 04 18 	call	0x3008	; 0x3008 <__fp_zero>
    2ec8:	b1 e0       	ldi	r27, 0x01	; 1
    2eca:	08 95       	ret
    2ecc:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__fp_zero>
    2ed0:	67 2f       	mov	r22, r23
    2ed2:	78 2f       	mov	r23, r24
    2ed4:	88 27       	eor	r24, r24
    2ed6:	b8 5f       	subi	r27, 0xF8	; 248
    2ed8:	39 f0       	breq	.+14     	; 0x2ee8 <__fixunssfsi+0x4c>
    2eda:	b9 3f       	cpi	r27, 0xF9	; 249
    2edc:	cc f3       	brlt	.-14     	; 0x2ed0 <__fixunssfsi+0x34>
    2ede:	86 95       	lsr	r24
    2ee0:	77 95       	ror	r23
    2ee2:	67 95       	ror	r22
    2ee4:	b3 95       	inc	r27
    2ee6:	d9 f7       	brne	.-10     	; 0x2ede <__fixunssfsi+0x42>
    2ee8:	3e f4       	brtc	.+14     	; 0x2ef8 <__fixunssfsi+0x5c>
    2eea:	90 95       	com	r25
    2eec:	80 95       	com	r24
    2eee:	70 95       	com	r23
    2ef0:	61 95       	neg	r22
    2ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef8:	08 95       	ret

00002efa <__floatunsisf>:
    2efa:	e8 94       	clt
    2efc:	09 c0       	rjmp	.+18     	; 0x2f10 <__floatsisf+0x12>

00002efe <__floatsisf>:
    2efe:	97 fb       	bst	r25, 7
    2f00:	3e f4       	brtc	.+14     	; 0x2f10 <__floatsisf+0x12>
    2f02:	90 95       	com	r25
    2f04:	80 95       	com	r24
    2f06:	70 95       	com	r23
    2f08:	61 95       	neg	r22
    2f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f10:	99 23       	and	r25, r25
    2f12:	a9 f0       	breq	.+42     	; 0x2f3e <__floatsisf+0x40>
    2f14:	f9 2f       	mov	r31, r25
    2f16:	96 e9       	ldi	r25, 0x96	; 150
    2f18:	bb 27       	eor	r27, r27
    2f1a:	93 95       	inc	r25
    2f1c:	f6 95       	lsr	r31
    2f1e:	87 95       	ror	r24
    2f20:	77 95       	ror	r23
    2f22:	67 95       	ror	r22
    2f24:	b7 95       	ror	r27
    2f26:	f1 11       	cpse	r31, r1
    2f28:	f8 cf       	rjmp	.-16     	; 0x2f1a <__floatsisf+0x1c>
    2f2a:	fa f4       	brpl	.+62     	; 0x2f6a <__floatsisf+0x6c>
    2f2c:	bb 0f       	add	r27, r27
    2f2e:	11 f4       	brne	.+4      	; 0x2f34 <__floatsisf+0x36>
    2f30:	60 ff       	sbrs	r22, 0
    2f32:	1b c0       	rjmp	.+54     	; 0x2f6a <__floatsisf+0x6c>
    2f34:	6f 5f       	subi	r22, 0xFF	; 255
    2f36:	7f 4f       	sbci	r23, 0xFF	; 255
    2f38:	8f 4f       	sbci	r24, 0xFF	; 255
    2f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3c:	16 c0       	rjmp	.+44     	; 0x2f6a <__floatsisf+0x6c>
    2f3e:	88 23       	and	r24, r24
    2f40:	11 f0       	breq	.+4      	; 0x2f46 <__floatsisf+0x48>
    2f42:	96 e9       	ldi	r25, 0x96	; 150
    2f44:	11 c0       	rjmp	.+34     	; 0x2f68 <__floatsisf+0x6a>
    2f46:	77 23       	and	r23, r23
    2f48:	21 f0       	breq	.+8      	; 0x2f52 <__floatsisf+0x54>
    2f4a:	9e e8       	ldi	r25, 0x8E	; 142
    2f4c:	87 2f       	mov	r24, r23
    2f4e:	76 2f       	mov	r23, r22
    2f50:	05 c0       	rjmp	.+10     	; 0x2f5c <__floatsisf+0x5e>
    2f52:	66 23       	and	r22, r22
    2f54:	71 f0       	breq	.+28     	; 0x2f72 <__floatsisf+0x74>
    2f56:	96 e8       	ldi	r25, 0x86	; 134
    2f58:	86 2f       	mov	r24, r22
    2f5a:	70 e0       	ldi	r23, 0x00	; 0
    2f5c:	60 e0       	ldi	r22, 0x00	; 0
    2f5e:	2a f0       	brmi	.+10     	; 0x2f6a <__floatsisf+0x6c>
    2f60:	9a 95       	dec	r25
    2f62:	66 0f       	add	r22, r22
    2f64:	77 1f       	adc	r23, r23
    2f66:	88 1f       	adc	r24, r24
    2f68:	da f7       	brpl	.-10     	; 0x2f60 <__floatsisf+0x62>
    2f6a:	88 0f       	add	r24, r24
    2f6c:	96 95       	lsr	r25
    2f6e:	87 95       	ror	r24
    2f70:	97 f9       	bld	r25, 7
    2f72:	08 95       	ret

00002f74 <__fp_inf>:
    2f74:	97 f9       	bld	r25, 7
    2f76:	9f 67       	ori	r25, 0x7F	; 127
    2f78:	80 e8       	ldi	r24, 0x80	; 128
    2f7a:	70 e0       	ldi	r23, 0x00	; 0
    2f7c:	60 e0       	ldi	r22, 0x00	; 0
    2f7e:	08 95       	ret

00002f80 <__fp_nan>:
    2f80:	9f ef       	ldi	r25, 0xFF	; 255
    2f82:	80 ec       	ldi	r24, 0xC0	; 192
    2f84:	08 95       	ret

00002f86 <__fp_pscA>:
    2f86:	00 24       	eor	r0, r0
    2f88:	0a 94       	dec	r0
    2f8a:	16 16       	cp	r1, r22
    2f8c:	17 06       	cpc	r1, r23
    2f8e:	18 06       	cpc	r1, r24
    2f90:	09 06       	cpc	r0, r25
    2f92:	08 95       	ret

00002f94 <__fp_pscB>:
    2f94:	00 24       	eor	r0, r0
    2f96:	0a 94       	dec	r0
    2f98:	12 16       	cp	r1, r18
    2f9a:	13 06       	cpc	r1, r19
    2f9c:	14 06       	cpc	r1, r20
    2f9e:	05 06       	cpc	r0, r21
    2fa0:	08 95       	ret

00002fa2 <__fp_round>:
    2fa2:	09 2e       	mov	r0, r25
    2fa4:	03 94       	inc	r0
    2fa6:	00 0c       	add	r0, r0
    2fa8:	11 f4       	brne	.+4      	; 0x2fae <__fp_round+0xc>
    2faa:	88 23       	and	r24, r24
    2fac:	52 f0       	brmi	.+20     	; 0x2fc2 <__fp_round+0x20>
    2fae:	bb 0f       	add	r27, r27
    2fb0:	40 f4       	brcc	.+16     	; 0x2fc2 <__fp_round+0x20>
    2fb2:	bf 2b       	or	r27, r31
    2fb4:	11 f4       	brne	.+4      	; 0x2fba <__fp_round+0x18>
    2fb6:	60 ff       	sbrs	r22, 0
    2fb8:	04 c0       	rjmp	.+8      	; 0x2fc2 <__fp_round+0x20>
    2fba:	6f 5f       	subi	r22, 0xFF	; 255
    2fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fbe:	8f 4f       	sbci	r24, 0xFF	; 255
    2fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc2:	08 95       	ret

00002fc4 <__fp_split3>:
    2fc4:	57 fd       	sbrc	r21, 7
    2fc6:	90 58       	subi	r25, 0x80	; 128
    2fc8:	44 0f       	add	r20, r20
    2fca:	55 1f       	adc	r21, r21
    2fcc:	59 f0       	breq	.+22     	; 0x2fe4 <__fp_splitA+0x10>
    2fce:	5f 3f       	cpi	r21, 0xFF	; 255
    2fd0:	71 f0       	breq	.+28     	; 0x2fee <__fp_splitA+0x1a>
    2fd2:	47 95       	ror	r20

00002fd4 <__fp_splitA>:
    2fd4:	88 0f       	add	r24, r24
    2fd6:	97 fb       	bst	r25, 7
    2fd8:	99 1f       	adc	r25, r25
    2fda:	61 f0       	breq	.+24     	; 0x2ff4 <__fp_splitA+0x20>
    2fdc:	9f 3f       	cpi	r25, 0xFF	; 255
    2fde:	79 f0       	breq	.+30     	; 0x2ffe <__fp_splitA+0x2a>
    2fe0:	87 95       	ror	r24
    2fe2:	08 95       	ret
    2fe4:	12 16       	cp	r1, r18
    2fe6:	13 06       	cpc	r1, r19
    2fe8:	14 06       	cpc	r1, r20
    2fea:	55 1f       	adc	r21, r21
    2fec:	f2 cf       	rjmp	.-28     	; 0x2fd2 <__fp_split3+0xe>
    2fee:	46 95       	lsr	r20
    2ff0:	f1 df       	rcall	.-30     	; 0x2fd4 <__fp_splitA>
    2ff2:	08 c0       	rjmp	.+16     	; 0x3004 <__fp_splitA+0x30>
    2ff4:	16 16       	cp	r1, r22
    2ff6:	17 06       	cpc	r1, r23
    2ff8:	18 06       	cpc	r1, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	f1 cf       	rjmp	.-30     	; 0x2fe0 <__fp_splitA+0xc>
    2ffe:	86 95       	lsr	r24
    3000:	71 05       	cpc	r23, r1
    3002:	61 05       	cpc	r22, r1
    3004:	08 94       	sec
    3006:	08 95       	ret

00003008 <__fp_zero>:
    3008:	e8 94       	clt

0000300a <__fp_szero>:
    300a:	bb 27       	eor	r27, r27
    300c:	66 27       	eor	r22, r22
    300e:	77 27       	eor	r23, r23
    3010:	cb 01       	movw	r24, r22
    3012:	97 f9       	bld	r25, 7
    3014:	08 95       	ret

00003016 <__mulsf3>:
    3016:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3x>
    301a:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__fp_round>
    301e:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__fp_pscA>
    3022:	38 f0       	brcs	.+14     	; 0x3032 <__mulsf3+0x1c>
    3024:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__fp_pscB>
    3028:	20 f0       	brcs	.+8      	; 0x3032 <__mulsf3+0x1c>
    302a:	95 23       	and	r25, r21
    302c:	11 f0       	breq	.+4      	; 0x3032 <__mulsf3+0x1c>
    302e:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__fp_inf>
    3032:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__fp_nan>
    3036:	11 24       	eor	r1, r1
    3038:	0c 94 05 18 	jmp	0x300a	; 0x300a <__fp_szero>

0000303c <__mulsf3x>:
    303c:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__fp_split3>
    3040:	70 f3       	brcs	.-36     	; 0x301e <__mulsf3+0x8>

00003042 <__mulsf3_pse>:
    3042:	95 9f       	mul	r25, r21
    3044:	c1 f3       	breq	.-16     	; 0x3036 <__mulsf3+0x20>
    3046:	95 0f       	add	r25, r21
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	55 1f       	adc	r21, r21
    304c:	62 9f       	mul	r22, r18
    304e:	f0 01       	movw	r30, r0
    3050:	72 9f       	mul	r23, r18
    3052:	bb 27       	eor	r27, r27
    3054:	f0 0d       	add	r31, r0
    3056:	b1 1d       	adc	r27, r1
    3058:	63 9f       	mul	r22, r19
    305a:	aa 27       	eor	r26, r26
    305c:	f0 0d       	add	r31, r0
    305e:	b1 1d       	adc	r27, r1
    3060:	aa 1f       	adc	r26, r26
    3062:	64 9f       	mul	r22, r20
    3064:	66 27       	eor	r22, r22
    3066:	b0 0d       	add	r27, r0
    3068:	a1 1d       	adc	r26, r1
    306a:	66 1f       	adc	r22, r22
    306c:	82 9f       	mul	r24, r18
    306e:	22 27       	eor	r18, r18
    3070:	b0 0d       	add	r27, r0
    3072:	a1 1d       	adc	r26, r1
    3074:	62 1f       	adc	r22, r18
    3076:	73 9f       	mul	r23, r19
    3078:	b0 0d       	add	r27, r0
    307a:	a1 1d       	adc	r26, r1
    307c:	62 1f       	adc	r22, r18
    307e:	83 9f       	mul	r24, r19
    3080:	a0 0d       	add	r26, r0
    3082:	61 1d       	adc	r22, r1
    3084:	22 1f       	adc	r18, r18
    3086:	74 9f       	mul	r23, r20
    3088:	33 27       	eor	r19, r19
    308a:	a0 0d       	add	r26, r0
    308c:	61 1d       	adc	r22, r1
    308e:	23 1f       	adc	r18, r19
    3090:	84 9f       	mul	r24, r20
    3092:	60 0d       	add	r22, r0
    3094:	21 1d       	adc	r18, r1
    3096:	82 2f       	mov	r24, r18
    3098:	76 2f       	mov	r23, r22
    309a:	6a 2f       	mov	r22, r26
    309c:	11 24       	eor	r1, r1
    309e:	9f 57       	subi	r25, 0x7F	; 127
    30a0:	50 40       	sbci	r21, 0x00	; 0
    30a2:	9a f0       	brmi	.+38     	; 0x30ca <__mulsf3_pse+0x88>
    30a4:	f1 f0       	breq	.+60     	; 0x30e2 <__mulsf3_pse+0xa0>
    30a6:	88 23       	and	r24, r24
    30a8:	4a f0       	brmi	.+18     	; 0x30bc <__mulsf3_pse+0x7a>
    30aa:	ee 0f       	add	r30, r30
    30ac:	ff 1f       	adc	r31, r31
    30ae:	bb 1f       	adc	r27, r27
    30b0:	66 1f       	adc	r22, r22
    30b2:	77 1f       	adc	r23, r23
    30b4:	88 1f       	adc	r24, r24
    30b6:	91 50       	subi	r25, 0x01	; 1
    30b8:	50 40       	sbci	r21, 0x00	; 0
    30ba:	a9 f7       	brne	.-22     	; 0x30a6 <__mulsf3_pse+0x64>
    30bc:	9e 3f       	cpi	r25, 0xFE	; 254
    30be:	51 05       	cpc	r21, r1
    30c0:	80 f0       	brcs	.+32     	; 0x30e2 <__mulsf3_pse+0xa0>
    30c2:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__fp_inf>
    30c6:	0c 94 05 18 	jmp	0x300a	; 0x300a <__fp_szero>
    30ca:	5f 3f       	cpi	r21, 0xFF	; 255
    30cc:	e4 f3       	brlt	.-8      	; 0x30c6 <__mulsf3_pse+0x84>
    30ce:	98 3e       	cpi	r25, 0xE8	; 232
    30d0:	d4 f3       	brlt	.-12     	; 0x30c6 <__mulsf3_pse+0x84>
    30d2:	86 95       	lsr	r24
    30d4:	77 95       	ror	r23
    30d6:	67 95       	ror	r22
    30d8:	b7 95       	ror	r27
    30da:	f7 95       	ror	r31
    30dc:	e7 95       	ror	r30
    30de:	9f 5f       	subi	r25, 0xFF	; 255
    30e0:	c1 f7       	brne	.-16     	; 0x30d2 <__mulsf3_pse+0x90>
    30e2:	fe 2b       	or	r31, r30
    30e4:	88 0f       	add	r24, r24
    30e6:	91 1d       	adc	r25, r1
    30e8:	96 95       	lsr	r25
    30ea:	87 95       	ror	r24
    30ec:	97 f9       	bld	r25, 7
    30ee:	08 95       	ret

000030f0 <vfprintf>:
    30f0:	a0 e1       	ldi	r26, 0x10	; 16
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	ee e7       	ldi	r30, 0x7E	; 126
    30f6:	f8 e1       	ldi	r31, 0x18	; 24
    30f8:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <__prologue_saves__>
    30fc:	7c 01       	movw	r14, r24
    30fe:	1b 01       	movw	r2, r22
    3100:	6a 01       	movw	r12, r20
    3102:	fc 01       	movw	r30, r24
    3104:	17 82       	std	Z+7, r1	; 0x07
    3106:	16 82       	std	Z+6, r1	; 0x06
    3108:	83 81       	ldd	r24, Z+3	; 0x03
    310a:	81 ff       	sbrs	r24, 1
    310c:	44 c3       	rjmp	.+1672   	; 0x3796 <vfprintf+0x6a6>
    310e:	9e 01       	movw	r18, r28
    3110:	2f 5f       	subi	r18, 0xFF	; 255
    3112:	3f 4f       	sbci	r19, 0xFF	; 255
    3114:	39 01       	movw	r6, r18
    3116:	f7 01       	movw	r30, r14
    3118:	93 81       	ldd	r25, Z+3	; 0x03
    311a:	f1 01       	movw	r30, r2
    311c:	93 fd       	sbrc	r25, 3
    311e:	85 91       	lpm	r24, Z+
    3120:	93 ff       	sbrs	r25, 3
    3122:	81 91       	ld	r24, Z+
    3124:	1f 01       	movw	r2, r30
    3126:	88 23       	and	r24, r24
    3128:	09 f4       	brne	.+2      	; 0x312c <vfprintf+0x3c>
    312a:	31 c3       	rjmp	.+1634   	; 0x378e <vfprintf+0x69e>
    312c:	85 32       	cpi	r24, 0x25	; 37
    312e:	39 f4       	brne	.+14     	; 0x313e <vfprintf+0x4e>
    3130:	93 fd       	sbrc	r25, 3
    3132:	85 91       	lpm	r24, Z+
    3134:	93 ff       	sbrs	r25, 3
    3136:	81 91       	ld	r24, Z+
    3138:	1f 01       	movw	r2, r30
    313a:	85 32       	cpi	r24, 0x25	; 37
    313c:	39 f4       	brne	.+14     	; 0x314c <vfprintf+0x5c>
    313e:	b7 01       	movw	r22, r14
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    3146:	56 01       	movw	r10, r12
    3148:	65 01       	movw	r12, r10
    314a:	e5 cf       	rjmp	.-54     	; 0x3116 <vfprintf+0x26>
    314c:	10 e0       	ldi	r17, 0x00	; 0
    314e:	51 2c       	mov	r5, r1
    3150:	91 2c       	mov	r9, r1
    3152:	ff e1       	ldi	r31, 0x1F	; 31
    3154:	f9 15       	cp	r31, r9
    3156:	d8 f0       	brcs	.+54     	; 0x318e <vfprintf+0x9e>
    3158:	8b 32       	cpi	r24, 0x2B	; 43
    315a:	79 f0       	breq	.+30     	; 0x317a <vfprintf+0x8a>
    315c:	38 f4       	brcc	.+14     	; 0x316c <vfprintf+0x7c>
    315e:	80 32       	cpi	r24, 0x20	; 32
    3160:	79 f0       	breq	.+30     	; 0x3180 <vfprintf+0x90>
    3162:	83 32       	cpi	r24, 0x23	; 35
    3164:	a1 f4       	brne	.+40     	; 0x318e <vfprintf+0x9e>
    3166:	f9 2d       	mov	r31, r9
    3168:	f0 61       	ori	r31, 0x10	; 16
    316a:	2e c0       	rjmp	.+92     	; 0x31c8 <vfprintf+0xd8>
    316c:	8d 32       	cpi	r24, 0x2D	; 45
    316e:	61 f0       	breq	.+24     	; 0x3188 <vfprintf+0x98>
    3170:	80 33       	cpi	r24, 0x30	; 48
    3172:	69 f4       	brne	.+26     	; 0x318e <vfprintf+0x9e>
    3174:	29 2d       	mov	r18, r9
    3176:	21 60       	ori	r18, 0x01	; 1
    3178:	2d c0       	rjmp	.+90     	; 0x31d4 <vfprintf+0xe4>
    317a:	39 2d       	mov	r19, r9
    317c:	32 60       	ori	r19, 0x02	; 2
    317e:	93 2e       	mov	r9, r19
    3180:	89 2d       	mov	r24, r9
    3182:	84 60       	ori	r24, 0x04	; 4
    3184:	98 2e       	mov	r9, r24
    3186:	2a c0       	rjmp	.+84     	; 0x31dc <vfprintf+0xec>
    3188:	e9 2d       	mov	r30, r9
    318a:	e8 60       	ori	r30, 0x08	; 8
    318c:	15 c0       	rjmp	.+42     	; 0x31b8 <vfprintf+0xc8>
    318e:	97 fc       	sbrc	r9, 7
    3190:	2d c0       	rjmp	.+90     	; 0x31ec <vfprintf+0xfc>
    3192:	20 ed       	ldi	r18, 0xD0	; 208
    3194:	28 0f       	add	r18, r24
    3196:	2a 30       	cpi	r18, 0x0A	; 10
    3198:	88 f4       	brcc	.+34     	; 0x31bc <vfprintf+0xcc>
    319a:	96 fe       	sbrs	r9, 6
    319c:	06 c0       	rjmp	.+12     	; 0x31aa <vfprintf+0xba>
    319e:	3a e0       	ldi	r19, 0x0A	; 10
    31a0:	13 9f       	mul	r17, r19
    31a2:	20 0d       	add	r18, r0
    31a4:	11 24       	eor	r1, r1
    31a6:	12 2f       	mov	r17, r18
    31a8:	19 c0       	rjmp	.+50     	; 0x31dc <vfprintf+0xec>
    31aa:	8a e0       	ldi	r24, 0x0A	; 10
    31ac:	58 9e       	mul	r5, r24
    31ae:	20 0d       	add	r18, r0
    31b0:	11 24       	eor	r1, r1
    31b2:	52 2e       	mov	r5, r18
    31b4:	e9 2d       	mov	r30, r9
    31b6:	e0 62       	ori	r30, 0x20	; 32
    31b8:	9e 2e       	mov	r9, r30
    31ba:	10 c0       	rjmp	.+32     	; 0x31dc <vfprintf+0xec>
    31bc:	8e 32       	cpi	r24, 0x2E	; 46
    31be:	31 f4       	brne	.+12     	; 0x31cc <vfprintf+0xdc>
    31c0:	96 fc       	sbrc	r9, 6
    31c2:	e5 c2       	rjmp	.+1482   	; 0x378e <vfprintf+0x69e>
    31c4:	f9 2d       	mov	r31, r9
    31c6:	f0 64       	ori	r31, 0x40	; 64
    31c8:	9f 2e       	mov	r9, r31
    31ca:	08 c0       	rjmp	.+16     	; 0x31dc <vfprintf+0xec>
    31cc:	8c 36       	cpi	r24, 0x6C	; 108
    31ce:	21 f4       	brne	.+8      	; 0x31d8 <vfprintf+0xe8>
    31d0:	29 2d       	mov	r18, r9
    31d2:	20 68       	ori	r18, 0x80	; 128
    31d4:	92 2e       	mov	r9, r18
    31d6:	02 c0       	rjmp	.+4      	; 0x31dc <vfprintf+0xec>
    31d8:	88 36       	cpi	r24, 0x68	; 104
    31da:	41 f4       	brne	.+16     	; 0x31ec <vfprintf+0xfc>
    31dc:	f1 01       	movw	r30, r2
    31de:	93 fd       	sbrc	r25, 3
    31e0:	85 91       	lpm	r24, Z+
    31e2:	93 ff       	sbrs	r25, 3
    31e4:	81 91       	ld	r24, Z+
    31e6:	1f 01       	movw	r2, r30
    31e8:	81 11       	cpse	r24, r1
    31ea:	b3 cf       	rjmp	.-154    	; 0x3152 <vfprintf+0x62>
    31ec:	9b eb       	ldi	r25, 0xBB	; 187
    31ee:	98 0f       	add	r25, r24
    31f0:	93 30       	cpi	r25, 0x03	; 3
    31f2:	20 f4       	brcc	.+8      	; 0x31fc <vfprintf+0x10c>
    31f4:	99 2d       	mov	r25, r9
    31f6:	90 61       	ori	r25, 0x10	; 16
    31f8:	80 5e       	subi	r24, 0xE0	; 224
    31fa:	07 c0       	rjmp	.+14     	; 0x320a <vfprintf+0x11a>
    31fc:	9b e9       	ldi	r25, 0x9B	; 155
    31fe:	98 0f       	add	r25, r24
    3200:	93 30       	cpi	r25, 0x03	; 3
    3202:	08 f0       	brcs	.+2      	; 0x3206 <vfprintf+0x116>
    3204:	66 c1       	rjmp	.+716    	; 0x34d2 <vfprintf+0x3e2>
    3206:	99 2d       	mov	r25, r9
    3208:	9f 7e       	andi	r25, 0xEF	; 239
    320a:	96 ff       	sbrs	r25, 6
    320c:	16 e0       	ldi	r17, 0x06	; 6
    320e:	9f 73       	andi	r25, 0x3F	; 63
    3210:	99 2e       	mov	r9, r25
    3212:	85 36       	cpi	r24, 0x65	; 101
    3214:	19 f4       	brne	.+6      	; 0x321c <vfprintf+0x12c>
    3216:	90 64       	ori	r25, 0x40	; 64
    3218:	99 2e       	mov	r9, r25
    321a:	08 c0       	rjmp	.+16     	; 0x322c <vfprintf+0x13c>
    321c:	86 36       	cpi	r24, 0x66	; 102
    321e:	21 f4       	brne	.+8      	; 0x3228 <vfprintf+0x138>
    3220:	39 2f       	mov	r19, r25
    3222:	30 68       	ori	r19, 0x80	; 128
    3224:	93 2e       	mov	r9, r19
    3226:	02 c0       	rjmp	.+4      	; 0x322c <vfprintf+0x13c>
    3228:	11 11       	cpse	r17, r1
    322a:	11 50       	subi	r17, 0x01	; 1
    322c:	97 fe       	sbrs	r9, 7
    322e:	07 c0       	rjmp	.+14     	; 0x323e <vfprintf+0x14e>
    3230:	1c 33       	cpi	r17, 0x3C	; 60
    3232:	50 f4       	brcc	.+20     	; 0x3248 <vfprintf+0x158>
    3234:	44 24       	eor	r4, r4
    3236:	43 94       	inc	r4
    3238:	41 0e       	add	r4, r17
    323a:	27 e0       	ldi	r18, 0x07	; 7
    323c:	0b c0       	rjmp	.+22     	; 0x3254 <vfprintf+0x164>
    323e:	18 30       	cpi	r17, 0x08	; 8
    3240:	38 f0       	brcs	.+14     	; 0x3250 <vfprintf+0x160>
    3242:	27 e0       	ldi	r18, 0x07	; 7
    3244:	17 e0       	ldi	r17, 0x07	; 7
    3246:	05 c0       	rjmp	.+10     	; 0x3252 <vfprintf+0x162>
    3248:	27 e0       	ldi	r18, 0x07	; 7
    324a:	9c e3       	ldi	r25, 0x3C	; 60
    324c:	49 2e       	mov	r4, r25
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <vfprintf+0x164>
    3250:	21 2f       	mov	r18, r17
    3252:	41 2c       	mov	r4, r1
    3254:	56 01       	movw	r10, r12
    3256:	84 e0       	ldi	r24, 0x04	; 4
    3258:	a8 0e       	add	r10, r24
    325a:	b1 1c       	adc	r11, r1
    325c:	f6 01       	movw	r30, r12
    325e:	60 81       	ld	r22, Z
    3260:	71 81       	ldd	r23, Z+1	; 0x01
    3262:	82 81       	ldd	r24, Z+2	; 0x02
    3264:	93 81       	ldd	r25, Z+3	; 0x03
    3266:	04 2d       	mov	r16, r4
    3268:	a3 01       	movw	r20, r6
    326a:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__ftoa_engine>
    326e:	6c 01       	movw	r12, r24
    3270:	f9 81       	ldd	r31, Y+1	; 0x01
    3272:	fc 87       	std	Y+12, r31	; 0x0c
    3274:	f0 ff       	sbrs	r31, 0
    3276:	02 c0       	rjmp	.+4      	; 0x327c <vfprintf+0x18c>
    3278:	f3 ff       	sbrs	r31, 3
    327a:	06 c0       	rjmp	.+12     	; 0x3288 <vfprintf+0x198>
    327c:	91 fc       	sbrc	r9, 1
    327e:	06 c0       	rjmp	.+12     	; 0x328c <vfprintf+0x19c>
    3280:	92 fe       	sbrs	r9, 2
    3282:	06 c0       	rjmp	.+12     	; 0x3290 <vfprintf+0x1a0>
    3284:	00 e2       	ldi	r16, 0x20	; 32
    3286:	05 c0       	rjmp	.+10     	; 0x3292 <vfprintf+0x1a2>
    3288:	0d e2       	ldi	r16, 0x2D	; 45
    328a:	03 c0       	rjmp	.+6      	; 0x3292 <vfprintf+0x1a2>
    328c:	0b e2       	ldi	r16, 0x2B	; 43
    328e:	01 c0       	rjmp	.+2      	; 0x3292 <vfprintf+0x1a2>
    3290:	00 e0       	ldi	r16, 0x00	; 0
    3292:	8c 85       	ldd	r24, Y+12	; 0x0c
    3294:	8c 70       	andi	r24, 0x0C	; 12
    3296:	19 f0       	breq	.+6      	; 0x329e <vfprintf+0x1ae>
    3298:	01 11       	cpse	r16, r1
    329a:	5a c2       	rjmp	.+1204   	; 0x3750 <vfprintf+0x660>
    329c:	9b c2       	rjmp	.+1334   	; 0x37d4 <vfprintf+0x6e4>
    329e:	97 fe       	sbrs	r9, 7
    32a0:	10 c0       	rjmp	.+32     	; 0x32c2 <vfprintf+0x1d2>
    32a2:	4c 0c       	add	r4, r12
    32a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    32a6:	f4 ff       	sbrs	r31, 4
    32a8:	04 c0       	rjmp	.+8      	; 0x32b2 <vfprintf+0x1c2>
    32aa:	8a 81       	ldd	r24, Y+2	; 0x02
    32ac:	81 33       	cpi	r24, 0x31	; 49
    32ae:	09 f4       	brne	.+2      	; 0x32b2 <vfprintf+0x1c2>
    32b0:	4a 94       	dec	r4
    32b2:	14 14       	cp	r1, r4
    32b4:	74 f5       	brge	.+92     	; 0x3312 <vfprintf+0x222>
    32b6:	28 e0       	ldi	r18, 0x08	; 8
    32b8:	24 15       	cp	r18, r4
    32ba:	78 f5       	brcc	.+94     	; 0x331a <vfprintf+0x22a>
    32bc:	88 e0       	ldi	r24, 0x08	; 8
    32be:	48 2e       	mov	r4, r24
    32c0:	2c c0       	rjmp	.+88     	; 0x331a <vfprintf+0x22a>
    32c2:	96 fc       	sbrc	r9, 6
    32c4:	2a c0       	rjmp	.+84     	; 0x331a <vfprintf+0x22a>
    32c6:	81 2f       	mov	r24, r17
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	8c 15       	cp	r24, r12
    32cc:	9d 05       	cpc	r25, r13
    32ce:	9c f0       	brlt	.+38     	; 0x32f6 <vfprintf+0x206>
    32d0:	3c ef       	ldi	r19, 0xFC	; 252
    32d2:	c3 16       	cp	r12, r19
    32d4:	3f ef       	ldi	r19, 0xFF	; 255
    32d6:	d3 06       	cpc	r13, r19
    32d8:	74 f0       	brlt	.+28     	; 0x32f6 <vfprintf+0x206>
    32da:	89 2d       	mov	r24, r9
    32dc:	80 68       	ori	r24, 0x80	; 128
    32de:	98 2e       	mov	r9, r24
    32e0:	0a c0       	rjmp	.+20     	; 0x32f6 <vfprintf+0x206>
    32e2:	e2 e0       	ldi	r30, 0x02	; 2
    32e4:	f0 e0       	ldi	r31, 0x00	; 0
    32e6:	ec 0f       	add	r30, r28
    32e8:	fd 1f       	adc	r31, r29
    32ea:	e1 0f       	add	r30, r17
    32ec:	f1 1d       	adc	r31, r1
    32ee:	80 81       	ld	r24, Z
    32f0:	80 33       	cpi	r24, 0x30	; 48
    32f2:	19 f4       	brne	.+6      	; 0x32fa <vfprintf+0x20a>
    32f4:	11 50       	subi	r17, 0x01	; 1
    32f6:	11 11       	cpse	r17, r1
    32f8:	f4 cf       	rjmp	.-24     	; 0x32e2 <vfprintf+0x1f2>
    32fa:	97 fe       	sbrs	r9, 7
    32fc:	0e c0       	rjmp	.+28     	; 0x331a <vfprintf+0x22a>
    32fe:	44 24       	eor	r4, r4
    3300:	43 94       	inc	r4
    3302:	41 0e       	add	r4, r17
    3304:	81 2f       	mov	r24, r17
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	c8 16       	cp	r12, r24
    330a:	d9 06       	cpc	r13, r25
    330c:	2c f4       	brge	.+10     	; 0x3318 <vfprintf+0x228>
    330e:	1c 19       	sub	r17, r12
    3310:	04 c0       	rjmp	.+8      	; 0x331a <vfprintf+0x22a>
    3312:	44 24       	eor	r4, r4
    3314:	43 94       	inc	r4
    3316:	01 c0       	rjmp	.+2      	; 0x331a <vfprintf+0x22a>
    3318:	10 e0       	ldi	r17, 0x00	; 0
    331a:	97 fe       	sbrs	r9, 7
    331c:	06 c0       	rjmp	.+12     	; 0x332a <vfprintf+0x23a>
    331e:	1c 14       	cp	r1, r12
    3320:	1d 04       	cpc	r1, r13
    3322:	34 f4       	brge	.+12     	; 0x3330 <vfprintf+0x240>
    3324:	c6 01       	movw	r24, r12
    3326:	01 96       	adiw	r24, 0x01	; 1
    3328:	05 c0       	rjmp	.+10     	; 0x3334 <vfprintf+0x244>
    332a:	85 e0       	ldi	r24, 0x05	; 5
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	02 c0       	rjmp	.+4      	; 0x3334 <vfprintf+0x244>
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	01 11       	cpse	r16, r1
    3336:	01 96       	adiw	r24, 0x01	; 1
    3338:	11 23       	and	r17, r17
    333a:	31 f0       	breq	.+12     	; 0x3348 <vfprintf+0x258>
    333c:	21 2f       	mov	r18, r17
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	2f 5f       	subi	r18, 0xFF	; 255
    3342:	3f 4f       	sbci	r19, 0xFF	; 255
    3344:	82 0f       	add	r24, r18
    3346:	93 1f       	adc	r25, r19
    3348:	25 2d       	mov	r18, r5
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	82 17       	cp	r24, r18
    334e:	93 07       	cpc	r25, r19
    3350:	14 f4       	brge	.+4      	; 0x3356 <vfprintf+0x266>
    3352:	58 1a       	sub	r5, r24
    3354:	01 c0       	rjmp	.+2      	; 0x3358 <vfprintf+0x268>
    3356:	51 2c       	mov	r5, r1
    3358:	89 2d       	mov	r24, r9
    335a:	89 70       	andi	r24, 0x09	; 9
    335c:	49 f4       	brne	.+18     	; 0x3370 <vfprintf+0x280>
    335e:	55 20       	and	r5, r5
    3360:	39 f0       	breq	.+14     	; 0x3370 <vfprintf+0x280>
    3362:	b7 01       	movw	r22, r14
    3364:	80 e2       	ldi	r24, 0x20	; 32
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    336c:	5a 94       	dec	r5
    336e:	f7 cf       	rjmp	.-18     	; 0x335e <vfprintf+0x26e>
    3370:	00 23       	and	r16, r16
    3372:	29 f0       	breq	.+10     	; 0x337e <vfprintf+0x28e>
    3374:	b7 01       	movw	r22, r14
    3376:	80 2f       	mov	r24, r16
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    337e:	93 fc       	sbrc	r9, 3
    3380:	09 c0       	rjmp	.+18     	; 0x3394 <vfprintf+0x2a4>
    3382:	55 20       	and	r5, r5
    3384:	39 f0       	breq	.+14     	; 0x3394 <vfprintf+0x2a4>
    3386:	b7 01       	movw	r22, r14
    3388:	80 e3       	ldi	r24, 0x30	; 48
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    3390:	5a 94       	dec	r5
    3392:	f7 cf       	rjmp	.-18     	; 0x3382 <vfprintf+0x292>
    3394:	97 fe       	sbrs	r9, 7
    3396:	4c c0       	rjmp	.+152    	; 0x3430 <vfprintf+0x340>
    3398:	46 01       	movw	r8, r12
    339a:	d7 fe       	sbrs	r13, 7
    339c:	02 c0       	rjmp	.+4      	; 0x33a2 <vfprintf+0x2b2>
    339e:	81 2c       	mov	r8, r1
    33a0:	91 2c       	mov	r9, r1
    33a2:	c6 01       	movw	r24, r12
    33a4:	88 19       	sub	r24, r8
    33a6:	99 09       	sbc	r25, r9
    33a8:	f3 01       	movw	r30, r6
    33aa:	e8 0f       	add	r30, r24
    33ac:	f9 1f       	adc	r31, r25
    33ae:	fe 87       	std	Y+14, r31	; 0x0e
    33b0:	ed 87       	std	Y+13, r30	; 0x0d
    33b2:	96 01       	movw	r18, r12
    33b4:	24 19       	sub	r18, r4
    33b6:	31 09       	sbc	r19, r1
    33b8:	38 8b       	std	Y+16, r19	; 0x10
    33ba:	2f 87       	std	Y+15, r18	; 0x0f
    33bc:	01 2f       	mov	r16, r17
    33be:	10 e0       	ldi	r17, 0x00	; 0
    33c0:	11 95       	neg	r17
    33c2:	01 95       	neg	r16
    33c4:	11 09       	sbc	r17, r1
    33c6:	3f ef       	ldi	r19, 0xFF	; 255
    33c8:	83 16       	cp	r8, r19
    33ca:	93 06       	cpc	r9, r19
    33cc:	29 f4       	brne	.+10     	; 0x33d8 <vfprintf+0x2e8>
    33ce:	b7 01       	movw	r22, r14
    33d0:	8e e2       	ldi	r24, 0x2E	; 46
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    33d8:	c8 14       	cp	r12, r8
    33da:	d9 04       	cpc	r13, r9
    33dc:	4c f0       	brlt	.+18     	; 0x33f0 <vfprintf+0x300>
    33de:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e0:	98 89       	ldd	r25, Y+16	; 0x10
    33e2:	88 15       	cp	r24, r8
    33e4:	99 05       	cpc	r25, r9
    33e6:	24 f4       	brge	.+8      	; 0x33f0 <vfprintf+0x300>
    33e8:	ed 85       	ldd	r30, Y+13	; 0x0d
    33ea:	fe 85       	ldd	r31, Y+14	; 0x0e
    33ec:	81 81       	ldd	r24, Z+1	; 0x01
    33ee:	01 c0       	rjmp	.+2      	; 0x33f2 <vfprintf+0x302>
    33f0:	80 e3       	ldi	r24, 0x30	; 48
    33f2:	f1 e0       	ldi	r31, 0x01	; 1
    33f4:	8f 1a       	sub	r8, r31
    33f6:	91 08       	sbc	r9, r1
    33f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    33fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    33fc:	2f 5f       	subi	r18, 0xFF	; 255
    33fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3400:	3e 87       	std	Y+14, r19	; 0x0e
    3402:	2d 87       	std	Y+13, r18	; 0x0d
    3404:	80 16       	cp	r8, r16
    3406:	91 06       	cpc	r9, r17
    3408:	2c f0       	brlt	.+10     	; 0x3414 <vfprintf+0x324>
    340a:	b7 01       	movw	r22, r14
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    3412:	d9 cf       	rjmp	.-78     	; 0x33c6 <vfprintf+0x2d6>
    3414:	c8 14       	cp	r12, r8
    3416:	d9 04       	cpc	r13, r9
    3418:	41 f4       	brne	.+16     	; 0x342a <vfprintf+0x33a>
    341a:	9a 81       	ldd	r25, Y+2	; 0x02
    341c:	96 33       	cpi	r25, 0x36	; 54
    341e:	20 f4       	brcc	.+8      	; 0x3428 <vfprintf+0x338>
    3420:	95 33       	cpi	r25, 0x35	; 53
    3422:	19 f4       	brne	.+6      	; 0x342a <vfprintf+0x33a>
    3424:	3c 85       	ldd	r19, Y+12	; 0x0c
    3426:	34 ff       	sbrs	r19, 4
    3428:	81 e3       	ldi	r24, 0x31	; 49
    342a:	b7 01       	movw	r22, r14
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	4e c0       	rjmp	.+156    	; 0x34cc <vfprintf+0x3dc>
    3430:	8a 81       	ldd	r24, Y+2	; 0x02
    3432:	81 33       	cpi	r24, 0x31	; 49
    3434:	19 f0       	breq	.+6      	; 0x343c <vfprintf+0x34c>
    3436:	9c 85       	ldd	r25, Y+12	; 0x0c
    3438:	9f 7e       	andi	r25, 0xEF	; 239
    343a:	9c 87       	std	Y+12, r25	; 0x0c
    343c:	b7 01       	movw	r22, r14
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    3444:	11 11       	cpse	r17, r1
    3446:	05 c0       	rjmp	.+10     	; 0x3452 <vfprintf+0x362>
    3448:	94 fc       	sbrc	r9, 4
    344a:	18 c0       	rjmp	.+48     	; 0x347c <vfprintf+0x38c>
    344c:	85 e6       	ldi	r24, 0x65	; 101
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	17 c0       	rjmp	.+46     	; 0x3480 <vfprintf+0x390>
    3452:	b7 01       	movw	r22, r14
    3454:	8e e2       	ldi	r24, 0x2E	; 46
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    345c:	1e 5f       	subi	r17, 0xFE	; 254
    345e:	82 e0       	ldi	r24, 0x02	; 2
    3460:	01 e0       	ldi	r16, 0x01	; 1
    3462:	08 0f       	add	r16, r24
    3464:	f3 01       	movw	r30, r6
    3466:	e8 0f       	add	r30, r24
    3468:	f1 1d       	adc	r31, r1
    346a:	80 81       	ld	r24, Z
    346c:	b7 01       	movw	r22, r14
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    3474:	80 2f       	mov	r24, r16
    3476:	01 13       	cpse	r16, r17
    3478:	f3 cf       	rjmp	.-26     	; 0x3460 <vfprintf+0x370>
    347a:	e6 cf       	rjmp	.-52     	; 0x3448 <vfprintf+0x358>
    347c:	85 e4       	ldi	r24, 0x45	; 69
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	b7 01       	movw	r22, r14
    3482:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    3486:	d7 fc       	sbrc	r13, 7
    3488:	06 c0       	rjmp	.+12     	; 0x3496 <vfprintf+0x3a6>
    348a:	c1 14       	cp	r12, r1
    348c:	d1 04       	cpc	r13, r1
    348e:	41 f4       	brne	.+16     	; 0x34a0 <vfprintf+0x3b0>
    3490:	ec 85       	ldd	r30, Y+12	; 0x0c
    3492:	e4 ff       	sbrs	r30, 4
    3494:	05 c0       	rjmp	.+10     	; 0x34a0 <vfprintf+0x3b0>
    3496:	d1 94       	neg	r13
    3498:	c1 94       	neg	r12
    349a:	d1 08       	sbc	r13, r1
    349c:	8d e2       	ldi	r24, 0x2D	; 45
    349e:	01 c0       	rjmp	.+2      	; 0x34a2 <vfprintf+0x3b2>
    34a0:	8b e2       	ldi	r24, 0x2B	; 43
    34a2:	b7 01       	movw	r22, r14
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    34aa:	80 e3       	ldi	r24, 0x30	; 48
    34ac:	2a e0       	ldi	r18, 0x0A	; 10
    34ae:	c2 16       	cp	r12, r18
    34b0:	d1 04       	cpc	r13, r1
    34b2:	2c f0       	brlt	.+10     	; 0x34be <vfprintf+0x3ce>
    34b4:	8f 5f       	subi	r24, 0xFF	; 255
    34b6:	fa e0       	ldi	r31, 0x0A	; 10
    34b8:	cf 1a       	sub	r12, r31
    34ba:	d1 08       	sbc	r13, r1
    34bc:	f7 cf       	rjmp	.-18     	; 0x34ac <vfprintf+0x3bc>
    34be:	b7 01       	movw	r22, r14
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    34c6:	b7 01       	movw	r22, r14
    34c8:	c6 01       	movw	r24, r12
    34ca:	c0 96       	adiw	r24, 0x30	; 48
    34cc:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    34d0:	54 c1       	rjmp	.+680    	; 0x377a <vfprintf+0x68a>
    34d2:	83 36       	cpi	r24, 0x63	; 99
    34d4:	31 f0       	breq	.+12     	; 0x34e2 <vfprintf+0x3f2>
    34d6:	83 37       	cpi	r24, 0x73	; 115
    34d8:	79 f0       	breq	.+30     	; 0x34f8 <vfprintf+0x408>
    34da:	83 35       	cpi	r24, 0x53	; 83
    34dc:	09 f0       	breq	.+2      	; 0x34e0 <vfprintf+0x3f0>
    34de:	56 c0       	rjmp	.+172    	; 0x358c <vfprintf+0x49c>
    34e0:	20 c0       	rjmp	.+64     	; 0x3522 <vfprintf+0x432>
    34e2:	56 01       	movw	r10, r12
    34e4:	32 e0       	ldi	r19, 0x02	; 2
    34e6:	a3 0e       	add	r10, r19
    34e8:	b1 1c       	adc	r11, r1
    34ea:	f6 01       	movw	r30, r12
    34ec:	80 81       	ld	r24, Z
    34ee:	89 83       	std	Y+1, r24	; 0x01
    34f0:	01 e0       	ldi	r16, 0x01	; 1
    34f2:	10 e0       	ldi	r17, 0x00	; 0
    34f4:	63 01       	movw	r12, r6
    34f6:	12 c0       	rjmp	.+36     	; 0x351c <vfprintf+0x42c>
    34f8:	56 01       	movw	r10, r12
    34fa:	f2 e0       	ldi	r31, 0x02	; 2
    34fc:	af 0e       	add	r10, r31
    34fe:	b1 1c       	adc	r11, r1
    3500:	f6 01       	movw	r30, r12
    3502:	c0 80       	ld	r12, Z
    3504:	d1 80       	ldd	r13, Z+1	; 0x01
    3506:	96 fe       	sbrs	r9, 6
    3508:	03 c0       	rjmp	.+6      	; 0x3510 <vfprintf+0x420>
    350a:	61 2f       	mov	r22, r17
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	02 c0       	rjmp	.+4      	; 0x3514 <vfprintf+0x424>
    3510:	6f ef       	ldi	r22, 0xFF	; 255
    3512:	7f ef       	ldi	r23, 0xFF	; 255
    3514:	c6 01       	movw	r24, r12
    3516:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <strnlen>
    351a:	8c 01       	movw	r16, r24
    351c:	f9 2d       	mov	r31, r9
    351e:	ff 77       	andi	r31, 0x7F	; 127
    3520:	14 c0       	rjmp	.+40     	; 0x354a <vfprintf+0x45a>
    3522:	56 01       	movw	r10, r12
    3524:	22 e0       	ldi	r18, 0x02	; 2
    3526:	a2 0e       	add	r10, r18
    3528:	b1 1c       	adc	r11, r1
    352a:	f6 01       	movw	r30, r12
    352c:	c0 80       	ld	r12, Z
    352e:	d1 80       	ldd	r13, Z+1	; 0x01
    3530:	96 fe       	sbrs	r9, 6
    3532:	03 c0       	rjmp	.+6      	; 0x353a <vfprintf+0x44a>
    3534:	61 2f       	mov	r22, r17
    3536:	70 e0       	ldi	r23, 0x00	; 0
    3538:	02 c0       	rjmp	.+4      	; 0x353e <vfprintf+0x44e>
    353a:	6f ef       	ldi	r22, 0xFF	; 255
    353c:	7f ef       	ldi	r23, 0xFF	; 255
    353e:	c6 01       	movw	r24, r12
    3540:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strnlen_P>
    3544:	8c 01       	movw	r16, r24
    3546:	f9 2d       	mov	r31, r9
    3548:	f0 68       	ori	r31, 0x80	; 128
    354a:	9f 2e       	mov	r9, r31
    354c:	f3 fd       	sbrc	r31, 3
    354e:	1a c0       	rjmp	.+52     	; 0x3584 <vfprintf+0x494>
    3550:	85 2d       	mov	r24, r5
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	08 17       	cp	r16, r24
    3556:	19 07       	cpc	r17, r25
    3558:	a8 f4       	brcc	.+42     	; 0x3584 <vfprintf+0x494>
    355a:	b7 01       	movw	r22, r14
    355c:	80 e2       	ldi	r24, 0x20	; 32
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    3564:	5a 94       	dec	r5
    3566:	f4 cf       	rjmp	.-24     	; 0x3550 <vfprintf+0x460>
    3568:	f6 01       	movw	r30, r12
    356a:	97 fc       	sbrc	r9, 7
    356c:	85 91       	lpm	r24, Z+
    356e:	97 fe       	sbrs	r9, 7
    3570:	81 91       	ld	r24, Z+
    3572:	6f 01       	movw	r12, r30
    3574:	b7 01       	movw	r22, r14
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    357c:	51 10       	cpse	r5, r1
    357e:	5a 94       	dec	r5
    3580:	01 50       	subi	r16, 0x01	; 1
    3582:	11 09       	sbc	r17, r1
    3584:	01 15       	cp	r16, r1
    3586:	11 05       	cpc	r17, r1
    3588:	79 f7       	brne	.-34     	; 0x3568 <vfprintf+0x478>
    358a:	f7 c0       	rjmp	.+494    	; 0x377a <vfprintf+0x68a>
    358c:	84 36       	cpi	r24, 0x64	; 100
    358e:	11 f0       	breq	.+4      	; 0x3594 <vfprintf+0x4a4>
    3590:	89 36       	cpi	r24, 0x69	; 105
    3592:	61 f5       	brne	.+88     	; 0x35ec <vfprintf+0x4fc>
    3594:	56 01       	movw	r10, r12
    3596:	97 fe       	sbrs	r9, 7
    3598:	09 c0       	rjmp	.+18     	; 0x35ac <vfprintf+0x4bc>
    359a:	24 e0       	ldi	r18, 0x04	; 4
    359c:	a2 0e       	add	r10, r18
    359e:	b1 1c       	adc	r11, r1
    35a0:	f6 01       	movw	r30, r12
    35a2:	60 81       	ld	r22, Z
    35a4:	71 81       	ldd	r23, Z+1	; 0x01
    35a6:	82 81       	ldd	r24, Z+2	; 0x02
    35a8:	93 81       	ldd	r25, Z+3	; 0x03
    35aa:	0a c0       	rjmp	.+20     	; 0x35c0 <vfprintf+0x4d0>
    35ac:	f2 e0       	ldi	r31, 0x02	; 2
    35ae:	af 0e       	add	r10, r31
    35b0:	b1 1c       	adc	r11, r1
    35b2:	f6 01       	movw	r30, r12
    35b4:	60 81       	ld	r22, Z
    35b6:	71 81       	ldd	r23, Z+1	; 0x01
    35b8:	07 2e       	mov	r0, r23
    35ba:	00 0c       	add	r0, r0
    35bc:	88 0b       	sbc	r24, r24
    35be:	99 0b       	sbc	r25, r25
    35c0:	f9 2d       	mov	r31, r9
    35c2:	ff 76       	andi	r31, 0x6F	; 111
    35c4:	9f 2e       	mov	r9, r31
    35c6:	97 ff       	sbrs	r25, 7
    35c8:	09 c0       	rjmp	.+18     	; 0x35dc <vfprintf+0x4ec>
    35ca:	90 95       	com	r25
    35cc:	80 95       	com	r24
    35ce:	70 95       	com	r23
    35d0:	61 95       	neg	r22
    35d2:	7f 4f       	sbci	r23, 0xFF	; 255
    35d4:	8f 4f       	sbci	r24, 0xFF	; 255
    35d6:	9f 4f       	sbci	r25, 0xFF	; 255
    35d8:	f0 68       	ori	r31, 0x80	; 128
    35da:	9f 2e       	mov	r9, r31
    35dc:	2a e0       	ldi	r18, 0x0A	; 10
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	a3 01       	movw	r20, r6
    35e2:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__ultoa_invert>
    35e6:	c8 2e       	mov	r12, r24
    35e8:	c6 18       	sub	r12, r6
    35ea:	3f c0       	rjmp	.+126    	; 0x366a <vfprintf+0x57a>
    35ec:	09 2d       	mov	r16, r9
    35ee:	85 37       	cpi	r24, 0x75	; 117
    35f0:	21 f4       	brne	.+8      	; 0x35fa <vfprintf+0x50a>
    35f2:	0f 7e       	andi	r16, 0xEF	; 239
    35f4:	2a e0       	ldi	r18, 0x0A	; 10
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	1d c0       	rjmp	.+58     	; 0x3634 <vfprintf+0x544>
    35fa:	09 7f       	andi	r16, 0xF9	; 249
    35fc:	8f 36       	cpi	r24, 0x6F	; 111
    35fe:	91 f0       	breq	.+36     	; 0x3624 <vfprintf+0x534>
    3600:	18 f4       	brcc	.+6      	; 0x3608 <vfprintf+0x518>
    3602:	88 35       	cpi	r24, 0x58	; 88
    3604:	59 f0       	breq	.+22     	; 0x361c <vfprintf+0x52c>
    3606:	c3 c0       	rjmp	.+390    	; 0x378e <vfprintf+0x69e>
    3608:	80 37       	cpi	r24, 0x70	; 112
    360a:	19 f0       	breq	.+6      	; 0x3612 <vfprintf+0x522>
    360c:	88 37       	cpi	r24, 0x78	; 120
    360e:	11 f0       	breq	.+4      	; 0x3614 <vfprintf+0x524>
    3610:	be c0       	rjmp	.+380    	; 0x378e <vfprintf+0x69e>
    3612:	00 61       	ori	r16, 0x10	; 16
    3614:	04 ff       	sbrs	r16, 4
    3616:	09 c0       	rjmp	.+18     	; 0x362a <vfprintf+0x53a>
    3618:	04 60       	ori	r16, 0x04	; 4
    361a:	07 c0       	rjmp	.+14     	; 0x362a <vfprintf+0x53a>
    361c:	94 fe       	sbrs	r9, 4
    361e:	08 c0       	rjmp	.+16     	; 0x3630 <vfprintf+0x540>
    3620:	06 60       	ori	r16, 0x06	; 6
    3622:	06 c0       	rjmp	.+12     	; 0x3630 <vfprintf+0x540>
    3624:	28 e0       	ldi	r18, 0x08	; 8
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	05 c0       	rjmp	.+10     	; 0x3634 <vfprintf+0x544>
    362a:	20 e1       	ldi	r18, 0x10	; 16
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	02 c0       	rjmp	.+4      	; 0x3634 <vfprintf+0x544>
    3630:	20 e1       	ldi	r18, 0x10	; 16
    3632:	32 e0       	ldi	r19, 0x02	; 2
    3634:	56 01       	movw	r10, r12
    3636:	07 ff       	sbrs	r16, 7
    3638:	09 c0       	rjmp	.+18     	; 0x364c <vfprintf+0x55c>
    363a:	84 e0       	ldi	r24, 0x04	; 4
    363c:	a8 0e       	add	r10, r24
    363e:	b1 1c       	adc	r11, r1
    3640:	f6 01       	movw	r30, r12
    3642:	60 81       	ld	r22, Z
    3644:	71 81       	ldd	r23, Z+1	; 0x01
    3646:	82 81       	ldd	r24, Z+2	; 0x02
    3648:	93 81       	ldd	r25, Z+3	; 0x03
    364a:	08 c0       	rjmp	.+16     	; 0x365c <vfprintf+0x56c>
    364c:	f2 e0       	ldi	r31, 0x02	; 2
    364e:	af 0e       	add	r10, r31
    3650:	b1 1c       	adc	r11, r1
    3652:	f6 01       	movw	r30, r12
    3654:	60 81       	ld	r22, Z
    3656:	71 81       	ldd	r23, Z+1	; 0x01
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	a3 01       	movw	r20, r6
    365e:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__ultoa_invert>
    3662:	c8 2e       	mov	r12, r24
    3664:	c6 18       	sub	r12, r6
    3666:	0f 77       	andi	r16, 0x7F	; 127
    3668:	90 2e       	mov	r9, r16
    366a:	96 fe       	sbrs	r9, 6
    366c:	0b c0       	rjmp	.+22     	; 0x3684 <vfprintf+0x594>
    366e:	09 2d       	mov	r16, r9
    3670:	0e 7f       	andi	r16, 0xFE	; 254
    3672:	c1 16       	cp	r12, r17
    3674:	50 f4       	brcc	.+20     	; 0x368a <vfprintf+0x59a>
    3676:	94 fe       	sbrs	r9, 4
    3678:	0a c0       	rjmp	.+20     	; 0x368e <vfprintf+0x59e>
    367a:	92 fc       	sbrc	r9, 2
    367c:	08 c0       	rjmp	.+16     	; 0x368e <vfprintf+0x59e>
    367e:	09 2d       	mov	r16, r9
    3680:	0e 7e       	andi	r16, 0xEE	; 238
    3682:	05 c0       	rjmp	.+10     	; 0x368e <vfprintf+0x59e>
    3684:	dc 2c       	mov	r13, r12
    3686:	09 2d       	mov	r16, r9
    3688:	03 c0       	rjmp	.+6      	; 0x3690 <vfprintf+0x5a0>
    368a:	dc 2c       	mov	r13, r12
    368c:	01 c0       	rjmp	.+2      	; 0x3690 <vfprintf+0x5a0>
    368e:	d1 2e       	mov	r13, r17
    3690:	04 ff       	sbrs	r16, 4
    3692:	0d c0       	rjmp	.+26     	; 0x36ae <vfprintf+0x5be>
    3694:	fe 01       	movw	r30, r28
    3696:	ec 0d       	add	r30, r12
    3698:	f1 1d       	adc	r31, r1
    369a:	80 81       	ld	r24, Z
    369c:	80 33       	cpi	r24, 0x30	; 48
    369e:	11 f4       	brne	.+4      	; 0x36a4 <vfprintf+0x5b4>
    36a0:	09 7e       	andi	r16, 0xE9	; 233
    36a2:	09 c0       	rjmp	.+18     	; 0x36b6 <vfprintf+0x5c6>
    36a4:	02 ff       	sbrs	r16, 2
    36a6:	06 c0       	rjmp	.+12     	; 0x36b4 <vfprintf+0x5c4>
    36a8:	d3 94       	inc	r13
    36aa:	d3 94       	inc	r13
    36ac:	04 c0       	rjmp	.+8      	; 0x36b6 <vfprintf+0x5c6>
    36ae:	80 2f       	mov	r24, r16
    36b0:	86 78       	andi	r24, 0x86	; 134
    36b2:	09 f0       	breq	.+2      	; 0x36b6 <vfprintf+0x5c6>
    36b4:	d3 94       	inc	r13
    36b6:	03 fd       	sbrc	r16, 3
    36b8:	11 c0       	rjmp	.+34     	; 0x36dc <vfprintf+0x5ec>
    36ba:	00 ff       	sbrs	r16, 0
    36bc:	06 c0       	rjmp	.+12     	; 0x36ca <vfprintf+0x5da>
    36be:	1c 2d       	mov	r17, r12
    36c0:	d5 14       	cp	r13, r5
    36c2:	80 f4       	brcc	.+32     	; 0x36e4 <vfprintf+0x5f4>
    36c4:	15 0d       	add	r17, r5
    36c6:	1d 19       	sub	r17, r13
    36c8:	0d c0       	rjmp	.+26     	; 0x36e4 <vfprintf+0x5f4>
    36ca:	d5 14       	cp	r13, r5
    36cc:	58 f4       	brcc	.+22     	; 0x36e4 <vfprintf+0x5f4>
    36ce:	b7 01       	movw	r22, r14
    36d0:	80 e2       	ldi	r24, 0x20	; 32
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    36d8:	d3 94       	inc	r13
    36da:	f7 cf       	rjmp	.-18     	; 0x36ca <vfprintf+0x5da>
    36dc:	d5 14       	cp	r13, r5
    36de:	10 f4       	brcc	.+4      	; 0x36e4 <vfprintf+0x5f4>
    36e0:	5d 18       	sub	r5, r13
    36e2:	01 c0       	rjmp	.+2      	; 0x36e6 <vfprintf+0x5f6>
    36e4:	51 2c       	mov	r5, r1
    36e6:	04 ff       	sbrs	r16, 4
    36e8:	10 c0       	rjmp	.+32     	; 0x370a <vfprintf+0x61a>
    36ea:	b7 01       	movw	r22, r14
    36ec:	80 e3       	ldi	r24, 0x30	; 48
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    36f4:	02 ff       	sbrs	r16, 2
    36f6:	17 c0       	rjmp	.+46     	; 0x3726 <vfprintf+0x636>
    36f8:	01 fd       	sbrc	r16, 1
    36fa:	03 c0       	rjmp	.+6      	; 0x3702 <vfprintf+0x612>
    36fc:	88 e7       	ldi	r24, 0x78	; 120
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	02 c0       	rjmp	.+4      	; 0x3706 <vfprintf+0x616>
    3702:	88 e5       	ldi	r24, 0x58	; 88
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	b7 01       	movw	r22, r14
    3708:	0c c0       	rjmp	.+24     	; 0x3722 <vfprintf+0x632>
    370a:	80 2f       	mov	r24, r16
    370c:	86 78       	andi	r24, 0x86	; 134
    370e:	59 f0       	breq	.+22     	; 0x3726 <vfprintf+0x636>
    3710:	01 ff       	sbrs	r16, 1
    3712:	02 c0       	rjmp	.+4      	; 0x3718 <vfprintf+0x628>
    3714:	8b e2       	ldi	r24, 0x2B	; 43
    3716:	01 c0       	rjmp	.+2      	; 0x371a <vfprintf+0x62a>
    3718:	80 e2       	ldi	r24, 0x20	; 32
    371a:	07 fd       	sbrc	r16, 7
    371c:	8d e2       	ldi	r24, 0x2D	; 45
    371e:	b7 01       	movw	r22, r14
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    3726:	c1 16       	cp	r12, r17
    3728:	38 f4       	brcc	.+14     	; 0x3738 <vfprintf+0x648>
    372a:	b7 01       	movw	r22, r14
    372c:	80 e3       	ldi	r24, 0x30	; 48
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    3734:	11 50       	subi	r17, 0x01	; 1
    3736:	f7 cf       	rjmp	.-18     	; 0x3726 <vfprintf+0x636>
    3738:	ca 94       	dec	r12
    373a:	f3 01       	movw	r30, r6
    373c:	ec 0d       	add	r30, r12
    373e:	f1 1d       	adc	r31, r1
    3740:	80 81       	ld	r24, Z
    3742:	b7 01       	movw	r22, r14
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    374a:	c1 10       	cpse	r12, r1
    374c:	f5 cf       	rjmp	.-22     	; 0x3738 <vfprintf+0x648>
    374e:	15 c0       	rjmp	.+42     	; 0x377a <vfprintf+0x68a>
    3750:	f4 e0       	ldi	r31, 0x04	; 4
    3752:	f5 15       	cp	r31, r5
    3754:	60 f5       	brcc	.+88     	; 0x37ae <vfprintf+0x6be>
    3756:	84 e0       	ldi	r24, 0x04	; 4
    3758:	58 1a       	sub	r5, r24
    375a:	93 fe       	sbrs	r9, 3
    375c:	1f c0       	rjmp	.+62     	; 0x379c <vfprintf+0x6ac>
    375e:	01 11       	cpse	r16, r1
    3760:	27 c0       	rjmp	.+78     	; 0x37b0 <vfprintf+0x6c0>
    3762:	2c 85       	ldd	r18, Y+12	; 0x0c
    3764:	23 ff       	sbrs	r18, 3
    3766:	2a c0       	rjmp	.+84     	; 0x37bc <vfprintf+0x6cc>
    3768:	04 eb       	ldi	r16, 0xB4	; 180
    376a:	10 e0       	ldi	r17, 0x00	; 0
    376c:	39 2d       	mov	r19, r9
    376e:	30 71       	andi	r19, 0x10	; 16
    3770:	93 2e       	mov	r9, r19
    3772:	f8 01       	movw	r30, r16
    3774:	84 91       	lpm	r24, Z
    3776:	81 11       	cpse	r24, r1
    3778:	24 c0       	rjmp	.+72     	; 0x37c2 <vfprintf+0x6d2>
    377a:	55 20       	and	r5, r5
    377c:	09 f4       	brne	.+2      	; 0x3780 <vfprintf+0x690>
    377e:	e4 cc       	rjmp	.-1592   	; 0x3148 <vfprintf+0x58>
    3780:	b7 01       	movw	r22, r14
    3782:	80 e2       	ldi	r24, 0x20	; 32
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    378a:	5a 94       	dec	r5
    378c:	f6 cf       	rjmp	.-20     	; 0x377a <vfprintf+0x68a>
    378e:	f7 01       	movw	r30, r14
    3790:	86 81       	ldd	r24, Z+6	; 0x06
    3792:	97 81       	ldd	r25, Z+7	; 0x07
    3794:	26 c0       	rjmp	.+76     	; 0x37e2 <vfprintf+0x6f2>
    3796:	8f ef       	ldi	r24, 0xFF	; 255
    3798:	9f ef       	ldi	r25, 0xFF	; 255
    379a:	23 c0       	rjmp	.+70     	; 0x37e2 <vfprintf+0x6f2>
    379c:	b7 01       	movw	r22, r14
    379e:	80 e2       	ldi	r24, 0x20	; 32
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    37a6:	5a 94       	dec	r5
    37a8:	51 10       	cpse	r5, r1
    37aa:	f8 cf       	rjmp	.-16     	; 0x379c <vfprintf+0x6ac>
    37ac:	d8 cf       	rjmp	.-80     	; 0x375e <vfprintf+0x66e>
    37ae:	51 2c       	mov	r5, r1
    37b0:	b7 01       	movw	r22, r14
    37b2:	80 2f       	mov	r24, r16
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    37ba:	d3 cf       	rjmp	.-90     	; 0x3762 <vfprintf+0x672>
    37bc:	08 eb       	ldi	r16, 0xB8	; 184
    37be:	10 e0       	ldi	r17, 0x00	; 0
    37c0:	d5 cf       	rjmp	.-86     	; 0x376c <vfprintf+0x67c>
    37c2:	91 10       	cpse	r9, r1
    37c4:	80 52       	subi	r24, 0x20	; 32
    37c6:	b7 01       	movw	r22, r14
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <fputc>
    37ce:	0f 5f       	subi	r16, 0xFF	; 255
    37d0:	1f 4f       	sbci	r17, 0xFF	; 255
    37d2:	cf cf       	rjmp	.-98     	; 0x3772 <vfprintf+0x682>
    37d4:	23 e0       	ldi	r18, 0x03	; 3
    37d6:	25 15       	cp	r18, r5
    37d8:	10 f4       	brcc	.+4      	; 0x37de <vfprintf+0x6ee>
    37da:	83 e0       	ldi	r24, 0x03	; 3
    37dc:	bd cf       	rjmp	.-134    	; 0x3758 <vfprintf+0x668>
    37de:	51 2c       	mov	r5, r1
    37e0:	c0 cf       	rjmp	.-128    	; 0x3762 <vfprintf+0x672>
    37e2:	60 96       	adiw	r28, 0x10	; 16
    37e4:	e2 e1       	ldi	r30, 0x12	; 18
    37e6:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__epilogue_restores__>

000037ea <__udivmodsi4>:
    37ea:	a1 e2       	ldi	r26, 0x21	; 33
    37ec:	1a 2e       	mov	r1, r26
    37ee:	aa 1b       	sub	r26, r26
    37f0:	bb 1b       	sub	r27, r27
    37f2:	fd 01       	movw	r30, r26
    37f4:	0d c0       	rjmp	.+26     	; 0x3810 <__udivmodsi4_ep>

000037f6 <__udivmodsi4_loop>:
    37f6:	aa 1f       	adc	r26, r26
    37f8:	bb 1f       	adc	r27, r27
    37fa:	ee 1f       	adc	r30, r30
    37fc:	ff 1f       	adc	r31, r31
    37fe:	a2 17       	cp	r26, r18
    3800:	b3 07       	cpc	r27, r19
    3802:	e4 07       	cpc	r30, r20
    3804:	f5 07       	cpc	r31, r21
    3806:	20 f0       	brcs	.+8      	; 0x3810 <__udivmodsi4_ep>
    3808:	a2 1b       	sub	r26, r18
    380a:	b3 0b       	sbc	r27, r19
    380c:	e4 0b       	sbc	r30, r20
    380e:	f5 0b       	sbc	r31, r21

00003810 <__udivmodsi4_ep>:
    3810:	66 1f       	adc	r22, r22
    3812:	77 1f       	adc	r23, r23
    3814:	88 1f       	adc	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	1a 94       	dec	r1
    381a:	69 f7       	brne	.-38     	; 0x37f6 <__udivmodsi4_loop>
    381c:	60 95       	com	r22
    381e:	70 95       	com	r23
    3820:	80 95       	com	r24
    3822:	90 95       	com	r25
    3824:	9b 01       	movw	r18, r22
    3826:	ac 01       	movw	r20, r24
    3828:	bd 01       	movw	r22, r26
    382a:	cf 01       	movw	r24, r30
    382c:	08 95       	ret

0000382e <__umulhisi3>:
    382e:	a2 9f       	mul	r26, r18
    3830:	b0 01       	movw	r22, r0
    3832:	b3 9f       	mul	r27, r19
    3834:	c0 01       	movw	r24, r0
    3836:	a3 9f       	mul	r26, r19
    3838:	70 0d       	add	r23, r0
    383a:	81 1d       	adc	r24, r1
    383c:	11 24       	eor	r1, r1
    383e:	91 1d       	adc	r25, r1
    3840:	b2 9f       	mul	r27, r18
    3842:	70 0d       	add	r23, r0
    3844:	81 1d       	adc	r24, r1
    3846:	11 24       	eor	r1, r1
    3848:	91 1d       	adc	r25, r1
    384a:	08 95       	ret

0000384c <__muluhisi3>:
    384c:	0e 94 17 1c 	call	0x382e	; 0x382e <__umulhisi3>
    3850:	a5 9f       	mul	r26, r21
    3852:	90 0d       	add	r25, r0
    3854:	b4 9f       	mul	r27, r20
    3856:	90 0d       	add	r25, r0
    3858:	a4 9f       	mul	r26, r20
    385a:	80 0d       	add	r24, r0
    385c:	91 1d       	adc	r25, r1
    385e:	11 24       	eor	r1, r1
    3860:	08 95       	ret

00003862 <__prologue_saves__>:
    3862:	2f 92       	push	r2
    3864:	3f 92       	push	r3
    3866:	4f 92       	push	r4
    3868:	5f 92       	push	r5
    386a:	6f 92       	push	r6
    386c:	7f 92       	push	r7
    386e:	8f 92       	push	r8
    3870:	9f 92       	push	r9
    3872:	af 92       	push	r10
    3874:	bf 92       	push	r11
    3876:	cf 92       	push	r12
    3878:	df 92       	push	r13
    387a:	ef 92       	push	r14
    387c:	ff 92       	push	r15
    387e:	0f 93       	push	r16
    3880:	1f 93       	push	r17
    3882:	cf 93       	push	r28
    3884:	df 93       	push	r29
    3886:	cd b7       	in	r28, 0x3d	; 61
    3888:	de b7       	in	r29, 0x3e	; 62
    388a:	ca 1b       	sub	r28, r26
    388c:	db 0b       	sbc	r29, r27
    388e:	0f b6       	in	r0, 0x3f	; 63
    3890:	f8 94       	cli
    3892:	de bf       	out	0x3e, r29	; 62
    3894:	0f be       	out	0x3f, r0	; 63
    3896:	cd bf       	out	0x3d, r28	; 61
    3898:	09 94       	ijmp

0000389a <__epilogue_restores__>:
    389a:	2a 88       	ldd	r2, Y+18	; 0x12
    389c:	39 88       	ldd	r3, Y+17	; 0x11
    389e:	48 88       	ldd	r4, Y+16	; 0x10
    38a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    38a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    38a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    38a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    38a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    38aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    38ac:	b9 84       	ldd	r11, Y+9	; 0x09
    38ae:	c8 84       	ldd	r12, Y+8	; 0x08
    38b0:	df 80       	ldd	r13, Y+7	; 0x07
    38b2:	ee 80       	ldd	r14, Y+6	; 0x06
    38b4:	fd 80       	ldd	r15, Y+5	; 0x05
    38b6:	0c 81       	ldd	r16, Y+4	; 0x04
    38b8:	1b 81       	ldd	r17, Y+3	; 0x03
    38ba:	aa 81       	ldd	r26, Y+2	; 0x02
    38bc:	b9 81       	ldd	r27, Y+1	; 0x01
    38be:	ce 0f       	add	r28, r30
    38c0:	d1 1d       	adc	r29, r1
    38c2:	0f b6       	in	r0, 0x3f	; 63
    38c4:	f8 94       	cli
    38c6:	de bf       	out	0x3e, r29	; 62
    38c8:	0f be       	out	0x3f, r0	; 63
    38ca:	cd bf       	out	0x3d, r28	; 61
    38cc:	ed 01       	movw	r28, r26
    38ce:	08 95       	ret

000038d0 <__ftoa_engine>:
    38d0:	28 30       	cpi	r18, 0x08	; 8
    38d2:	08 f0       	brcs	.+2      	; 0x38d6 <__ftoa_engine+0x6>
    38d4:	27 e0       	ldi	r18, 0x07	; 7
    38d6:	33 27       	eor	r19, r19
    38d8:	da 01       	movw	r26, r20
    38da:	99 0f       	add	r25, r25
    38dc:	31 1d       	adc	r19, r1
    38de:	87 fd       	sbrc	r24, 7
    38e0:	91 60       	ori	r25, 0x01	; 1
    38e2:	00 96       	adiw	r24, 0x00	; 0
    38e4:	61 05       	cpc	r22, r1
    38e6:	71 05       	cpc	r23, r1
    38e8:	39 f4       	brne	.+14     	; 0x38f8 <__ftoa_engine+0x28>
    38ea:	32 60       	ori	r19, 0x02	; 2
    38ec:	2e 5f       	subi	r18, 0xFE	; 254
    38ee:	3d 93       	st	X+, r19
    38f0:	30 e3       	ldi	r19, 0x30	; 48
    38f2:	2a 95       	dec	r18
    38f4:	e1 f7       	brne	.-8      	; 0x38ee <__ftoa_engine+0x1e>
    38f6:	08 95       	ret
    38f8:	9f 3f       	cpi	r25, 0xFF	; 255
    38fa:	30 f0       	brcs	.+12     	; 0x3908 <__ftoa_engine+0x38>
    38fc:	80 38       	cpi	r24, 0x80	; 128
    38fe:	71 05       	cpc	r23, r1
    3900:	61 05       	cpc	r22, r1
    3902:	09 f0       	breq	.+2      	; 0x3906 <__ftoa_engine+0x36>
    3904:	3c 5f       	subi	r19, 0xFC	; 252
    3906:	3c 5f       	subi	r19, 0xFC	; 252
    3908:	3d 93       	st	X+, r19
    390a:	91 30       	cpi	r25, 0x01	; 1
    390c:	08 f0       	brcs	.+2      	; 0x3910 <__ftoa_engine+0x40>
    390e:	80 68       	ori	r24, 0x80	; 128
    3910:	91 1d       	adc	r25, r1
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	1f 93       	push	r17
    3918:	0f 93       	push	r16
    391a:	ff 92       	push	r15
    391c:	ef 92       	push	r14
    391e:	19 2f       	mov	r17, r25
    3920:	98 7f       	andi	r25, 0xF8	; 248
    3922:	96 95       	lsr	r25
    3924:	e9 2f       	mov	r30, r25
    3926:	96 95       	lsr	r25
    3928:	96 95       	lsr	r25
    392a:	e9 0f       	add	r30, r25
    392c:	ff 27       	eor	r31, r31
    392e:	ea 5e       	subi	r30, 0xEA	; 234
    3930:	fe 4f       	sbci	r31, 0xFE	; 254
    3932:	99 27       	eor	r25, r25
    3934:	33 27       	eor	r19, r19
    3936:	ee 24       	eor	r14, r14
    3938:	ff 24       	eor	r15, r15
    393a:	a7 01       	movw	r20, r14
    393c:	e7 01       	movw	r28, r14
    393e:	05 90       	lpm	r0, Z+
    3940:	08 94       	sec
    3942:	07 94       	ror	r0
    3944:	28 f4       	brcc	.+10     	; 0x3950 <__ftoa_engine+0x80>
    3946:	36 0f       	add	r19, r22
    3948:	e7 1e       	adc	r14, r23
    394a:	f8 1e       	adc	r15, r24
    394c:	49 1f       	adc	r20, r25
    394e:	51 1d       	adc	r21, r1
    3950:	66 0f       	add	r22, r22
    3952:	77 1f       	adc	r23, r23
    3954:	88 1f       	adc	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	06 94       	lsr	r0
    395a:	a1 f7       	brne	.-24     	; 0x3944 <__ftoa_engine+0x74>
    395c:	05 90       	lpm	r0, Z+
    395e:	07 94       	ror	r0
    3960:	28 f4       	brcc	.+10     	; 0x396c <__ftoa_engine+0x9c>
    3962:	e7 0e       	add	r14, r23
    3964:	f8 1e       	adc	r15, r24
    3966:	49 1f       	adc	r20, r25
    3968:	56 1f       	adc	r21, r22
    396a:	c1 1d       	adc	r28, r1
    396c:	77 0f       	add	r23, r23
    396e:	88 1f       	adc	r24, r24
    3970:	99 1f       	adc	r25, r25
    3972:	66 1f       	adc	r22, r22
    3974:	06 94       	lsr	r0
    3976:	a1 f7       	brne	.-24     	; 0x3960 <__ftoa_engine+0x90>
    3978:	05 90       	lpm	r0, Z+
    397a:	07 94       	ror	r0
    397c:	28 f4       	brcc	.+10     	; 0x3988 <__ftoa_engine+0xb8>
    397e:	f8 0e       	add	r15, r24
    3980:	49 1f       	adc	r20, r25
    3982:	56 1f       	adc	r21, r22
    3984:	c7 1f       	adc	r28, r23
    3986:	d1 1d       	adc	r29, r1
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	66 1f       	adc	r22, r22
    398e:	77 1f       	adc	r23, r23
    3990:	06 94       	lsr	r0
    3992:	a1 f7       	brne	.-24     	; 0x397c <__ftoa_engine+0xac>
    3994:	05 90       	lpm	r0, Z+
    3996:	07 94       	ror	r0
    3998:	20 f4       	brcc	.+8      	; 0x39a2 <__ftoa_engine+0xd2>
    399a:	49 0f       	add	r20, r25
    399c:	56 1f       	adc	r21, r22
    399e:	c7 1f       	adc	r28, r23
    39a0:	d8 1f       	adc	r29, r24
    39a2:	99 0f       	add	r25, r25
    39a4:	66 1f       	adc	r22, r22
    39a6:	77 1f       	adc	r23, r23
    39a8:	88 1f       	adc	r24, r24
    39aa:	06 94       	lsr	r0
    39ac:	a9 f7       	brne	.-22     	; 0x3998 <__ftoa_engine+0xc8>
    39ae:	84 91       	lpm	r24, Z
    39b0:	10 95       	com	r17
    39b2:	17 70       	andi	r17, 0x07	; 7
    39b4:	41 f0       	breq	.+16     	; 0x39c6 <__ftoa_engine+0xf6>
    39b6:	d6 95       	lsr	r29
    39b8:	c7 95       	ror	r28
    39ba:	57 95       	ror	r21
    39bc:	47 95       	ror	r20
    39be:	f7 94       	ror	r15
    39c0:	e7 94       	ror	r14
    39c2:	1a 95       	dec	r17
    39c4:	c1 f7       	brne	.-16     	; 0x39b6 <__ftoa_engine+0xe6>
    39c6:	ec eb       	ldi	r30, 0xBC	; 188
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	68 94       	set
    39cc:	15 90       	lpm	r1, Z+
    39ce:	15 91       	lpm	r17, Z+
    39d0:	35 91       	lpm	r19, Z+
    39d2:	65 91       	lpm	r22, Z+
    39d4:	95 91       	lpm	r25, Z+
    39d6:	05 90       	lpm	r0, Z+
    39d8:	7f e2       	ldi	r23, 0x2F	; 47
    39da:	73 95       	inc	r23
    39dc:	e1 18       	sub	r14, r1
    39de:	f1 0a       	sbc	r15, r17
    39e0:	43 0b       	sbc	r20, r19
    39e2:	56 0b       	sbc	r21, r22
    39e4:	c9 0b       	sbc	r28, r25
    39e6:	d0 09       	sbc	r29, r0
    39e8:	c0 f7       	brcc	.-16     	; 0x39da <__ftoa_engine+0x10a>
    39ea:	e1 0c       	add	r14, r1
    39ec:	f1 1e       	adc	r15, r17
    39ee:	43 1f       	adc	r20, r19
    39f0:	56 1f       	adc	r21, r22
    39f2:	c9 1f       	adc	r28, r25
    39f4:	d0 1d       	adc	r29, r0
    39f6:	7e f4       	brtc	.+30     	; 0x3a16 <__ftoa_engine+0x146>
    39f8:	70 33       	cpi	r23, 0x30	; 48
    39fa:	11 f4       	brne	.+4      	; 0x3a00 <__ftoa_engine+0x130>
    39fc:	8a 95       	dec	r24
    39fe:	e6 cf       	rjmp	.-52     	; 0x39cc <__ftoa_engine+0xfc>
    3a00:	e8 94       	clt
    3a02:	01 50       	subi	r16, 0x01	; 1
    3a04:	30 f0       	brcs	.+12     	; 0x3a12 <__ftoa_engine+0x142>
    3a06:	08 0f       	add	r16, r24
    3a08:	0a f4       	brpl	.+2      	; 0x3a0c <__ftoa_engine+0x13c>
    3a0a:	00 27       	eor	r16, r16
    3a0c:	02 17       	cp	r16, r18
    3a0e:	08 f4       	brcc	.+2      	; 0x3a12 <__ftoa_engine+0x142>
    3a10:	20 2f       	mov	r18, r16
    3a12:	23 95       	inc	r18
    3a14:	02 2f       	mov	r16, r18
    3a16:	7a 33       	cpi	r23, 0x3A	; 58
    3a18:	28 f0       	brcs	.+10     	; 0x3a24 <__ftoa_engine+0x154>
    3a1a:	79 e3       	ldi	r23, 0x39	; 57
    3a1c:	7d 93       	st	X+, r23
    3a1e:	2a 95       	dec	r18
    3a20:	e9 f7       	brne	.-6      	; 0x3a1c <__ftoa_engine+0x14c>
    3a22:	10 c0       	rjmp	.+32     	; 0x3a44 <__ftoa_engine+0x174>
    3a24:	7d 93       	st	X+, r23
    3a26:	2a 95       	dec	r18
    3a28:	89 f6       	brne	.-94     	; 0x39cc <__ftoa_engine+0xfc>
    3a2a:	06 94       	lsr	r0
    3a2c:	97 95       	ror	r25
    3a2e:	67 95       	ror	r22
    3a30:	37 95       	ror	r19
    3a32:	17 95       	ror	r17
    3a34:	17 94       	ror	r1
    3a36:	e1 18       	sub	r14, r1
    3a38:	f1 0a       	sbc	r15, r17
    3a3a:	43 0b       	sbc	r20, r19
    3a3c:	56 0b       	sbc	r21, r22
    3a3e:	c9 0b       	sbc	r28, r25
    3a40:	d0 09       	sbc	r29, r0
    3a42:	98 f0       	brcs	.+38     	; 0x3a6a <__ftoa_engine+0x19a>
    3a44:	23 95       	inc	r18
    3a46:	7e 91       	ld	r23, -X
    3a48:	73 95       	inc	r23
    3a4a:	7a 33       	cpi	r23, 0x3A	; 58
    3a4c:	08 f0       	brcs	.+2      	; 0x3a50 <__ftoa_engine+0x180>
    3a4e:	70 e3       	ldi	r23, 0x30	; 48
    3a50:	7c 93       	st	X, r23
    3a52:	20 13       	cpse	r18, r16
    3a54:	b8 f7       	brcc	.-18     	; 0x3a44 <__ftoa_engine+0x174>
    3a56:	7e 91       	ld	r23, -X
    3a58:	70 61       	ori	r23, 0x10	; 16
    3a5a:	7d 93       	st	X+, r23
    3a5c:	30 f0       	brcs	.+12     	; 0x3a6a <__ftoa_engine+0x19a>
    3a5e:	83 95       	inc	r24
    3a60:	71 e3       	ldi	r23, 0x31	; 49
    3a62:	7d 93       	st	X+, r23
    3a64:	70 e3       	ldi	r23, 0x30	; 48
    3a66:	2a 95       	dec	r18
    3a68:	e1 f7       	brne	.-8      	; 0x3a62 <__ftoa_engine+0x192>
    3a6a:	11 24       	eor	r1, r1
    3a6c:	ef 90       	pop	r14
    3a6e:	ff 90       	pop	r15
    3a70:	0f 91       	pop	r16
    3a72:	1f 91       	pop	r17
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	99 27       	eor	r25, r25
    3a7a:	87 fd       	sbrc	r24, 7
    3a7c:	90 95       	com	r25
    3a7e:	08 95       	ret

00003a80 <strnlen_P>:
    3a80:	fc 01       	movw	r30, r24
    3a82:	05 90       	lpm	r0, Z+
    3a84:	61 50       	subi	r22, 0x01	; 1
    3a86:	70 40       	sbci	r23, 0x00	; 0
    3a88:	01 10       	cpse	r0, r1
    3a8a:	d8 f7       	brcc	.-10     	; 0x3a82 <strnlen_P+0x2>
    3a8c:	80 95       	com	r24
    3a8e:	90 95       	com	r25
    3a90:	8e 0f       	add	r24, r30
    3a92:	9f 1f       	adc	r25, r31
    3a94:	08 95       	ret

00003a96 <memset>:
    3a96:	dc 01       	movw	r26, r24
    3a98:	01 c0       	rjmp	.+2      	; 0x3a9c <memset+0x6>
    3a9a:	6d 93       	st	X+, r22
    3a9c:	41 50       	subi	r20, 0x01	; 1
    3a9e:	50 40       	sbci	r21, 0x00	; 0
    3aa0:	e0 f7       	brcc	.-8      	; 0x3a9a <memset+0x4>
    3aa2:	08 95       	ret

00003aa4 <strnlen>:
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	61 50       	subi	r22, 0x01	; 1
    3aa8:	70 40       	sbci	r23, 0x00	; 0
    3aaa:	01 90       	ld	r0, Z+
    3aac:	01 10       	cpse	r0, r1
    3aae:	d8 f7       	brcc	.-10     	; 0x3aa6 <strnlen+0x2>
    3ab0:	80 95       	com	r24
    3ab2:	90 95       	com	r25
    3ab4:	8e 0f       	add	r24, r30
    3ab6:	9f 1f       	adc	r25, r31
    3ab8:	08 95       	ret

00003aba <fputc>:
    3aba:	0f 93       	push	r16
    3abc:	1f 93       	push	r17
    3abe:	cf 93       	push	r28
    3ac0:	df 93       	push	r29
    3ac2:	fb 01       	movw	r30, r22
    3ac4:	23 81       	ldd	r18, Z+3	; 0x03
    3ac6:	21 fd       	sbrc	r18, 1
    3ac8:	03 c0       	rjmp	.+6      	; 0x3ad0 <fputc+0x16>
    3aca:	8f ef       	ldi	r24, 0xFF	; 255
    3acc:	9f ef       	ldi	r25, 0xFF	; 255
    3ace:	2c c0       	rjmp	.+88     	; 0x3b28 <fputc+0x6e>
    3ad0:	22 ff       	sbrs	r18, 2
    3ad2:	16 c0       	rjmp	.+44     	; 0x3b00 <fputc+0x46>
    3ad4:	46 81       	ldd	r20, Z+6	; 0x06
    3ad6:	57 81       	ldd	r21, Z+7	; 0x07
    3ad8:	24 81       	ldd	r18, Z+4	; 0x04
    3ada:	35 81       	ldd	r19, Z+5	; 0x05
    3adc:	42 17       	cp	r20, r18
    3ade:	53 07       	cpc	r21, r19
    3ae0:	44 f4       	brge	.+16     	; 0x3af2 <fputc+0x38>
    3ae2:	a0 81       	ld	r26, Z
    3ae4:	b1 81       	ldd	r27, Z+1	; 0x01
    3ae6:	9d 01       	movw	r18, r26
    3ae8:	2f 5f       	subi	r18, 0xFF	; 255
    3aea:	3f 4f       	sbci	r19, 0xFF	; 255
    3aec:	31 83       	std	Z+1, r19	; 0x01
    3aee:	20 83       	st	Z, r18
    3af0:	8c 93       	st	X, r24
    3af2:	26 81       	ldd	r18, Z+6	; 0x06
    3af4:	37 81       	ldd	r19, Z+7	; 0x07
    3af6:	2f 5f       	subi	r18, 0xFF	; 255
    3af8:	3f 4f       	sbci	r19, 0xFF	; 255
    3afa:	37 83       	std	Z+7, r19	; 0x07
    3afc:	26 83       	std	Z+6, r18	; 0x06
    3afe:	14 c0       	rjmp	.+40     	; 0x3b28 <fputc+0x6e>
    3b00:	8b 01       	movw	r16, r22
    3b02:	ec 01       	movw	r28, r24
    3b04:	fb 01       	movw	r30, r22
    3b06:	00 84       	ldd	r0, Z+8	; 0x08
    3b08:	f1 85       	ldd	r31, Z+9	; 0x09
    3b0a:	e0 2d       	mov	r30, r0
    3b0c:	09 95       	icall
    3b0e:	89 2b       	or	r24, r25
    3b10:	e1 f6       	brne	.-72     	; 0x3aca <fputc+0x10>
    3b12:	d8 01       	movw	r26, r16
    3b14:	16 96       	adiw	r26, 0x06	; 6
    3b16:	8d 91       	ld	r24, X+
    3b18:	9c 91       	ld	r25, X
    3b1a:	17 97       	sbiw	r26, 0x07	; 7
    3b1c:	01 96       	adiw	r24, 0x01	; 1
    3b1e:	17 96       	adiw	r26, 0x07	; 7
    3b20:	9c 93       	st	X, r25
    3b22:	8e 93       	st	-X, r24
    3b24:	16 97       	sbiw	r26, 0x06	; 6
    3b26:	ce 01       	movw	r24, r28
    3b28:	df 91       	pop	r29
    3b2a:	cf 91       	pop	r28
    3b2c:	1f 91       	pop	r17
    3b2e:	0f 91       	pop	r16
    3b30:	08 95       	ret

00003b32 <sprintf>:
    3b32:	ae e0       	ldi	r26, 0x0E	; 14
    3b34:	b0 e0       	ldi	r27, 0x00	; 0
    3b36:	ef e9       	ldi	r30, 0x9F	; 159
    3b38:	fd e1       	ldi	r31, 0x1D	; 29
    3b3a:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__prologue_saves__+0x1c>
    3b3e:	0d 89       	ldd	r16, Y+21	; 0x15
    3b40:	1e 89       	ldd	r17, Y+22	; 0x16
    3b42:	86 e0       	ldi	r24, 0x06	; 6
    3b44:	8c 83       	std	Y+4, r24	; 0x04
    3b46:	1a 83       	std	Y+2, r17	; 0x02
    3b48:	09 83       	std	Y+1, r16	; 0x01
    3b4a:	8f ef       	ldi	r24, 0xFF	; 255
    3b4c:	9f e7       	ldi	r25, 0x7F	; 127
    3b4e:	9e 83       	std	Y+6, r25	; 0x06
    3b50:	8d 83       	std	Y+5, r24	; 0x05
    3b52:	ae 01       	movw	r20, r28
    3b54:	47 5e       	subi	r20, 0xE7	; 231
    3b56:	5f 4f       	sbci	r21, 0xFF	; 255
    3b58:	6f 89       	ldd	r22, Y+23	; 0x17
    3b5a:	78 8d       	ldd	r23, Y+24	; 0x18
    3b5c:	ce 01       	movw	r24, r28
    3b5e:	01 96       	adiw	r24, 0x01	; 1
    3b60:	0e 94 78 18 	call	0x30f0	; 0x30f0 <vfprintf>
    3b64:	ef 81       	ldd	r30, Y+7	; 0x07
    3b66:	f8 85       	ldd	r31, Y+8	; 0x08
    3b68:	e0 0f       	add	r30, r16
    3b6a:	f1 1f       	adc	r31, r17
    3b6c:	10 82       	st	Z, r1
    3b6e:	2e 96       	adiw	r28, 0x0e	; 14
    3b70:	e4 e0       	ldi	r30, 0x04	; 4
    3b72:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__epilogue_restores__+0x1c>

00003b76 <__ultoa_invert>:
    3b76:	fa 01       	movw	r30, r20
    3b78:	aa 27       	eor	r26, r26
    3b7a:	28 30       	cpi	r18, 0x08	; 8
    3b7c:	51 f1       	breq	.+84     	; 0x3bd2 <__ultoa_invert+0x5c>
    3b7e:	20 31       	cpi	r18, 0x10	; 16
    3b80:	81 f1       	breq	.+96     	; 0x3be2 <__ultoa_invert+0x6c>
    3b82:	e8 94       	clt
    3b84:	6f 93       	push	r22
    3b86:	6e 7f       	andi	r22, 0xFE	; 254
    3b88:	6e 5f       	subi	r22, 0xFE	; 254
    3b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b90:	af 4f       	sbci	r26, 0xFF	; 255
    3b92:	b1 e0       	ldi	r27, 0x01	; 1
    3b94:	3e d0       	rcall	.+124    	; 0x3c12 <__ultoa_invert+0x9c>
    3b96:	b4 e0       	ldi	r27, 0x04	; 4
    3b98:	3c d0       	rcall	.+120    	; 0x3c12 <__ultoa_invert+0x9c>
    3b9a:	67 0f       	add	r22, r23
    3b9c:	78 1f       	adc	r23, r24
    3b9e:	89 1f       	adc	r24, r25
    3ba0:	9a 1f       	adc	r25, r26
    3ba2:	a1 1d       	adc	r26, r1
    3ba4:	68 0f       	add	r22, r24
    3ba6:	79 1f       	adc	r23, r25
    3ba8:	8a 1f       	adc	r24, r26
    3baa:	91 1d       	adc	r25, r1
    3bac:	a1 1d       	adc	r26, r1
    3bae:	6a 0f       	add	r22, r26
    3bb0:	71 1d       	adc	r23, r1
    3bb2:	81 1d       	adc	r24, r1
    3bb4:	91 1d       	adc	r25, r1
    3bb6:	a1 1d       	adc	r26, r1
    3bb8:	20 d0       	rcall	.+64     	; 0x3bfa <__ultoa_invert+0x84>
    3bba:	09 f4       	brne	.+2      	; 0x3bbe <__ultoa_invert+0x48>
    3bbc:	68 94       	set
    3bbe:	3f 91       	pop	r19
    3bc0:	2a e0       	ldi	r18, 0x0A	; 10
    3bc2:	26 9f       	mul	r18, r22
    3bc4:	11 24       	eor	r1, r1
    3bc6:	30 19       	sub	r19, r0
    3bc8:	30 5d       	subi	r19, 0xD0	; 208
    3bca:	31 93       	st	Z+, r19
    3bcc:	de f6       	brtc	.-74     	; 0x3b84 <__ultoa_invert+0xe>
    3bce:	cf 01       	movw	r24, r30
    3bd0:	08 95       	ret
    3bd2:	46 2f       	mov	r20, r22
    3bd4:	47 70       	andi	r20, 0x07	; 7
    3bd6:	40 5d       	subi	r20, 0xD0	; 208
    3bd8:	41 93       	st	Z+, r20
    3bda:	b3 e0       	ldi	r27, 0x03	; 3
    3bdc:	0f d0       	rcall	.+30     	; 0x3bfc <__ultoa_invert+0x86>
    3bde:	c9 f7       	brne	.-14     	; 0x3bd2 <__ultoa_invert+0x5c>
    3be0:	f6 cf       	rjmp	.-20     	; 0x3bce <__ultoa_invert+0x58>
    3be2:	46 2f       	mov	r20, r22
    3be4:	4f 70       	andi	r20, 0x0F	; 15
    3be6:	40 5d       	subi	r20, 0xD0	; 208
    3be8:	4a 33       	cpi	r20, 0x3A	; 58
    3bea:	18 f0       	brcs	.+6      	; 0x3bf2 <__ultoa_invert+0x7c>
    3bec:	49 5d       	subi	r20, 0xD9	; 217
    3bee:	31 fd       	sbrc	r19, 1
    3bf0:	40 52       	subi	r20, 0x20	; 32
    3bf2:	41 93       	st	Z+, r20
    3bf4:	02 d0       	rcall	.+4      	; 0x3bfa <__ultoa_invert+0x84>
    3bf6:	a9 f7       	brne	.-22     	; 0x3be2 <__ultoa_invert+0x6c>
    3bf8:	ea cf       	rjmp	.-44     	; 0x3bce <__ultoa_invert+0x58>
    3bfa:	b4 e0       	ldi	r27, 0x04	; 4
    3bfc:	a6 95       	lsr	r26
    3bfe:	97 95       	ror	r25
    3c00:	87 95       	ror	r24
    3c02:	77 95       	ror	r23
    3c04:	67 95       	ror	r22
    3c06:	ba 95       	dec	r27
    3c08:	c9 f7       	brne	.-14     	; 0x3bfc <__ultoa_invert+0x86>
    3c0a:	00 97       	sbiw	r24, 0x00	; 0
    3c0c:	61 05       	cpc	r22, r1
    3c0e:	71 05       	cpc	r23, r1
    3c10:	08 95       	ret
    3c12:	9b 01       	movw	r18, r22
    3c14:	ac 01       	movw	r20, r24
    3c16:	0a 2e       	mov	r0, r26
    3c18:	06 94       	lsr	r0
    3c1a:	57 95       	ror	r21
    3c1c:	47 95       	ror	r20
    3c1e:	37 95       	ror	r19
    3c20:	27 95       	ror	r18
    3c22:	ba 95       	dec	r27
    3c24:	c9 f7       	brne	.-14     	; 0x3c18 <__ultoa_invert+0xa2>
    3c26:	62 0f       	add	r22, r18
    3c28:	73 1f       	adc	r23, r19
    3c2a:	84 1f       	adc	r24, r20
    3c2c:	95 1f       	adc	r25, r21
    3c2e:	a0 1d       	adc	r26, r0
    3c30:	08 95       	ret

00003c32 <_exit>:
    3c32:	f8 94       	cli

00003c34 <__stop_program>:
    3c34:	ff cf       	rjmp	.-2      	; 0x3c34 <__stop_program>
